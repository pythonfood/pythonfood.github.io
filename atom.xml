<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PythonFood</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pythonfood.github.io/"/>
  <updated>2018-08-16T02:27:23.585Z</updated>
  <id>http://pythonfood.github.io/</id>
  
  <author>
    <name>Python Food</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pyspider架构概述及用法详解</title>
    <link href="http://pythonfood.github.io/2018/07/04/Pyspider%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://pythonfood.github.io/2018/07/04/Pyspider架构概述及用法详解/</id>
    <published>2018-07-04T02:00:00.000Z</published>
    <updated>2018-08-16T02:27:23.585Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、官方详解"><a href="#一、官方详解" class="headerlink" title="一、官方详解"></a>一、官方详解</h2><h3 id="1、官方文档"><a href="#1、官方文档" class="headerlink" title="1、官方文档"></a>1、官方文档</h3><p><a href="http://docs.pyspider.org/en/latest/" target="_blank" rel="noopener">http://docs.pyspider.org/en/latest/</a></p><h3 id="2、中文翻译"><a href="#2、中文翻译" class="headerlink" title="2、中文翻译"></a>2、中文翻译</h3><p><a href="http://www.pyspider.cn/book/pyspider/pyspider-Quickstart-2.html" target="_blank" rel="noopener">http://www.pyspider.cn/book/pyspider/pyspider-Quickstart-2.html</a></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>PySpider框架基本使用及抓取TripAdvisor实战</title>
    <link href="http://pythonfood.github.io/2018/07/04/PySpider%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%8A%93%E5%8F%96TripAdvisor%E5%AE%9E%E6%88%98/"/>
    <id>http://pythonfood.github.io/2018/07/04/PySpider框架基本使用及抓取TripAdvisor实战/</id>
    <published>2018-07-04T01:00:00.000Z</published>
    <updated>2018-08-16T02:26:36.285Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、爬取实战"><a href="#一、爬取实战" class="headerlink" title="一、爬取实战"></a>一、爬取实战</h2><h3 id="1、PySpider框架"><a href="#1、PySpider框架" class="headerlink" title="1、PySpider框架"></a>1、PySpider框架</h3><ul><li>去重处理</li><li>结果监控</li><li>多进程处理</li><li>PyQuery提取</li><li>错误重试</li><li>WebUI管理</li><li>代码简洁</li><li>JavaScript渲染</li></ul><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>cmd管理员身份运行，执行命令<code>pip install pyspider</code></p><h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><p>cmd输入命令<code>pyspider</code>。浏览器输入地址：<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a></p><p>ps:需要安装过phantomjs</p><h3 id="4、实战"><a href="#4、实战" class="headerlink" title="4、实战"></a>4、实战</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2018-06-07 22:43:08</span></span><br><span class="line"><span class="comment"># Project: TripAdvisor</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    client = pymongo.MongoClient(<span class="string">'localhost'</span>)</span><br><span class="line">    db = client[<span class="string">'trip'</span>]</span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'http://www.tripadvisor.cn/Attractions-g186338-Activities-c47-t163-London_England.html#ATTRACTION_LIST'</span>, callback=self.index_page, validate_cert=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.listing_title &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page, validate_cert=<span class="keyword">False</span>)</span><br><span class="line">            next = response.doc(<span class="string">'.pagination .nav.next'</span>).attr.href</span><br><span class="line">            self.crawl(next, callback=self.index_page, validate_cert=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        name = response.doc(<span class="string">'.heading_title'</span>).text()</span><br><span class="line">        rating = response.doc(<span class="string">'div &gt; .more'</span>).text()</span><br><span class="line">        adress = response.doc(<span class="string">'.location &gt; .address'</span>).text()</span><br><span class="line">        phone = response.doc(<span class="string">'.phone &gt; div'</span>).text()</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"url"</span>:response.url,</span><br><span class="line">            <span class="string">"name"</span>:name,</span><br><span class="line">            <span class="string">"rating"</span>:rating,</span><br><span class="line">            <span class="string">"adress"</span>:adress,</span><br><span class="line">            <span class="string">"phone"</span>:phone</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_result</span><span class="params">(self,result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            self.save_to_mongo(result)</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(self,result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.db[<span class="string">'london'</span>].insert(result):</span><br><span class="line">            print(<span class="string">'save to mongodb:'</span>,result)</span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis+Flask维护动态Cookies池</title>
    <link href="http://pythonfood.github.io/2018/07/03/%E4%BD%BF%E7%94%A8Redis-Flask%E7%BB%B4%E6%8A%A4%E5%8A%A8%E6%80%81Cookies%E6%B1%A0/"/>
    <id>http://pythonfood.github.io/2018/07/03/使用Redis-Flask维护动态Cookies池/</id>
    <published>2018-07-03T05:00:00.000Z</published>
    <updated>2018-08-15T12:27:01.678Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、Cookies池详解"><a href="#一、Cookies池详解" class="headerlink" title="一、Cookies池详解"></a>一、Cookies池详解</h2><h3 id="1、为什么要维护cookie池"><a href="#1、为什么要维护cookie池" class="headerlink" title="1、为什么要维护cookie池"></a>1、为什么要维护cookie池</h3><p>有的网站需要登录后才能爬取，如新浪微博</p><p>爬取过程中如果频率过高会导致封号，那么如果想要获得非常多的数据，则需要非常多的账号</p><h3 id="2、cookie池的要求"><a href="#2、cookie池的要求" class="headerlink" title="2、cookie池的要求"></a>2、cookie池的要求</h3><ul><li>自动登录更新</li><li>定时验证筛选</li><li>提供外部接口（可将池架在远程的服务器上，实现远程部署</li></ul><h3 id="3、cookie池的架构"><a href="#3、cookie池的架构" class="headerlink" title="3、cookie池的架构"></a>3、cookie池的架构</h3><p>账号队列 ===》 生成器 ===》 cookies队列（对外提供API） ===》 定时检测器</p><h3 id="4、cookie池的实现"><a href="#4、cookie池的实现" class="headerlink" title="4、cookie池的实现"></a>4、cookie池的实现</h3><p>需要先将一定量的账号密码之类的cookie存进Redis数据库，然后利用python调用并维护。</p><p>关于cookies池的维护，有以下开源项目案例可供参考：<a href="https://github.com/Germey/CookiesPool" target="_blank" rel="noopener">https://github.com/Germey/CookiesPool</a></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>使用代理处理反爬抓取微信文章</title>
    <link href="http://pythonfood.github.io/2018/07/03/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E5%A4%84%E7%90%86%E5%8F%8D%E7%88%AC%E6%8A%93%E5%8F%96%E5%BE%AE%E4%BF%A1%E6%96%87%E7%AB%A0/"/>
    <id>http://pythonfood.github.io/2018/07/03/使用代理处理反爬抓取微信文章/</id>
    <published>2018-07-03T04:00:00.000Z</published>
    <updated>2018-08-15T13:05:59.205Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、爬取实战"><a href="#一、爬取实战" class="headerlink" title="一、爬取实战"></a>一、爬取实战</h2><h3 id="1、流程框架"><a href="#1、流程框架" class="headerlink" title="1、流程框架"></a>1、流程框架</h3><p>(1)抓取索引页内容</p><p>利用requests请求目标站点，得到索引网页HTML代码，返回结果。</p><p>(2)代理设置</p><p>如果遇到302状态码，则证明IP被封，切换代理重试。</p><p>(3)分析详情页内容</p><p>请求详情页，分析得到标题，正文等内容。</p><p>(4)将数据保存到数据库</p><p>将结构化数据保存到MongoDB。</p><h3 id="2、实战"><a href="#2、实战" class="headerlink" title="2、实战"></a>2、实战</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ConnectionError</span><br><span class="line"><span class="keyword">from</span> lxml.etree <span class="keyword">import</span> XMLSyntaxError</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> wxconfig <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据库连接</span></span><br><span class="line">client = pymongo.MongoClient(MONGO_URI)</span><br><span class="line">db = client[MONGO_DB]</span><br><span class="line"><span class="comment"># 爬取url</span></span><br><span class="line">base_url = <span class="string">'http://weixin.sogou.com/weixin?'</span></span><br><span class="line"><span class="comment"># 请求头，需要带上cookie，不然只能访问10页数据</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'SUID=F6177C7B3220910A000000058E4D679; SUV=1491392122762346; ABTEST=1|1491392129|v1; SNUID=0DED8681FBFEB69230E6BF3DFB2F8D6B; ld=OZllllllll2Yi2balllllV06C77lllllWTZgdkllll9lllllxv7ll5@@@@@@@@@@; LSTMV=189%2C31; LCLKINT=1805; weixinIndexVisited=1; SUIR=0DED8681FBFEB69230E6BF3DFB2F8D6B; JSESSIONID=aaa-BcHIDk9xYdr4odFSv; PHPSESSID=afohijek3ju93ab6l0eqeph902; sct=21; IPLOC=CN; ppinf=5|1491580643|1492790243|dHJ1c3Q6MToxfGNsaWVudGlkOjQ6MjAxN3x1bmlxbmFtZToyNzolRTUlQjQlOTQlRTUlQkElODYlRTYlODklOER8Y3J0OjEwOjE0OTE1ODA2NDN8cmVmbmljazoyNzolRTUlQjQlOTQlRTUlQkElODYlRTYlODklOER8dXNlcmlkOjQ0Om85dDJsdUJfZWVYOGRqSjRKN0xhNlBta0RJODRAd2VpeGluLnNvaHUuY29tfA; pprdig=j7ojfJRegMrYrl96LmzUhNq-RujAWyuXT_H3xZba8nNtaj7NKA5d0ORq-yoqedkBg4USxLzmbUMnIVsCUjFciRnHDPJ6TyNrurEdWT_LvHsQIKkygfLJH-U2MJvhwtHuW09enCEzcDAA_GdjwX6_-_fqTJuv9w9Gsw4rF9xfGf4; sgid=; ppmdig=1491580643000000d6ae8b0ebe76bbd1844c993d1ff47cea'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'weixin.sogou.com'</span>,</span><br><span class="line">    <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 开始时是否启用代理</span></span><br><span class="line">proxy = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 代理获取函数，这里使用类flask的接口</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(PROXY_POOL_URL)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="comment"># 没有异常直接结束</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> ConnectionError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url, count=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'Crawling'</span>, url)</span><br><span class="line">    print(<span class="string">'Try Count'</span>, count)</span><br><span class="line">    <span class="keyword">global</span> proxy</span><br><span class="line">    <span class="comment">#设置访问深度</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;= MAX_COUNT:</span><br><span class="line">        print(<span class="string">'Tried Too Many Counts'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 判断启用代理和有代理</span></span><br><span class="line">        <span class="keyword">if</span> proxy:</span><br><span class="line">            <span class="comment"># 给代理池取出的数据加上协议头</span></span><br><span class="line">            proxies = &#123;</span><br><span class="line">                <span class="string">'http'</span>:<span class="string">'http://'</span> + proxy</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 需要设置allow_redirects=False,禁止requests自动处理重定向</span></span><br><span class="line">            response = requests.get(url, headers=headers, proxies=proxies, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response = requests.get(url, headers=headers, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line">        <span class="comment"># 如果请求成功返回    </span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">302</span>:</span><br><span class="line">            <span class="comment"># 出现302说明IP被封，需要更换代理</span></span><br><span class="line">            print(<span class="string">'302'</span>)</span><br><span class="line">            <span class="comment"># 获取一个新代理</span></span><br><span class="line">            proxy = get_proxy()</span><br><span class="line">            <span class="keyword">if</span> proxy:</span><br><span class="line">                print(<span class="string">'Using Proxy'</span>, proxy)</span><br><span class="line">                 <span class="comment"># 获取到代理ip重新获取网页</span></span><br><span class="line">                <span class="keyword">return</span> get_html(url)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'Get Proxy Failed'</span>)</span><br><span class="line">                <span class="comment"># 没有代理了，直接退出</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Error Occurred'</span>, e.args)</span><br><span class="line">        proxy = get_proxy()</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> get_html(url, count)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_index</span><span class="params">(keyword,page)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'query'</span>:keyword,</span><br><span class="line">        <span class="string">'type'</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">'page'</span>:page</span><br><span class="line">    &#125;</span><br><span class="line">    queries = urlencode(data)</span><br><span class="line">    url = base_url + queries</span><br><span class="line">    html = get_html(url)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">(html)</span>:</span></span><br><span class="line">    doc = pq(html)</span><br><span class="line">    items = doc(<span class="string">'.news-box .news-list li .txt-box h3 a'</span>).items()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> item.attr(<span class="string">'href'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_detail</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> ConnectionError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        doc = pq(html)</span><br><span class="line">        title = doc(<span class="string">'.rich_media_title'</span>).text()</span><br><span class="line">        content = doc(<span class="string">'.rich_media_content'</span>).text()</span><br><span class="line">        date = doc(<span class="string">'#post-date'</span>).text()</span><br><span class="line">        nickname = doc(<span class="string">'#js_profile_qrcode &gt; div &gt; strong'</span>).text()</span><br><span class="line">        wechat = doc(<span class="string">'#js_profile_qrcode &gt; div &gt; p:nth-child(3) &gt; span'</span>).text()</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'title'</span>: title,</span><br><span class="line">            <span class="string">'content'</span>: content,</span><br><span class="line">            <span class="string">'date'</span>: date,</span><br><span class="line">            <span class="string">'nickname'</span>: nickname,</span><br><span class="line">            <span class="string">'wechat'</span>: wechat</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> XMLSyntaxError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> db[<span class="string">'articles'</span>].update(&#123;<span class="string">'title'</span>:data[<span class="string">'title'</span>]&#125;,&#123;<span class="string">'$set'</span>:data&#125;,<span class="keyword">True</span>):</span><br><span class="line">        print(<span class="string">'Saved to Mongo'</span>, data[<span class="string">'title'</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Saved to Mongo Failed'</span>, data[<span class="string">'title'</span>])</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 设置访问的页数和次数</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        <span class="comment"># 传入访问的关键字</span></span><br><span class="line">        html = get_index(KEYWORD, page)</span><br><span class="line">        <span class="comment"># 获取到html文件，获取链接</span></span><br><span class="line">        <span class="keyword">if</span> html:</span><br><span class="line">            article_urls = parse_index(html)</span><br><span class="line">            <span class="keyword">for</span> article_url <span class="keyword">in</span> article_urls:</span><br><span class="line">                article_html = get_detail(article_url)</span><br><span class="line">                <span class="keyword">if</span> article_html:</span><br><span class="line">                    <span class="comment"># 解析文章内容</span></span><br><span class="line">                    article_data = parse_detail(article_html)</span><br><span class="line">                    print(article_data)</span><br><span class="line">                    <span class="comment"># 保存到数据库</span></span><br><span class="line">                    <span class="keyword">if</span> article_data:</span><br><span class="line">                        save_to_mongo(article_data)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>wxconfig.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">PROXY_POOL_URL = <span class="string">'http://127.0.0.1:5000/get'</span></span><br><span class="line">KEYWORD = <span class="string">'风景'</span></span><br><span class="line">MONGO_URI = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'weixin'</span></span><br><span class="line">MAX_COUNT = <span class="number">5</span></span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>使用Redis+Flask维护动态代理池</title>
    <link href="http://pythonfood.github.io/2018/07/03/%E4%BD%BF%E7%94%A8Redis-Flask%E7%BB%B4%E6%8A%A4%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%B1%A0/"/>
    <id>http://pythonfood.github.io/2018/07/03/使用Redis-Flask维护动态代理池/</id>
    <published>2018-07-03T03:00:00.000Z</published>
    <updated>2018-08-15T13:06:45.676Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、代理池详解"><a href="#一、代理池详解" class="headerlink" title="一、代理池详解"></a>一、代理池详解</h2><h3 id="1、代理池的维护"><a href="#1、代理池的维护" class="headerlink" title="1、代理池的维护"></a>1、代理池的维护</h3><p>目前有很多网站提供免费代理，而且种类齐全，比如各个地区、各个匿名级别的都有，不过质量实在不敢恭维，毕竟都是免费公开的，可能一个代理无数个人在用也说不定。所以我们需要做的是大量抓取这些免费代理，然后筛选出其中可用的代理存储起来供我们使用，不可用的进行剔除。</p><h3 id="2、获取代理途径"><a href="#2、获取代理途径" class="headerlink" title="2、获取代理途径"></a>2、获取代理途径</h3><p>维护一个代理池第一步就是要找到提供免费代理的站点，例如PROXY360。可以看到网页里提供了一些免费代理列表，包括服务器地址、端口、代理种类、地区、更新时间等等信息。</p><p>当前我们需要的就是代理服务器和端口信息，将其爬取下来即可。</p><h3 id="3、代理池的要求"><a href="#3、代理池的要求" class="headerlink" title="3、代理池的要求"></a>3、代理池的要求</h3><ul><li>多占抓取，异步检测</li><li>定时筛选，持续更新</li><li>提供接口，易于获取</li></ul><h3 id="4、代理池的架构"><a href="#4、代理池的架构" class="headerlink" title="4、代理池的架构"></a>4、代理池的架构</h3><p>Internet  ===》  代理获取器  ===》  代理筛选器  ===》  代理调度器（对外提供API）  ===》  定时检测器</p><h3 id="5、维护代理"><a href="#5、维护代理" class="headerlink" title="5、维护代理"></a>5、维护代理</h3><p>那么爬取下代理之后怎样保存呢？</p><p>首先我们需要确保的目标是可以边取边存，另外还需要定时检查队列中不可用的代理将其剔除，所以需要易于存取。</p><p>另外怎样区分哪些是最新的可用的，哪些是旧的，如果用修改时间来标注是可以的，不过更简单的方法就是维护一个队列，只从一端存入，例如右端，这样就能确保最新的代理在队列右端，而在左端则是存入时间较长的代理，如果要取一个可用代理，从队列右端取一个就好了。</p><p>那么对于队列的左端，不能让它一直老化下去，还需要做的操作就是定时从队列左端取出代理，然后进行检测，如果可用，重新将其加入右端。</p><p>通过以上操作，就保证了代理一直是最新可用的。</p><p>所以目前来看，既能高效处理，又可以做到队列动态维护，合适的方法就是利用Redis数据库的队列。</p><p>可以定义一个类来维护一个Redis队列，比如get方法是批量从左端取出代理，put方法是从右端放入可用代理，pop方法是从右端取出最新可用代理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> proxypool.error <span class="keyword">import</span> PoolEmptyError</span><br><span class="line"><span class="keyword">from</span> proxypool.setting <span class="keyword">import</span> HOST, PORT</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host=HOST, port=PORT)</span>:</span></span><br><span class="line">        self._db = redis.Redis(host, port)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, count=<span class="number">1</span>)</span>:</span></span><br><span class="line">        proxies = self._db.lrange(<span class="string">"proxies"</span>, <span class="number">0</span>, count - <span class="number">1</span>)</span><br><span class="line">        self._db.ltrim(<span class="string">"proxies"</span>, count, <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> proxies</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, proxy)</span>:</span></span><br><span class="line">        self._db.rpush(<span class="string">"proxies"</span>, proxy)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._db.rpop(<span class="string">"proxies"</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> PoolEmptyError</span><br></pre></td></tr></table></figure><h3 id="6、检测代理"><a href="#6、检测代理" class="headerlink" title="6、检测代理"></a>6、检测代理</h3><p>那么如何来检测代理是否可用？可以使用这个代理来请求某个站点，比如百度，如果获得正常的返回结果，那证明代理可用，否则代理不可用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conn = RedisClient()</span><br><span class="line">proxies = &#123;<span class="string">'http'</span>: proxy&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://www.baidu.com'</span>, proxies=proxies)</span><br><span class="line"><span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">    conn.put(proxy)</span><br></pre></td></tr></table></figure><h3 id="7、获取可用代理"><a href="#7、获取可用代理" class="headerlink" title="7、获取可用代理"></a>7、获取可用代理</h3><p>现在我们维护了一个代理池，那么这个代理池需要是可以公用的。</p><p>比如现在有多个爬虫项目都需要用到代理，而代理池的维护作为另外的一个项目，他们之间如果要建立连接，最恰当的方式就是接口。</p><p>所以可以利用Web服务器来实现一个接口，其他的项目通过请求这个接口得到内容获取到一个可用代理，这样保证了代理池的通用性。</p><p>所以要实现这个还需要一个Web服务器，例如Flask，Tornado等等。</p><p>例如使用Flask，定义一个路由，然后调用的RedisClient的pop方法，返回结果即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">()</span>:</span></span><br><span class="line">    conn = RedisClient()</span><br><span class="line">    <span class="keyword">return</span> conn.pop()</span><br></pre></td></tr></table></figure><p>这样一来，整个程序运行起来后，浏览器输入localhost:5000/get，请求网页就可以看到一个可用代理了。</p><h3 id="8、使用代理"><a href="#8、使用代理" class="headerlink" title="8、使用代理"></a>8、使用代理</h3><p>使用代理时只需要请求这个站点，就可以拿到可使用的代理了。</p><p>可以定义一个简单的方法，返回网页内容即代理，然后在爬取方法里设置代理使用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span><span class="params">()</span>:</span></span><br><span class="line">    r = requests.get(<span class="string">'http://127.0.0.1:5000/get'</span>)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(url, proxy)</span>:</span></span><br><span class="line">    proxies = &#123;<span class="string">'http'</span>: get_proxy()&#125;</span><br><span class="line">    r = requests.get(url, proxies=proxies)</span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure><h3 id="9、github项目源代码"><a href="#9、github项目源代码" class="headerlink" title="9、github项目源代码"></a>9、github项目源代码</h3><p><a href="https://github.com/Germey/ProxyPool" target="_blank" rel="noopener">https://github.com/Germey/ProxyPool</a></p><p>PS:项目requirements.txt文件中缺少一个依赖库fake-useragent，需要手动pip安装。</p><p>还有如果报错’TypeError: expected string or bytes-like object’,找到对应的代码，是一个爬取代理网站的方法，删除或屏蔽掉就可以了。</p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>分析Ajax爬取今日头条街拍美图</title>
    <link href="http://pythonfood.github.io/2018/07/03/%E5%88%86%E6%9E%90Ajax%E7%88%AC%E5%8F%96%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E8%A1%97%E6%8B%8D%E7%BE%8E%E5%9B%BE/"/>
    <id>http://pythonfood.github.io/2018/07/03/分析Ajax爬取今日头条街拍美图/</id>
    <published>2018-07-03T02:00:00.000Z</published>
    <updated>2018-08-15T03:36:41.354Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、爬取实战"><a href="#一、爬取实战" class="headerlink" title="一、爬取实战"></a>一、爬取实战</h2><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>请确保已经安装好requests库，使用的编辑器是PyCharm。</p><h3 id="2、抓取分析"><a href="#2、抓取分析" class="headerlink" title="2、抓取分析"></a>2、抓取分析</h3><p>(1)抓取前分析抓取对象：打开今日头条首页<a href="https://www.toutiao.com/" target="_blank" rel="noopener">https://www.toutiao.com/</a></p><p>(2)右上角输入“街拍”，搜索进入街拍。</p><p>(3)这时打开开发者工具，查看所有的网络请求。首先，打开第一个网络请求，这个请求的URL就是当前的链接<a href="http://www.toutiao.com/search/?keyword=街拍" target="_blank" rel="noopener">http://www.toutiao.com/search/?keyword=街拍</a> ，打开Preview选项卡查看Response Body。如果页面中的内容是根据第一个请求得到的结果渲染出来的，那么第一个请求的源代码中必然会包含页面结果中的文字。</p><p>(4)实际没有结果中的文字，可以初步判断这些内容是由Ajax加载，然后用JavaScript渲染出来的。接下来，我们可以切换到XHR过滤选项卡，查看一下有没有Ajax请求。不出所料，此处出现了一个比较常规的Ajax请求，看看它的结果是否包含了页面中的相关数据。   </p><p>(5)点击data字段展开，发现这里有许多条数据。点击第一条展开，可以发现有一个title字段，它的值正好就是页面中第一条数据的标题。再检查一下其他数据，也正好是一一对应的。</p><p>(6)我们的目的是要抓取其中的美图，这里一组图就对应前面data字段中的一条数据。每条数据还有一个image_detail字段，它是列表形式，这其中就包含了组图的所有图片列表,因此，我们只需要将列表中的url字段提取出来并下载下来就好了。每一组图都建立一个文件夹，文件夹的名称就为组图的标题。</p><p>(7)接下来，就可以直接用Python来模拟这个Ajax请求，然后提取出相关美图链接并下载。但是在这之前，我们还需要分析一下URL的规律。切换回Headers选项卡，观察一下它的请求URL和Headers信息。</p><p>(8)可以看到，这是一个GET请求，请求URL的参数有offset、format、keyword、autoload、count和cur_tab。我们需要找出这些参数的规律，因为这样才可以方便地用程序构造出来。</p><p>(9)接下来，可以滑动页面，多加载一些新结果。在加载的同时可以发现，Network中又出现了许多Ajax请求，这里观察一下后续链接的参数，发现变化的参数只有offset，其他参数都没有变化，而且第二次请求的offset值为20，第三次为40，第四次为60，所以可以发现规律，这个offset值就是偏移量，进而可以推断出count参数就是一次性获取的数据条数。因此，我们可以用offset参数来控制数据分页。这样一来，我们就可以通过接口批量获取数据了，然后将数据解析，将图片下载下来即可。</p><p><strong>PS：崔老师教程的第(6)步中查找的字段image_detail，实际上没有发现，这里使用image_list代替。</strong></p><h3 id="3、实战演练"><a href="#3、实战演练" class="headerlink" title="3、实战演练"></a>3、实战演练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载单个Ajax请求的结果。其中唯一变化的参数就是offset。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(offset)</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'autoload'</span>:<span class="string">'true'</span>,</span><br><span class="line">        <span class="string">'count'</span>:<span class="string">'20'</span>,</span><br><span class="line">        <span class="string">'cur_tab'</span>:<span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'format'</span>:<span class="string">'json'</span>,</span><br><span class="line">        <span class="string">'keyword'</span>:<span class="string">'街拍'</span>,</span><br><span class="line">        <span class="string">'offset'</span>:offset</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'http://www.toutiao.com/search_content/?'</span>+ urlencode(params) <span class="comment">#urlencode()方法构造请求的GET参数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json() <span class="comment"># 返回json格式数据</span></span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">        print(<span class="string">'请求索引页出错'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#提取每条数据的image_list字段中的每一张图片链接，将图片链接和图片所属的标题一并返回，此时可以构造一个生成器。    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_images</span><span class="params">(json)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> json.get(<span class="string">'data'</span>): <span class="comment">#json中data存在</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> json.get(<span class="string">'data'</span>):</span><br><span class="line">            title = item.get(<span class="string">'title'</span>)</span><br><span class="line">            <span class="keyword">if</span> item.get(<span class="string">'image_list'</span>): <span class="comment">#item中image_list存在</span></span><br><span class="line">                images = item.get(<span class="string">'image_list'</span>)</span><br><span class="line">                <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">                    <span class="keyword">yield</span>&#123; <span class="comment">#构造生成器</span></span><br><span class="line">                        <span class="string">'image'</span>:<span class="string">'http:'</span>+ image[<span class="string">'url'</span>],</span><br><span class="line">                        <span class="string">'title'</span>:title</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">保存图片，其中item就是前面get_images()方法返回的一个字典。</span></span><br><span class="line"><span class="string">首先根据item的title来创建文件夹。</span></span><br><span class="line"><span class="string">然后请求这个图片链接，获取图片的二进制数据，以二进制的形式写入文件。</span></span><br><span class="line"><span class="string">图片的名称可以使用其内容的MD5值，这样可以去除重复。                    </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(item.get(<span class="string">'title'</span>)): <span class="comment">#判断路径不存在</span></span><br><span class="line">        os.mkdir(item.get(<span class="string">'title'</span>)) <span class="comment">#用title创建文件夹</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(item.get(<span class="string">'image'</span>)) <span class="comment">#请求图片地址</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            file_path = <span class="string">'&#123;0&#125;/&#123;1&#125;.&#123;2&#125;'</span>.format(item.get(<span class="string">'title'</span>),md5(response.content).hexdigest(),<span class="string">'jpg'</span>) <span class="comment">#定义图片路径，图片命名用图片内容MD5值16进制表示</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path): <span class="comment">#判断路径不存在</span></span><br><span class="line">                <span class="keyword">with</span> open(file_path,<span class="string">'wb'</span>) <span class="keyword">as</span> f: </span><br><span class="line">                    f.write(response.content) <span class="comment">#写入二进制文件</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'Already Downloaded'</span>, file_path)</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">        print(<span class="string">'Failed to Save Image'</span>)</span><br><span class="line">    </span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    json = get_page(offset)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> get_images(json):</span><br><span class="line">        print(item)</span><br><span class="line">        save_image(item)</span><br><span class="line">        </span><br><span class="line">group_start = <span class="number">1</span></span><br><span class="line">group_end = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = Pool()</span><br><span class="line">    groups = ([i*<span class="number">20</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(group_start,group_end+<span class="number">1</span>)]) <span class="comment">#构造一个offset数组</span></span><br><span class="line">    pool.map(main,groups) <span class="comment">#多进程进程池，调用其map()方法实现多进程下载</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>使用Selenium模拟浏览器抓取淘宝商品美食信息</title>
    <link href="http://pythonfood.github.io/2018/07/03/%E4%BD%BF%E7%94%A8Selenium%E6%A8%A1%E6%8B%9F%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8A%93%E5%8F%96%E6%B7%98%E5%AE%9D%E5%95%86%E5%93%81%E7%BE%8E%E9%A3%9F%E4%BF%A1%E6%81%AF/"/>
    <id>http://pythonfood.github.io/2018/07/03/使用Selenium模拟浏览器抓取淘宝商品美食信息/</id>
    <published>2018-07-03T02:00:00.000Z</published>
    <updated>2018-08-15T10:09:18.837Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、爬取实战"><a href="#一、爬取实战" class="headerlink" title="一、爬取实战"></a>一、爬取实战</h2><h3 id="1、准备"><a href="#1、准备" class="headerlink" title="1、准备"></a>1、准备</h3><p>selenium、pyquery、re、pymongo</p><h3 id="2、流程"><a href="#2、流程" class="headerlink" title="2、流程"></a>2、流程</h3><p>(1)目标站点分析:<br>用浏览器打开淘宝首页输入‘美食’，打开审查元素，分析我们要的商品信息都在Element里哪个分段。</p><p>(2)搜索关键字:<br>利用Selenium驱动浏览器搜索关键字，得到查询后的商品列表。</p><p>(3)分析页码并翻页:<br>得到商品页码数，模拟翻页，得到后续页面的商品列表。</p><p>(4)分析提取商品内容:<br>利用PyQuery分析源码，解析得到商品列表。</p><p>(5)储存到MongoDB:<br>将商品列表信息储存到数据库MongoDB。</p><h3 id="3、实战"><a href="#3、实战" class="headerlink" title="3、实战"></a>3、实战</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">'''使用PhantomJS无界面浏览器，注意需要设置下窗口大小，否则有的元素获取不到会报错'''</span></span><br><span class="line"><span class="comment">#browser = webdriver.PhantomJS()</span></span><br><span class="line"><span class="comment">#browser.set_window_size(1400,900)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''可以给PhantomJS设置些选项，从而增加效率。比如：不加载图片、设置缓存等'''</span></span><br><span class="line"><span class="comment">#SERVICE_ARGS = ['--load-images=false', '--disk-cache=true']</span></span><br><span class="line"><span class="comment">#browser = webdriver.PhantomJS(service_args=SERVICE_ARGS)</span></span><br><span class="line"><span class="comment">#browser.set_window_size(1400,900)</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''chrome也可以设置无界面模式，Mac和Linux需要chrome59版本，Windows需要chrome60版本'''</span></span><br><span class="line"><span class="comment">#chrome_options = webdriver.ChromeOptions()</span></span><br><span class="line"><span class="comment">#chrome_options.add_argument('--headless')</span></span><br><span class="line"><span class="comment">#browser = webdriver.Chrome(chrome_options=chrome_options)</span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">wait = WebDriverWait(browser,<span class="number">10</span>)</span><br><span class="line">client = pymongo.MongoClient(MONGO_URL) <span class="comment">#声明mongodb客户端，MONGO_URL从配置文件config.py获取</span></span><br><span class="line">db = client[MONGO_DB] <span class="comment">#定义数据库，MONGO_DB从配置文件config.py获取。注意中括号[]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span> <span class="comment">#首页搜索关键字</span></span><br><span class="line">    print(<span class="string">'正在搜索'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(<span class="string">'http://www.taobao.com'</span>)</span><br><span class="line">        input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#q'</span>))) <span class="comment">#等待搜索框加载</span></span><br><span class="line">        submit = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#J_TSearchForm &gt; div.search-button &gt; button.btn-search'</span>))) <span class="comment">#等待搜索按钮加载</span></span><br><span class="line">        input.send_keys(KEYWORD) <span class="comment">#输入搜索关键字，KEYWORD从配置文件config.py获取</span></span><br><span class="line">        submit.click()</span><br><span class="line">        total = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.total'</span>))) <span class="comment">#获取总页数</span></span><br><span class="line">        get_products()</span><br><span class="line">        <span class="keyword">return</span> total.text <span class="comment">#返回总页数</span></span><br><span class="line">    <span class="keyword">except</span> TimeoutException: <span class="comment">#捕捉browser超时异常</span></span><br><span class="line">        <span class="keyword">return</span> search() <span class="comment">#超时异常后，重新进行搜索即可</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_page</span><span class="params">(page_number)</span>:</span> <span class="comment">#输入页码，进行翻页</span></span><br><span class="line">    print(<span class="string">'正在翻页'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.form &gt; input'</span>))) <span class="comment">#等待页码输入框</span></span><br><span class="line">        submit = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.form &gt; span.btn.J_Submit'</span>))) <span class="comment">#等待提交按钮</span></span><br><span class="line">        input.clear() <span class="comment">#输入前先清除内容</span></span><br><span class="line">        input.send_keys(page_number)</span><br><span class="line">        submit.click()</span><br><span class="line">        wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR,<span class="string">'#mainsrp-pager &gt; div &gt; div &gt; div &gt; ul &gt; li.item.active &gt; span'</span>),str(page_number))) <span class="comment">#等待高亮页码数值显示跳转的页码，确定跳转完成</span></span><br><span class="line">        get_products()</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        <span class="keyword">return</span> next_page(page_number) <span class="comment">#超时异常后，重新进行翻页即可</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_products</span><span class="params">()</span>:</span> <span class="comment">#获取当页商品数据</span></span><br><span class="line">    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,<span class="string">'#mainsrp-itemlist .items .item'</span>)))</span><br><span class="line">    html = browser.page_source <span class="comment">#获取当前页面源码</span></span><br><span class="line">    doc = pq(html) <span class="comment">#声明pyquery对象</span></span><br><span class="line">    items = doc(<span class="string">'#mainsrp-itemlist .items .item'</span>).items() <span class="comment"># 获取当前页所有商品对象</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items: <span class="comment">#遍历所有商品</span></span><br><span class="line">        product = &#123;</span><br><span class="line">            <span class="string">'image'</span>:item.find(<span class="string">'.pic .img'</span>).attr(<span class="string">'src'</span>),</span><br><span class="line">            <span class="string">'price'</span>:item.find(<span class="string">'.price'</span>).text(),</span><br><span class="line">            <span class="string">'deal'</span>:item.find(<span class="string">'.deal-cnt'</span>).text()[:<span class="number">-3</span>],</span><br><span class="line">            <span class="string">'title'</span>:item.find(<span class="string">'.title'</span>).text(),</span><br><span class="line">            <span class="string">'shop'</span>:item.find(<span class="string">'.shop'</span>).text(),</span><br><span class="line">            <span class="string">'location'</span>:item.find(<span class="string">'.location'</span>).text()</span><br><span class="line">        &#125;</span><br><span class="line">        save_to_mongo(product)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(result)</span>:</span> <span class="comment">#保存到mongodb数据库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> db[MONGO_TABLE].insert(result): <span class="comment">#判断数据插入到数据表中，MONGO_TABLE从配置文件config.py中获取</span></span><br><span class="line">            print(<span class="string">'存储到MongoDB成功'</span>,result)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">'存储到MongoDB失败'</span>,result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        total = search()</span><br><span class="line">        total = int(re.compile(<span class="string">'(\d+)'</span>).search(total).group(<span class="number">1</span>)) <span class="comment">#正则匹配对象，搜索总页数字符串，结果索引1，转为int型就是总页数了</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,total+<span class="number">1</span>): <span class="comment">#从第二页开始循环翻页</span></span><br><span class="line">            next_page(i)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">'浏览器出错啦'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'爬取完成'</span>)</span><br><span class="line">        browser.close() <span class="comment">#完成后一定关闭浏览器</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>config.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#config.py</span></span><br><span class="line"></span><br><span class="line">KEYWORD = <span class="string">'美食'</span></span><br><span class="line"></span><br><span class="line">MONGO_URL = <span class="string">'localhost'</span></span><br><span class="line">MONGO_DB = <span class="string">'taobao'</span></span><br><span class="line">MONGO_TABLE = <span class="string">'product'</span></span><br></pre></td></tr></table></figure></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Requests+正则表达式爬取猫眼电影TOP100</title>
    <link href="http://pythonfood.github.io/2018/07/03/Requests-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1TOP100/"/>
    <id>http://pythonfood.github.io/2018/07/03/Requests-正则表达式爬取猫眼电影TOP100/</id>
    <published>2018-07-03T01:00:00.000Z</published>
    <updated>2018-08-15T03:30:35.985Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、爬取实战"><a href="#一、爬取实战" class="headerlink" title="一、爬取实战"></a>一、爬取实战</h2><h3 id="1、目标站点分析"><a href="#1、目标站点分析" class="headerlink" title="1、目标站点分析"></a>1、目标站点分析</h3><p>我们需要抓取的目标站点为<a href="http://maoyan.com/board/4" target="_blank" rel="noopener">http://maoyan.com/board/4</a> ，打开之后便可以查看到榜单信息。排名第一的电影是霸王别姬，页面中显示的有效信息有影片名称、主演、上映时间、上映地区、评分、图片等信息。</p><p>将网页滚动到最下方，可以发现有分页的列表，直接点击第2页，观察页面的URL和内容发生了怎样的变化，可以发现页面的URL变成<a href="http://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">http://maoyan.com/board/4?offset=10</a> ，比之前的URL多了一个参数，那就是offset=10，而目前显示的结果是排行11~20名的电影，初步推断这是一个偏移量的参数。再点击下一页，发现页面的URL变成了<a href="http://maoyan.com/board/4?offset=20" target="_blank" rel="noopener">http://maoyan.com/board/4?offset=20</a> ，参数offset变成了20，而显示的结果是排行21~30的电影。</p><p>由此可以总结出规律，offset代表偏移量值，如果偏移量为n，则显示的电影序号就是n+1到n+10，每页显示10个。所以，如果想获取TOP100电影，只需要分开请求10次，而10次的offset参数分别设置为0、10、20、…90即可，这样获取不同的页面之后，再用正则表达式提取出相关信息，就可以得到TOP100的所有电影信息了。</p><h3 id="2、流程框架"><a href="#2、流程框架" class="headerlink" title="2、流程框架"></a>2、流程框架</h3><p>(1)抓取单页内容： 利用requests请求目标站点得到单个网页的HTML代码，返回结果。</p><p>(2)正则表达式分析： 根据HTML代码分析得到电影名称、主演、上映时间、评分、图片链接等信息。</p><p>(3)保存至文件： 通过文件的形式将结果保存，每一部电影一个结果一行Json字符串。</p><p>(4)开启循环及多线程： 对多项内容遍历，开启多线程提高抓取速度。</p><h3 id="3、爬虫实战"><a href="#3、爬虫实战" class="headerlink" title="3、爬虫实战"></a>3、爬虫实战</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0Safari/537.36'</span>&#125; <span class="comment">#设定自己的headers</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    response = requests.get(url,headers=headers) <span class="comment">#添加头部信息,不然会被禁</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    <span class="comment">#匹配过程保证起始符和终止符存在</span></span><br><span class="line">    pattern = re.compile(<span class="string">'&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;/i&gt;.*?data-src="(.*?)".*?name"&gt;&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?star"&gt;(.*?)&lt;/p&gt;.*?releasetime"&gt;(.*?)&lt;/p&gt;.*?integer"&gt;(.*?)&lt;/i&gt;.*?fraction"&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;'</span>,re.S)</span><br><span class="line">    items = re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span>&#123;</span><br><span class="line">            <span class="string">'index'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'image'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'actor'</span>:item[<span class="number">3</span>].strip()[<span class="number">3</span>:],</span><br><span class="line">            <span class="string">'time'</span>:item[<span class="number">4</span>].strip()[<span class="number">5</span>:],</span><br><span class="line">            <span class="string">'score'</span>:item[<span class="number">5</span>]+item[<span class="number">6</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'猫眼电影TOP100.txt'</span>,<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(content,ensure_ascii=<span class="keyword">False</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        f.close</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    url = <span class="string">'http://maoyan.com/board/4?offset'</span> + str(offset) <span class="comment">#url设置偏移量</span></span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    <span class="comment">#print(html)</span></span><br><span class="line">    items = parse_one_page(html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        print(item)</span><br><span class="line">        write_to_file(item)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):  </span><br><span class="line">        main(offset=i * <span class="number">10</span>)  </span><br><span class="line">    <span class="comment">#pool = Pool() # 使用进程池，提高抓取效率（使用多进程需要屏蔽for循环）</span></span><br><span class="line">    <span class="comment">#pool.map(main,[i*10 for i in range(10)])</span></span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-selenium库</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-selenium%E5%BA%93/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-selenium库/</id>
    <published>2018-07-02T07:00:00.000Z</published>
    <updated>2018-08-14T09:52:56.689Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、Selenium库详解"><a href="#一、Selenium库详解" class="headerlink" title="一、Selenium库详解"></a>一、Selenium库详解</h2><h3 id="1、什么是Selenium"><a href="#1、什么是Selenium" class="headerlink" title="1、什么是Selenium"></a>1、什么是Selenium</h3><p>Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些JavaScript动态渲染的页面来说，此种抓取方式非常有效。</p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p><code>pip install selenium</code></p><h3 id="3、基本使用"><a href="#3、基本使用" class="headerlink" title="3、基本使用"></a>3、基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    input = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">    input.send_keys(<span class="string">'python'</span>)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(browser,<span class="number">10</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID,<span class="string">'content_left'</span>)))</span><br><span class="line">    print(browser.current_url)</span><br><span class="line">    print(browser.get_cookies())</span><br><span class="line">    print(browser.page_source)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><h3 id="4、声明浏览器对象"><a href="#4、声明浏览器对象" class="headerlink" title="4、声明浏览器对象"></a>4、声明浏览器对象</h3><p>Selenium支持非常多的浏览器，如Chrome、Firefox、Edge等，还有Android、BlackBerry等手机端的浏览器。另外，也支持无界面浏览器PhantomJS。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"> </span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure><h3 id="5、访问页面"><a href="#5、访问页面" class="headerlink" title="5、访问页面"></a>5、访问页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="6、查找节点"><a href="#6、查找节点" class="headerlink" title="6、查找节点"></a>6、查找节点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单个节点</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input1 = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input2 = browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input3 = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input1,input2,input3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Selenium还提供了查找元素通用方法find_element()，它需要传入两个参数：查找方式By和值。</span></span><br><span class="line"><span class="comment">#这种查找方式的功能和上面列举的查找函数完全一致，不过参数更加灵活。</span></span><br><span class="line">input1_same = browser.find_element(By.ID,<span class="string">'q'</span>) <span class="comment">#等价于find_element_by_id('q')</span></span><br><span class="line">print(input1_same)</span><br><span class="line"></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>所有获取单个节点的方法：</p><ul><li>find_element_by_id</li><li>find_element_by_name</li><li>find_element_by_xpath</li><li>find_element_by_link_text</li><li>find_element_by_partial_link_text</li><li>find_element_by_tag_name</li><li>find_element_by_class_name</li><li>find_element_by_css_selector</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多个节点</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以直接用find_elements()方法来选择</span></span><br><span class="line">lis_same = browser.find_elements(By.CSS_SELECTOR,<span class="string">'.service-bd li'</span>) <span class="comment">#等价于find_elements_by_css_selector('.service-bd li')</span></span><br><span class="line">print(lis_same)</span><br><span class="line"></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>所有获取多个节点的方法：</p><ul><li>find_elements_by_id</li><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li></ul><h3 id="7、元素交互"><a href="#7、元素交互" class="headerlink" title="7、元素交互"></a>7、元素交互</h3><p>官方文档：<a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input.send_keys(<span class="string">'iphone'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'ipad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="8、交互动作-动作链"><a href="#8、交互动作-动作链" class="headerlink" title="8、交互动作(动作链)"></a>8、交互动作(动作链)</h3><p>还有一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。</p><p>将动作附加到动作链中串行执行。</p><p>官方文档：<a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser) <span class="comment">#声明动作链对象</span></span><br><span class="line">actions.drag_and_drop(source,target) <span class="comment">#定义拖放动作</span></span><br><span class="line">actions.perform() <span class="comment">#执行动作链</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="9、执行JavaScript"><a href="#9、执行JavaScript" class="headerlink" title="9、执行JavaScript"></a>9、执行JavaScript</h3><p>对于某些操作，Selenium API并没有提供。比如，下拉进度条，它可以直接模拟运行JavaScript，此时使用execute_script()方法即可实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="10、获取元素信息"><a href="#10、获取元素信息" class="headerlink" title="10、获取元素信息"></a>10、获取元素信息</h3><p>Selenium已经提供了选择节点的方法，返回的是WebElement类型，那么它也有相关的方法和属性来直接提取节点信息，如属性、文本等。这样的话，我们就可以不用通过解析源代码来提取信息了，非常方便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取属性</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">'class'</span>)) <span class="comment">#获取class属性</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取文本值</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br><span class="line">print(input.text) <span class="comment">#获取文本值</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取id、位置、标签名和大小</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br><span class="line">print(input.id) <span class="comment">#获取节点id</span></span><br><span class="line">print(input.location) <span class="comment">#获取该节点在页面中的相对位置</span></span><br><span class="line">print(input.tag_name) <span class="comment">#获取标签名称</span></span><br><span class="line">print(input.size) <span class="comment">#获取节点的大小，也就是宽高</span></span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="11、切换Frame"><a href="#11、切换Frame" class="headerlink" title="11、切换Frame"></a>11、切换Frame</h3><p>网页中有一种节点叫作iframe，也就是子Frame，相当于页面的子页面，它的结构和外部网页的结构完全一致。Selenium打开页面后，它默认是在父级Frame里面操作，而此时如果页面中还有子Frame，它是不能获取到子Frame里面的节点的。这时就需要使用switch_to.frame()方法来切换Frame。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>) <span class="comment">#切换到子frame</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'NO LOGO'</span>)</span><br><span class="line">browser.switch_to.parent_frame() <span class="comment">#切换回父frame</span></span><br><span class="line">logo = browser.find_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="12、延时等待"><a href="#12、延时等待" class="headerlink" title="12、延时等待"></a>12、延时等待</h3><p>这里等待的方式有两种：一种是隐式等待，一种是显式等待。</p><p>隐式等待，如果Selenium没有在DOM中找到节点，将继续等待，超出设定时间后，则抛出找不到节点的异常。隐式等待的效果其实并没有那么好，因为我们只规定了一个固定时间，而页面的加载时间会受到网络条件的影响。</p><p>显式等待，它指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就返回查找的节点；如果到了规定时间依然没有加载出该节点，则抛出超时异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#隐式等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>) <span class="comment">#隐式等待10秒</span></span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br><span class="line"></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#显示等待</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">wait = WebDriverWait(browser,<span class="number">10</span>) <span class="comment">#声明WebDriverWait对象，指定最长等待时间</span></span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID,<span class="string">'q'</span>))) <span class="comment">#调用它的until()方法，传入要等待条件</span></span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,<span class="string">'.btn-search'</span>)))</span><br><span class="line">print(input,button)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>等待条件及其含义：</p><ul><li><code>title_is</code>：标题是某内容</li><li><code>title_contains</code>：标题包含某内容</li><li><code>presence_of_element_located</code>：节点加载出来，传入定位元组，如(By.ID, ‘p’)</li><li><code>visibility_of_element_located</code>：节点可见，传入定位元组</li><li><code>visibility_of</code>：可见，传入节点对象</li><li><code>presence_of_all_elements_located</code>：所有节点加载出来</li><li><code>text_to_be_present_in_element</code>：某个节点文本包含某文字</li><li><code>text_to_be_present_in_element_value</code>：某个节点值包含某文字</li><li><code>frame_to_be_available_and_switch_to_it</code>：加载并切换</li><li><code>invisibility_of_element_located</code>：节点不可见</li><li><code>element_to_be_clickable</code>：节点可点击</li><li><code>staleness_of</code>：判断一个节点是否仍在DOM，可判断页面是否已经刷新</li><li><code>element_to_be_selected</code>：节点可选择，传节点对象</li><li><code>element_located_to_be_selected</code>：节点可选择，传入定位元组</li><li><code>element_selection_state_to_be</code>：传入节点对象以及状态，相等返回True，否则返回False</li><li><code>element_located_selection_state_to_be</code>：传入定位元组以及状态，相等返回True，否则返回False</li><li><code>alert_is_present</code>：是否出现警告</li></ul><p>等待条件的参数及用法参考官方文档：<a href="http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions</a></p><h3 id="13、前进后退"><a href="#13、前进后退" class="headerlink" title="13、前进后退"></a>13、前进后退</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.python.org/'</span>)</span><br><span class="line"></span><br><span class="line">browser.back() <span class="comment">#后退</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.forward() <span class="comment">#前进</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="14、Cookies"><a href="#14、Cookies" class="headerlink" title="14、Cookies"></a>14、Cookies</h3><p>Selenium可以方便地对Cookies进行操作，例如获取、添加、删除Cookies等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"> </span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies()) <span class="comment">#获取cookies</span></span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'name'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;) <span class="comment">#添加cookie</span></span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies() <span class="comment">#删除全部cookies</span></span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="15、选项卡管理"><a href="#15、选项卡管理" class="headerlink" title="15、选项卡管理"></a>15、选项卡管理</h3><p>在访问网页的时候，会开启一个个选项卡。Selenium也可以对选项卡进行操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>) <span class="comment">#借助javascript开启新的选项卡</span></span><br><span class="line">print(browser.window_handles) <span class="comment">#window_handles获取当前所有选项卡句柄</span></span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>]) <span class="comment">#切换到第二个选项卡</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>]) <span class="comment">#切换回第一个选项卡</span></span><br><span class="line">browser.get(<span class="string">'https://python.org'</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="16、异常处理"><a href="#16、异常处理" class="headerlink" title="16、异常处理"></a>16、异常处理</h3><p>官方文档：<a href="http://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions" target="_blank" rel="noopener">http://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"> </span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">'hello'</span>) <span class="comment">#选择一个并不存在的节点，此时就会遇到异常。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException,NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'Time Out'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'No Element'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-pyquery库</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-pyquery%E5%BA%93/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-pyquery库/</id>
    <published>2018-07-02T06:00:00.000Z</published>
    <updated>2018-08-14T09:47:15.801Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、PyQuery库详解"><a href="#一、PyQuery库详解" class="headerlink" title="一、PyQuery库详解"></a>一、PyQuery库详解</h2><h3 id="1、什么是PyQuery库"><a href="#1、什么是PyQuery库" class="headerlink" title="1、什么是PyQuery库"></a>1、什么是PyQuery库</h3><p>强大而灵活的网页解析库。如果你觉得正则写起来太麻烦，如果你觉得BeautifulSoup语法太难记，如果你熟悉jQuery的语法，那么PyQuery就是你的绝佳选择！！！</p><p><a href="http://pyquery.readthedocs.io" target="_blank" rel="noopener">http://pyquery.readthedocs.io</a></p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p><code>pip install pyquery</code></p><h3 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h3><p>初始化pyquery的时候，也需要传入HTML文本来初始化一个PyQuery对象。它的初始化方式有多种，比如直接传入字符串，传入URL，传入文件名，等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三种初始化方式</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.字符串初始化</span></span><br><span class="line">html = <span class="string">''' </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">    &lt;ul&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;first item&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;&gt;/li </span></span><br><span class="line"><span class="string">        &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="boid"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;/ul&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">doc1 = pq(html)</span><br><span class="line">print(doc1(<span class="string">'li'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.URL初始化 </span></span><br><span class="line">doc2 = pq(url=<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(doc2(<span class="string">'head'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.文件初始化</span></span><br><span class="line">doc3 = pq(filename=<span class="string">'demo.html'</span>)</span><br><span class="line">print(doc3(<span class="string">'li'</span>))</span><br></pre></td></tr></table></figure><h3 id="4、CSS选择器"><a href="#4、CSS选择器" class="headerlink" title="4、CSS选择器"></a>4、CSS选择器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">''' </span></span><br><span class="line"><span class="string">&lt;div id="container"&gt; </span></span><br><span class="line"><span class="string">    &lt;ul class="list"&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;first item&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;&gt;/li </span></span><br><span class="line"><span class="string">        &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="boid"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;/ul&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">doc = pq(html)</span><br><span class="line">print(doc(<span class="string">'#container .list li'</span>)) <span class="comment">#空格代表嵌套关系,依次传入了id、class、标签</span></span><br><span class="line">print(type(doc(<span class="string">'#container .list li'</span>)))</span><br></pre></td></tr></table></figure><h3 id="5、查找元素"><a href="#5、查找元素" class="headerlink" title="5、查找元素"></a>5、查找元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#子元素</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="container"&gt; </span></span><br><span class="line"><span class="string">    &lt;ul class="list"&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;first item&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;&gt;/li </span></span><br><span class="line"><span class="string">        &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="boid"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;/ul&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">doc = pq(html)</span><br><span class="line"><span class="comment"># 查找子孙节点需要用到find()方法，此时传入的参数是CSS选择器</span></span><br><span class="line">items = doc.find(<span class="string">'.list'</span>)</span><br><span class="line">print(items)</span><br><span class="line">print(type(items))</span><br><span class="line">lis = doc.find(<span class="string">'li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">print(type(lis))</span><br><span class="line"></span><br><span class="line">child1 = items.children() <span class="comment">#children()方法查找子节点</span></span><br><span class="line">print(child1)</span><br><span class="line">print(type(child1))</span><br><span class="line"></span><br><span class="line">child2 = items.children(<span class="string">'.active'</span>) <span class="comment">#筛选子节点中符合条件的节点</span></span><br><span class="line">print(child2)</span><br><span class="line">print(type(child2))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#父元素</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.list'</span>) <span class="comment">#首先用.list选取class为list的节点</span></span><br><span class="line"></span><br><span class="line">container = items.parent() <span class="comment">#parent()得到父节点</span></span><br><span class="line">print(container)</span><br><span class="line">print(type(container))</span><br><span class="line"></span><br><span class="line">parents = items.parents() <span class="comment">#parents()得到祖先节点</span></span><br><span class="line">print(parents)</span><br><span class="line">print(type(parents))</span><br><span class="line">parent = items.parents(<span class="string">'.wrap'</span>) <span class="comment">#筛选祖先节点中符合条件的节点</span></span><br><span class="line">print(parent)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#兄弟元素</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.list .item-0.active'</span>) <span class="comment">#注意：.item-0和.active之间没有空格，表示这两个class并存的节点</span></span><br><span class="line"></span><br><span class="line">print(li.siblings()) <span class="comment">#siblings()获取兄弟节点</span></span><br><span class="line"></span><br><span class="line">print(li.siblings(<span class="string">'.active'</span>)) <span class="comment">#筛选兄弟节点中符合条件的节点</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">doc = pq(html)</span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li) <span class="comment">#单个节点可以直接打印输出</span></span><br><span class="line">print(str(li)) <span class="comment">#也可以直接转成字符串</span></span><br><span class="line"></span><br><span class="line">lis = doc(<span class="string">'li'</span>).items() <span class="comment">#多个节点的结果，需要items()遍历来获取</span></span><br><span class="line">print(type(lis))</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lis:</span><br><span class="line">    print(li,type(li))</span><br></pre></td></tr></table></figure><h3 id="6、获取信息"><a href="#6、获取信息" class="headerlink" title="6、获取信息"></a>6、获取信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取属性</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt; </span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0"&gt;first item&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="boid"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"></span><br><span class="line">doc = pq(html)</span><br><span class="line">a = doc(<span class="string">'.item-0.active a'</span>)</span><br><span class="line"></span><br><span class="line">print(a,type(a))</span><br><span class="line">print(a.attr(<span class="string">'href'</span>)) <span class="comment">#调用attr()方法获取属性值</span></span><br><span class="line">print(a.attr.href) <span class="comment">#调用attr属性来获取属性值，这两种方式都可以</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取文本</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt; </span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;  </span></span><br><span class="line"><span class="string">            &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="boid"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"></span><br><span class="line">doc = pq(html)</span><br><span class="line"></span><br><span class="line">a = doc(<span class="string">'.item-0.active a'</span>)</span><br><span class="line">print(a,type(a))</span><br><span class="line">print(a.text()) <span class="comment">#text()获取节点内部的纯文本</span></span><br><span class="line"></span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">print(li.html()) <span class="comment">#html()获取节点内部的HTML文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，如果选中的结果是多个节点</span></span><br><span class="line">lis = doc(<span class="string">'li'</span>)</span><br><span class="line">print(lis.html()) <span class="comment">#html()方法返回的是第一个li节点的内部HTML文本</span></span><br><span class="line">print(lis.text()) <span class="comment">#text()则返回所有的li节点内部的纯文本，中间用空格分割开</span></span><br><span class="line">print(type(lis.text())) <span class="comment">#text()返回结果是一个字符串</span></span><br></pre></td></tr></table></figure><h3 id="7、DOM操作"><a href="#7、DOM操作" class="headerlink" title="7、DOM操作"></a>7、DOM操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt; </span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0"&gt;first item&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="boid"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">doc = pq(html)</span><br><span class="line"></span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line">print(li)</span><br><span class="line">li.removeClass(<span class="string">'active'</span>) <span class="comment">#removeClass()移除class属性</span></span><br><span class="line">print(li)</span><br><span class="line">li.addClass(<span class="string">'active'</span>) <span class="comment">#addClass()增加class属性</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line">li.attr(<span class="string">'name'</span>,<span class="string">'link'</span>) <span class="comment">#attr(属性名，属性值)来修改属性，如果只传入第一个参数的属性名，则是获取这个属性值</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line">li.text(<span class="string">'changed item'</span>) <span class="comment">#text(纯文本)来修改节点内纯文本，如果不传参数则是获取节点内纯文本</span></span><br><span class="line">print(li)</span><br><span class="line"></span><br><span class="line">li.html(<span class="string">'&lt;span&gt;changed item&lt;/span&gt;'</span>) <span class="comment">#html(html文本)来修改节点内html文本，如果不传参数则是获取节点内html文本</span></span><br><span class="line">print(li)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># remove()移除</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    Hello, World</span></span><br><span class="line"><span class="string">    &lt;p&gt;This is a paragraph.&lt;/p&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">doc = pq(html)</span><br><span class="line"></span><br><span class="line">wrap = doc(<span class="string">'.wrap'</span>)</span><br><span class="line">print(wrap.text()) <span class="comment">#获取的所有文本。现在想提取'Hello, World'这个字符串，而不要p节点内部的字符串，需要怎样操作呢？</span></span><br><span class="line"></span><br><span class="line">wrap.find(<span class="string">'p'</span>).remove() <span class="comment">#remove()方法移除节点</span></span><br><span class="line">print(wrap.text()) <span class="comment">#此时wrap内部就只剩下'Hello, World'这句话了</span></span><br></pre></td></tr></table></figure><p>还有很多节点操作的方法：append()、empty()和prepend()等，和jQuery的用法完全一致。官方文档：<a href="http://pyquery.readthedocs.io/en/latest/api.html。" target="_blank" rel="noopener">http://pyquery.readthedocs.io/en/latest/api.html。</a></p><h3 id="8、伪类选择器"><a href="#8、伪类选择器" class="headerlink" title="8、伪类选择器"></a>8、伪类选择器</h3><p>CSS选择器之所以强大，还有一个很重要的原因，那就是它支持多种多样的伪类选择器，例如选择第一个节点、最后一个节点、奇偶数节点、包含某一文本的节点等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="wrap"&gt;</span></span><br><span class="line"><span class="string">    &lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="bold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">             &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;/ul&gt;</span></span><br><span class="line"><span class="string">     &lt;/div&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">doc = pq(html)</span><br><span class="line"></span><br><span class="line">li = doc(<span class="string">'li:first-child'</span>) <span class="comment">#第一个</span></span><br><span class="line">print(li)</span><br><span class="line">li1 = doc(<span class="string">'li:last-child'</span>) <span class="comment">#最后一个</span></span><br><span class="line">print(li1)</span><br><span class="line">li2 = doc(<span class="string">'li:nth-child(2)'</span>) <span class="comment">#指定缩写顺序，第二个</span></span><br><span class="line">print(li2)</span><br><span class="line">li3 = doc(<span class="string">'li:gt(2)'</span>) <span class="comment">#大于2的</span></span><br><span class="line">print(li3)</span><br><span class="line">li4 = doc(<span class="string">'li:nth-child(2n)'</span>) <span class="comment">#偶数</span></span><br><span class="line">print(li4)</span><br><span class="line">li5 = doc(<span class="string">'li:contains(second)'</span>) <span class="comment">#包含second</span></span><br><span class="line">print(li5)</span><br></pre></td></tr></table></figure><p>关于CSS选择器的更多用法，可以参考<a href="http://www.w3school.com.cn/css/index.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/css/index.asp</a></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-beautifulsoup库</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-beautifulsoup%E5%BA%93/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-beautifulsoup库/</id>
    <published>2018-07-02T05:00:00.000Z</published>
    <updated>2018-08-14T09:43:09.814Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、BeautifulSoup库详解"><a href="#一、BeautifulSoup库详解" class="headerlink" title="一、BeautifulSoup库详解"></a>一、BeautifulSoup库详解</h2><h3 id="1、什么是BeautifulSoup"><a href="#1、什么是BeautifulSoup" class="headerlink" title="1、什么是BeautifulSoup"></a>1、什么是BeautifulSoup</h3><p>Beautiful Soup就是Python的一个HTML或XML的解析库，可以用它来方便地从网页中提取数据。利用它不用编写正则表达式即可方便实现网页信息的提取。</p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p><code>pip install beautifulsoup4</code></p><h3 id="3、解析器"><a href="#3、解析器" class="headerlink" title="3、解析器"></a>3、解析器</h3><table><thead><tr><th style="text-align:left">解析器</th><th style="text-align:left">使用方法</th><th style="text-align:left">优势</th><th style="text-align:left">劣势</th></tr></thead><tbody><tr><td style="text-align:left">Python标准库</td><td style="text-align:left">BeautifulSoup(markup, “html.parser”)</td><td style="text-align:left">Python的内置标准库、执行速度适中、文档容错能力强</td><td style="text-align:left">Python 2.7.3及Python 3.2.2之前的版本文档容错能力差</td></tr><tr><td style="text-align:left">lxml HTML解析器</td><td style="text-align:left">BeautifulSoup(markup, “lxml”)</td><td style="text-align:left">速度快、文档容错能力强</td><td style="text-align:left">需要安装C语言库</td></tr><tr><td style="text-align:left">lxml XML解析器</td><td style="text-align:left">BeautifulSoup(markup, “xml”)</td><td style="text-align:left">速度快、唯一支持XML的解析器</td><td style="text-align:left">需要安装C语言库</td></tr><tr><td style="text-align:left">html5lib</td><td style="text-align:left">BeautifulSoup(markup, “html5lib”)</td><td style="text-align:left">最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td><td style="text-align:left">速度慢、不依赖外部扩展</td></tr></tbody></table><h3 id="4、基本用法"><a href="#4、基本用法" class="headerlink" title="4、基本用法"></a>4、基本用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">''''' </span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Domouse's story&lt;/title&gt;&lt;/head&gt; </span></span><br><span class="line"><span class="string">&lt;body&gt; </span></span><br><span class="line"><span class="string">&lt;p class="title"name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt; </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were little sisters;and their names were </span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie"class="sister"id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt; </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/lacle"class="sister"id="link2"&gt;Lacle&lt;/a&gt;and </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/tilie"class="sister"id="link3"&gt;Tillie&lt;/a&gt; </span></span><br><span class="line"><span class="string">and they lived at bottom of a well.&lt;/p&gt; </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title.string) <span class="comment">#打印标题</span></span><br><span class="line">print(soup.prettify()) <span class="comment">#格式化代码</span></span><br></pre></td></tr></table></figure><h3 id="5、标签选择器"><a href="#5、标签选择器" class="headerlink" title="5、标签选择器"></a>5、标签选择器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择元素</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Domouse's story&lt;/title&gt;&lt;/head&gt;  </span></span><br><span class="line"><span class="string">&lt;body&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="title"name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were little sisters;and their names were  </span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie"class="sister"id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt;  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/lacle"class="sister"id="link2"&gt;Lacle&lt;/a&gt;and  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/tilie"class="sister"id="link3"&gt;Tillie&lt;/a&gt;  </span></span><br><span class="line"><span class="string">and they lived at bottom of a well.&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;  </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p) <span class="comment">#只能返回第一个标签</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取名称</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Domouse's story&lt;/title&gt;&lt;/head&gt;  </span></span><br><span class="line"><span class="string">&lt;body&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="title"name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were little sisters;and their names were  </span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie"class="sister"id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt;  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/lacle"class="sister"id="link2"&gt;Lacle&lt;/a&gt;and  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/tilie"class="sister"id="link3"&gt;Tillie&lt;/a&gt;  </span></span><br><span class="line"><span class="string">and they lived at bottom of a well.&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;  </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title.name) <span class="comment">#打印标签名称</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取属性</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Domouse's story&lt;/title&gt;&lt;/head&gt;  </span></span><br><span class="line"><span class="string">&lt;body&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="title"name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were little sisters;and their names were  </span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie"class="sister"id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt;  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/lacle"class="sister"id="link2"&gt;Lacle&lt;/a&gt;and  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/tilie"class="sister"id="link3"&gt;Tillie&lt;/a&gt;  </span></span><br><span class="line"><span class="string">and they lived at bottom of a well.&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;  </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.attrs[<span class="string">'name'</span>])</span><br><span class="line">print(soup.p[<span class="string">'name'</span>]) <span class="comment">#两种方式都可以获取标签属性</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取内容</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Domouse's story&lt;/title&gt;&lt;/head&gt;  </span></span><br><span class="line"><span class="string">&lt;body&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="title"name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were little sisters;and their names were  </span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie"class="sister"id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt;  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/lacle"class="sister"id="link2"&gt;Lacle&lt;/a&gt;and  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/tilie"class="sister"id="link3"&gt;Tillie&lt;/a&gt;  </span></span><br><span class="line"><span class="string">and they lived at bottom of a well.&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;  </span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure><h3 id="6、嵌套选择"><a href="#6、嵌套选择" class="headerlink" title="6、嵌套选择"></a>6、嵌套选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Domouse's story&lt;/title&gt;&lt;/head&gt;  </span></span><br><span class="line"><span class="string">&lt;body&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="title"name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were little sisters;and their names were  </span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie"class="sister"id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt;  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/lacle"class="sister"id="link2"&gt;Lacle&lt;/a&gt;and  </span></span><br><span class="line"><span class="string">&lt;a hred="http://example.com/tilie"class="sister"id="link3"&gt;Tillie&lt;/a&gt;  </span></span><br><span class="line"><span class="string">and they lived at bottom of a well.&lt;/p&gt;  </span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;  </span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#子节点和子孙节点</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt; </span></span><br><span class="line"><span class="string">    &lt;head&gt; </span></span><br><span class="line"><span class="string">        &lt;title&gt;The Domouse's story&lt;/title&gt; </span></span><br><span class="line"><span class="string">    &lt;/head&gt; </span></span><br><span class="line"><span class="string">    &lt;body&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt; </span></span><br><span class="line"><span class="string">        Once upon a time there were little sisters;and their names were </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/elsie" class="sister"id="link1"&gt; </span></span><br><span class="line"><span class="string">        &lt;span&gt;Elsle&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;/a&gt; </span></span><br><span class="line"><span class="string">        &lt;a hred="http://example.com/lacle"class="sister" id="link2"&gt;Lacle&lt;/a&gt; </span></span><br><span class="line"><span class="string">        and </span></span><br><span class="line"><span class="string">        &lt;a hred="http://example.com/tilie"class="sister" id="link3"&gt;Tillie&lt;/a&gt; </span></span><br><span class="line"><span class="string">        and they lived at bottom of a well. </span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.contents) <span class="comment">#子节点以列表形式返回</span></span><br><span class="line"></span><br><span class="line">print(soup.p.children) <span class="comment">#不同之处：children实际上是一个迭代器，需要用循环的方式才能将内容取出</span></span><br><span class="line"><span class="keyword">for</span> i,child <span class="keyword">in</span> enumerate(soup.p.children):</span><br><span class="line">    print(i,child)</span><br><span class="line"></span><br><span class="line">print(soup.p.descendants) <span class="comment">#获取所有的子孙节点，也是一个迭代器</span></span><br><span class="line"><span class="keyword">for</span> l,child1 <span class="keyword">in</span> enumerate(soup.p.descendants):</span><br><span class="line">    print(l,child1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#父节点和祖先节点</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt; </span></span><br><span class="line"><span class="string">    &lt;head&gt; </span></span><br><span class="line"><span class="string">        &lt;title&gt;The Domouse's story&lt;/title&gt; </span></span><br><span class="line"><span class="string">    &lt;/head&gt; </span></span><br><span class="line"><span class="string">    &lt;body&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt; </span></span><br><span class="line"><span class="string">        Once upon a time there were little sisters;and their names were </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/elsie" class="sister"id="link1"&gt; </span></span><br><span class="line"><span class="string">        &lt;span&gt;Elsle&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;/a&gt; </span></span><br><span class="line"><span class="string">        &lt;a hred="http://example.com/lacle"class="sister" id="link2"&gt;Lacle&lt;/a&gt; </span></span><br><span class="line"><span class="string">        and </span></span><br><span class="line"><span class="string">        &lt;a hred="http://example.com/tilie"class="sister" id="link3"&gt;Tillie&lt;/a&gt; </span></span><br><span class="line"><span class="string">        and they lived at bottom of a well. </span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.a.parent) <span class="comment">#返回父标签的整个内容</span></span><br><span class="line"></span><br><span class="line">print(list(enumerate(soup.a.parents))) <span class="comment">#所有祖先节点（包括父标签）</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#兄弟节点</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt; </span></span><br><span class="line"><span class="string">    &lt;head&gt; </span></span><br><span class="line"><span class="string">        &lt;title&gt;The Domouse's story&lt;/title&gt; </span></span><br><span class="line"><span class="string">    &lt;/head&gt; </span></span><br><span class="line"><span class="string">    &lt;body&gt; </span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt; </span></span><br><span class="line"><span class="string">        Once upon a time there were little sisters;and their names were </span></span><br><span class="line"><span class="string">        &lt;a href="http://example.com/elsie" class="sister"id="link1"&gt; </span></span><br><span class="line"><span class="string">        &lt;span&gt;Elsle&lt;/span&gt; </span></span><br><span class="line"><span class="string">        &lt;/a&gt; </span></span><br><span class="line"><span class="string">        &lt;a hred="http://example.com/lacle"class="sister" id="link2"&gt;Lacle&lt;/a&gt; </span></span><br><span class="line"><span class="string">        and </span></span><br><span class="line"><span class="string">        &lt;a hred="http://example.com/tilie"class="sister" id="link3"&gt;Tillie&lt;/a&gt; </span></span><br><span class="line"><span class="string">        and they lived at bottom of a well. </span></span><br><span class="line"><span class="string">        &lt;/p&gt; </span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line">print(list(enumerate(soup.a.next_siblings))) <span class="comment">#后面的兄弟节点 </span></span><br><span class="line">print(list(enumerate(soup.a.previous_siblings))) <span class="comment">#前面的兄弟节点</span></span><br></pre></td></tr></table></figure><h3 id="7、标准选择器"><a href="#7、标准选择器" class="headerlink" title="7、标准选择器"></a>7、标准选择器</h3><p><code>find_all(name,attrs,recursive,text,**kargs)</code> </p><p>可根据签名、属性、内容查找文档  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#name</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line">  </span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"name="elements"&gt; </span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"Id="list-1"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small"Id="list-2"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'ul'</span>)) <span class="comment">#返回列表类型</span></span><br><span class="line">print(soup.find_all(<span class="string">'ul'</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul.find_all(<span class="string">'li'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#attrs</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line">  </span><br><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1" name="elements"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">"id"</span>:<span class="string">"list-1"</span>&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">"name"</span>:<span class="string">"elements"</span>&#125;))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常用属性</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line">  </span><br><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1" name="elements"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(id=<span class="string">'list-1'</span>))</span><br><span class="line">print(soup.find_all(class_=<span class="string">'element'</span>)) <span class="comment">#注意：由于class在Python里是一个关键字，所以后面需要加一个下划线</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#text</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line">  </span><br><span class="line">html=<span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list" id="list-1" name="elements"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(text=<span class="string">'Foo'</span>))</span><br></pre></td></tr></table></figure><p><code>find(name，attrs，recursive，text，**kwargs)</code></p><p>find返回单个元素，find_all返回所有元素 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  </span><br><span class="line"></span><br><span class="line">html = <span class="string">''''' </span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt; </span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"name="elelments"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"Id="list-1"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small"Id="list-2"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find(<span class="string">'ul'</span>))</span><br><span class="line">print(type(soup.find(<span class="string">'ul'</span>)))</span><br><span class="line">print(soup.find(<span class="string">'page'</span>))</span><br></pre></td></tr></table></figure><p>其他常用方法：</p><ul><li><code>find_parents()</code>：返回所有祖先节点和find_parent()返回直接父节点</li><li><code>find_next_siblings()</code>：返回所有兄弟节点和find_next_sibling()返回后面第一个兄弟节点</li><li><code>find_previous_siblings()</code>：返回前面的所有兄弟节点和find_previous_sibling()：返回前面第一个兄弟节点</li><li><code>find_all_next()</code>：返回节点后所有符合条件的节点和find_next()：返回第一个符合条件的节点</li><li><code>find_all_previous()</code>：返回节点前所有符合条件的节点和find_previous()：返回节点前第一个符合条件的节点</li></ul><h3 id="8、CSS选择器"><a href="#8、CSS选择器" class="headerlink" title="8、CSS选择器"></a>8、CSS选择器</h3><p>通过select()直接传入CSS选择器即可完成选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt; </span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"name="elelments"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"Id="list-1"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small"Id="list-2"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>) </span><br><span class="line">print(soup.select(<span class="string">'.panel .panel-heading'</span>)) <span class="comment">#传入css选择器</span></span><br><span class="line">print(soup.select(<span class="string">'ul li'</span>)) <span class="comment"># 传入标签</span></span><br><span class="line">print(soup.select(<span class="string">'#list-2 .element'</span>)) <span class="comment">#传入id</span></span><br><span class="line">print(type(soup.select(<span class="string">'ul'</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#嵌套选择</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt; </span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"name="elelments"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"Id="list-1"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small"Id="list-2"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>) </span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul.select(<span class="string">'li'</span>))</span><br><span class="line"><span class="comment">#可以直接传入选择器实现嵌套比这种方式更方便</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取属性</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup </span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt; </span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"name="elelments"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"Id="list-1"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small"Id="list-2"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>) </span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.select(<span class="string">'ul'</span>):</span><br><span class="line">    print(ul[<span class="string">'id'</span>]) <span class="comment">#直接传入中括号和属性名</span></span><br><span class="line">    print(ul.attrs[<span class="string">'id'</span>]) <span class="comment">#通过attrs属性获取属性值,两种方式都可以</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取内容</span></span><br><span class="line">html = <span class="string">''''' </span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-heading"&gt; </span></span><br><span class="line"><span class="string">        &lt;h4&gt;Hello&lt;/h4&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">    &lt;div class="panel-body"name="elelments"&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list"Id="list-1"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Jay&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">        &lt;ul class="list list-small"Id="list-2"&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Foo&lt;/li&gt; </span></span><br><span class="line"><span class="string">            &lt;li class="element"&gt;Bar&lt;/li&gt; </span></span><br><span class="line"><span class="string">        &lt;/ul&gt; </span></span><br><span class="line"><span class="string">    &lt;/div&gt; </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">soup = BeautifulSoup(html,<span class="string">'lxml'</span>) </span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> soup.select(<span class="string">'li'</span>):</span><br><span class="line">    print(li.string) <span class="comment">#string属性获取文本</span></span><br><span class="line">    print(li.get_text()) <span class="comment">#get_text()方法获取文本，两种都行</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>(1)推荐使用’lxml’解析库，必要时使用html.parser</p><p>(2)标签选择器筛选功能但速度快</p><p>(3)建议使用find()，find_all()查询匹配单个结果或者多个结果</p><p>(4)如果对CSS选择器熟悉建议选用select()</p><p>(5)记住常用的获取属性和文本值得方法</p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-re库</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-re%E5%BA%93/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-re库/</id>
    <published>2018-07-02T04:00:00.000Z</published>
    <updated>2018-08-14T09:29:30.055Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、Re库详解"><a href="#一、Re库详解" class="headerlink" title="一、Re库详解"></a>一、Re库详解</h2><h3 id="1、什么是正则表达式"><a href="#1、什么是正则表达式" class="headerlink" title="1、什么是正则表达式"></a>1、什么是正则表达式</h3><p>正则表达式对子符串操作的一种逻辑公式，就是事先定义好的一些特定字符、及这些特定字符的组合，组成一个‘规则字符串’，这个‘规则字符串’用来表达对字符串的一种过滤逻辑。</p><h3 id="2、样例展示"><a href="#2、样例展示" class="headerlink" title="2、样例展示"></a>2、样例展示</h3><p>开源中国提供的正则表达式测试工具：<a href="http://tool.oschina.net/regex/" target="_blank" rel="noopener">http://tool.oschina.net/regex/</a> 。输入待匹配的文本，然后选择常用的正则表达式，就可以得出相应的匹配结果了。</p><h3 id="3、常用的匹配规则"><a href="#3、常用的匹配规则" class="headerlink" title="3、常用的匹配规则"></a>3、常用的匹配规则</h3><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配字母、数字及下划线</td></tr><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配不是字母、数字及下划线的字符</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任意空白字符，等价于[\t\n\r\f]</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任意非空字符</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配任意数字，等价于[0-9]</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配任意非数字的字符</td></tr><tr><td style="text-align:left">\A</td><td style="text-align:left">匹配字符串开头</td></tr><tr><td style="text-align:left">\Z</td><td style="text-align:left">匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td></tr><tr><td style="text-align:left">\z</td><td style="text-align:left">匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td style="text-align:left">\G</td><td style="text-align:left">匹配最后匹配完成的位置</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">匹配一个换行符</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">匹配一个制表符</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配一行字符串的开头</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配一行字符串的结尾</td></tr><tr><td style="text-align:left">.</td><td style="text-align:left">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td style="text-align:left">[…]</td><td style="text-align:left">用来表示一组字符，单独列出，比如[amk]匹配a、m或k</td></tr><tr><td style="text-align:left">[^…]</td><td style="text-align:left">不在[]中的字符，比如[^abc]匹配除了a、b、c之外的字符</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">匹配0个或多个表达式</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">匹配1个或多个表达式</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">匹配0个或1个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">精确匹配n个前面的表达式</td></tr><tr><td style="text-align:left">{n, m}</td><td style="text-align:left">匹配n到m次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td style="text-align:left">a&#124;b</td><td style="text-align:left">匹配a或b</td></tr><tr><td style="text-align:left">( )</td><td style="text-align:left">匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h3 id="4、常用的修饰符-匹配模式"><a href="#4、常用的修饰符-匹配模式" class="headerlink" title="4、常用的修饰符(匹配模式)"></a>4、常用的修饰符(匹配模式)</h3><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">re.I</td><td style="text-align:left">使匹配对大小写不敏感</td></tr><tr><td style="text-align:left">re.L</td><td style="text-align:left">做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:left">re.M</td><td style="text-align:left">多行匹配，影响^和$</td></tr><tr><td style="text-align:left">re.S</td><td style="text-align:left">使.匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:left">re.U</td><td style="text-align:left">根据Unicode字符集解析字符。这个标志影响\w、\W、 \b和\B</td></tr><tr><td style="text-align:left">re.X</td><td style="text-align:left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><h3 id="5、re-match"><a href="#5、re-match" class="headerlink" title="5、re.match"></a>5、re.match</h3><p>尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回None</p><p><code>re.match(pattern,string,flags=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#常规匹配</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span>  </span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^Hello\s\d\d\d\s\d&#123;4&#125;.*Demo$'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#泛匹配</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span>  </span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^Hello.*Demo$'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配目标</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">print(len(content))</span><br><span class="line"><span class="comment">#可以使用()括号将想提取的子字符串括起来。()实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用group()方法传入分组的索引即可获取提取的结果。</span></span><br><span class="line">result = re.match(<span class="string">'^Hello\s(\d+)\sWorld.*Demo$'</span>,content) </span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>)) <span class="comment"># 将第一括号括起来的内容打印出来，依次可推group(2)</span></span><br><span class="line">print(result.span())</span><br><span class="line">print(result.groups())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#贪婪匹配</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^Hel.*(\d+).*Demo$'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#在贪婪匹配下，.*会匹配尽可能多的字符。正则表达式中.*后面\d+至少一个数字，但并没有指定具体多少个数字，因此，.*就尽可能匹配多的字符，这里就把123456匹配了，给\d+留下一个可满足条件的数字7。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#非贪婪匹配</span></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'Hel.*?(\d+).*Demo$'</span>,content) <span class="comment">#非贪婪匹配的写法是.*?</span></span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"><span class="comment">#非贪婪匹配就是尽可能匹配少的字符。当.*?匹配到Hello后面的空白字符时，再往后的字符就是数字了，而\d+恰好可以匹配，那么这里.*?就不再进行匹配，交给\d+去匹配后面的数字。</span></span><br><span class="line"><span class="comment">#这里需要注意，如果匹配的结果在字符串结尾，.*?就有可能匹配不到任何内容了，因为它会匹配尽可能少的字符。需要用贪婪匹配.*</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配模式(修饰符)</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234567 World_This  </span></span><br><span class="line"><span class="string">is a Regex Demo'''</span>  </span><br><span class="line">result = re.match(<span class="string">'He.*?(\d+).*?Demo$'</span>,content) <span class="comment">#.匹配的是除换行符之外的任意字符，当遇到换行符时，.*?就不能匹配了</span></span><br><span class="line">print(result)</span><br><span class="line">result1 = re.match(<span class="string">'He.*?(\d+).*?Demo$'</span>,content,re.S) <span class="comment"># 只需加一个修饰符re.S,使.匹配包括换行在内的所有字符</span></span><br><span class="line">print(result1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#转义匹配</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'prince is $5.00'</span></span><br><span class="line">result = re.match(<span class="string">'prince is $5.00'</span>,content)</span><br><span class="line">print(result)</span><br><span class="line">result1 = re.match(<span class="string">'prince is \$5\.00'</span>,content) <span class="comment">#遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下</span></span><br><span class="line">print(result1)</span><br></pre></td></tr></table></figure><p>总结：尽量使用泛匹配，使用括号得到匹配目标，尽量使用非贪婪模式、有换行符就用re.S</p><h3 id="6、re-search"><a href="#6、re-search" class="headerlink" title="6、re.search"></a>6、re.search</h3><p>match()方法是从字符串的开头开始匹配的，一旦开头不匹配，那么整个匹配就失败了.</p><p>这里有另外一个方法search()会依次扫描字符串，直到找到第一个符合规则的字符串，然后返回匹配内容，如果搜索完了还没有找到，就返回None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.match(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">result1 = re.search(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result1)</span><br></pre></td></tr></table></figure><p>总结：为了匹配方便，能用search()就不用match()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配练习</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;&lt;i class="fa fa-user"&gt;&lt;/i&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line"></span><br><span class="line">result = re.search(<span class="string">'&lt;li.*?active.*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>,html,re.S)</span><br><span class="line">print(result.groups())</span><br><span class="line">print(result.group(<span class="number">1</span>),result.group(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="7、re-findall"><a href="#7、re-findall" class="headerlink" title="7、re.findall"></a>7、re.findall</h3><p>搜索字符，以列表的形式返回全部匹配的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">    &lt;h2 class="title"&gt;经典老歌&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        经典老歌列表</span></span><br><span class="line"><span class="string">    &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt;一路上有你&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/2.mp3" singer="任贤齐"&gt;沧海一声笑&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/3.mp3" singer="齐秦"&gt;往事随风&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="beyond"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="/6.mp3" singer="邓丽君"&gt;但愿人长久&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line"></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="/(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>,html,re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result[<span class="number">0</span>],result[<span class="number">1</span>],result[<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">results1 = re.findall(<span class="string">'&lt;li.*?&gt;\s*?(&lt;/a.*?&gt;)?(\w+)(&lt;/a&gt;)?\s*?&lt;/li&gt;'</span>,html,re.S)</span><br><span class="line">print(results1)</span><br><span class="line"><span class="keyword">for</span> result1 <span class="keyword">in</span> results1:</span><br><span class="line">    print(result1[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="8、re-sub"><a href="#8、re-sub" class="headerlink" title="8、re.sub"></a>8、re.sub</h3><p>替换字符串中每一个匹配的字符串后返回替换后的字符串。</p><p><code>re.sub(正则表达式，要替换成的字符串，原字符串)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line"></span><br><span class="line">result = re.sub(<span class="string">'\d+'</span>,<span class="string">''</span>,content) <span class="comment">#去掉数字</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result1 = re.sub(<span class="string">'\d+'</span>,<span class="string">'Replacement'</span>,content) <span class="comment">#数字替换为字符</span></span><br><span class="line">print(result1)</span><br><span class="line"></span><br><span class="line">result2 = re.sub(<span class="string">'(\d+)'</span>,<span class="string">r'\1 8910'</span>,content) <span class="comment">#如果要替换的字符串包含自己本身用\1表示，正则表达式需要用()</span></span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">html = <span class="string">'''''&lt;div id="songs-list"&gt; </span></span><br><span class="line"><span class="string">&lt;h2 class="title"&gt;经典老歌&lt;/h2&gt; </span></span><br><span class="line"><span class="string">&lt;p class="introduction"&gt; </span></span><br><span class="line"><span class="string">    经典老歌列表 </span></span><br><span class="line"><span class="string">&lt;/p&gt; </span></span><br><span class="line"><span class="string">&lt;ul id="list"class="list-group"&gt; </span></span><br><span class="line"><span class="string">    &lt;li data-view="2"&gt;一路上有你&lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;li data-view="7"&gt; </span></span><br><span class="line"><span class="string">        &lt;a href="/2.mp3"singer="任贤齐"&gt;沧海一声笑&lt;/a&gt; </span></span><br><span class="line"><span class="string">    &lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;li data-view="4"class="active"&gt; </span></span><br><span class="line"><span class="string">        &lt;a href="/3.mp3"singer="齐秦"&gt;往事随风&lt;/a&gt; </span></span><br><span class="line"><span class="string">    &lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;li data-view="6"&gt;&lt;a href="/4.mp3"singer="begoud"&gt;光辉岁月&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;li data-view="5"&gt;&lt;a href="/5.mp3"singer="陈慧琳"&gt;记事本&lt;/a&gt;&lt;/li&gt; </span></span><br><span class="line"><span class="string">    &lt;li data-view="5"&gt; </span></span><br><span class="line"><span class="string">        &lt;a href="/6.mp3"singer="邓丽君"&gt;但愿人长久&lt;/a&gt; </span></span><br><span class="line"><span class="string">    &lt;/li&gt; </span></span><br><span class="line"><span class="string">&lt;/ul&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span>  </span><br><span class="line"></span><br><span class="line">html = re.sub(<span class="string">'&lt;a.*?&gt;|&lt;/a&gt;'</span>,<span class="string">''</span>,html) <span class="comment">#首先去掉a标签</span></span><br><span class="line">print(html)</span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?&gt;(.*?)&lt;/li&gt;'</span>,html,re.S) <span class="comment">#然后再查找所有歌名</span></span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result.strip())</span><br></pre></td></tr></table></figure><h3 id="9、re-compile"><a href="#9、re-compile" class="headerlink" title="9、re.compile"></a>9、re.compile</h3><p>将正则字符串编译成正则表达式对象，以便在后面的匹配中复用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234545 World_This  </span></span><br><span class="line"><span class="string">is a Regex Demo'''</span>  </span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'Hello.*Demo'</span>,re.S) <span class="comment">#编译正则表达式对象</span></span><br><span class="line">result = re.match(pattern,content) <span class="comment">#正则对象复用</span></span><br><span class="line">print(result)</span><br><span class="line">result1 = re.match(<span class="string">'Hello.*Demo'</span>,content,re.S)</span><br><span class="line">print(result1)</span><br></pre></td></tr></table></figure><h3 id="10、实战练习"><a href="#10、实战练习" class="headerlink" title="10、实战练习"></a>10、实战练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">content = requests.get(<span class="string">'https://book.douban.com/'</span>).text <span class="comment">#获取网页源代码</span></span><br><span class="line"><span class="comment">#print(content)</span></span><br><span class="line">pattern = re.compile(<span class="string">'&lt;li.*?"cover"&gt;.*?href="(.*?)" title="(.*?)".*?"more-meta".*?"author"&gt;(.*?)&lt;/span&gt;.*?"year"&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;'</span>,re.S)</span><br><span class="line">results = re.findall(pattern,content)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    url,name,author,time = result</span><br><span class="line">    author = re.sub(<span class="string">'\s'</span>,<span class="string">''</span>,author)</span><br><span class="line">    time = re.sub(<span class="string">'\s'</span>,<span class="string">''</span>,time)</span><br><span class="line">    print(url,name,author,time)</span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-requests库</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-requests%E5%BA%93/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-requests库/</id>
    <published>2018-07-02T03:00:00.000Z</published>
    <updated>2018-08-14T09:14:32.334Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、Requests库详解"><a href="#一、Requests库详解" class="headerlink" title="一、Requests库详解"></a>一、Requests库详解</h2><h3 id="1、什么是Requests库"><a href="#1、什么是Requests库" class="headerlink" title="1、什么是Requests库"></a>1、什么是Requests库</h3><p>Requests库是用Python编写的，基于urllib，采用Apache2 Licensed开源协议的HTTP库。</p><p>相比urllib库，Requests库更加方便，可以节约我们大量的工作，完全满足HTTP测试需求。</p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p><code>pip install request</code></p><h3 id="3、Requests库用法详解"><a href="#3、Requests库用法详解" class="headerlink" title="3、Requests库用法详解"></a>3、Requests库用法详解</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(type(response))</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.text)</span><br><span class="line">print(response.cookies)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各种请求（HTTP测试网站：http://httpbin.org/）</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">requests.post(<span class="string">'http://httpbin.org/post'</span>)</span><br><span class="line">requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line">requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line">requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 带参数get请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'asr'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="string">'12'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>,params=data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解析json</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.text)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.json())</span><br><span class="line">print(type(response.json()))</span><br><span class="line">print(json.loads(response.text))</span><br><span class="line">print(type(json.loads(response.text)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取二进制数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://github.com/favicon.ico'</span>)</span><br><span class="line">print(response.text)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.content) <span class="comment"># 获取二进制数据用response.content</span></span><br><span class="line">print(type(response.content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加headers</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.zhihu.com/explore'</span>)  <span class="comment">#不加headers不能访问</span></span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; rv:60.0) Gecko/20100101 Firefox/60.0'</span>&#125;</span><br><span class="line">response1 = requests.get(<span class="string">'http://www.zhihu.com/explore'</span>,headers=headers)</span><br><span class="line">print(response1.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本post请求</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'jk'</span>,</span><br><span class="line">    <span class="string">'age'</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; rv:60.0) Gecko/20100101 Firefox/60.0'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">'http://httpbin.org/post'</span>,data=data,headers=headers)</span><br><span class="line">print(response.json())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># response属性</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.douban.com'</span>)</span><br><span class="line">print(type(response.status_code),response.status_code)</span><br><span class="line">print(type(response.headers),response.headers)</span><br><span class="line">print(type(response.cookies),response.cookies)</span><br><span class="line">print(type(response.url),response.url)</span><br><span class="line">print(type(response.history),response.history)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态码判断</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response =requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> response.status_code==requests.codes.forbidden <span class="keyword">else</span> print(<span class="string">'403 forbidden'</span>) <span class="comment">#状态码查询对象，可以从下表中查找</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 信息性状态码</span></span><br><span class="line"><span class="number">100</span>: (<span class="string">'continue'</span>,),</span><br><span class="line"><span class="number">101</span>: (<span class="string">'switching_protocols'</span>,),</span><br><span class="line"><span class="number">102</span>: (<span class="string">'processing'</span>,),</span><br><span class="line"><span class="number">103</span>: (<span class="string">'checkpoint'</span>,),</span><br><span class="line"><span class="number">122</span>: (<span class="string">'uri_too_long'</span>, <span class="string">'request_uri_too_long'</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功状态码</span></span><br><span class="line"><span class="number">200</span>: (<span class="string">'ok'</span>, <span class="string">'okay'</span>, <span class="string">'all_ok'</span>, <span class="string">'all_okay'</span>, <span class="string">'all_good'</span>, <span class="string">'\\o/'</span>, <span class="string">'✓'</span>),</span><br><span class="line"><span class="number">201</span>: (<span class="string">'created'</span>,),</span><br><span class="line"><span class="number">202</span>: (<span class="string">'accepted'</span>,),</span><br><span class="line"><span class="number">203</span>: (<span class="string">'non_authoritative_info'</span>, <span class="string">'non_authoritative_information'</span>),</span><br><span class="line"><span class="number">204</span>: (<span class="string">'no_content'</span>,),</span><br><span class="line"><span class="number">205</span>: (<span class="string">'reset_content'</span>, <span class="string">'reset'</span>),</span><br><span class="line"><span class="number">206</span>: (<span class="string">'partial_content'</span>, <span class="string">'partial'</span>),</span><br><span class="line"><span class="number">207</span>: (<span class="string">'multi_status'</span>, <span class="string">'multiple_status'</span>, <span class="string">'multi_stati'</span>, <span class="string">'multiple_stati'</span>),</span><br><span class="line"><span class="number">208</span>: (<span class="string">'already_reported'</span>,),</span><br><span class="line"><span class="number">226</span>: (<span class="string">'im_used'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向状态码</span></span><br><span class="line"><span class="number">300</span>: (<span class="string">'multiple_choices'</span>,),</span><br><span class="line"><span class="number">301</span>: (<span class="string">'moved_permanently'</span>, <span class="string">'moved'</span>, <span class="string">'\\o-'</span>),</span><br><span class="line"><span class="number">302</span>: (<span class="string">'found'</span>,),</span><br><span class="line"><span class="number">303</span>: (<span class="string">'see_other'</span>, <span class="string">'other'</span>),</span><br><span class="line"><span class="number">304</span>: (<span class="string">'not_modified'</span>,),</span><br><span class="line"><span class="number">305</span>: (<span class="string">'use_proxy'</span>,),</span><br><span class="line"><span class="number">306</span>: (<span class="string">'switch_proxy'</span>,),</span><br><span class="line"><span class="number">307</span>: (<span class="string">'temporary_redirect'</span>, <span class="string">'temporary_moved'</span>, <span class="string">'temporary'</span>),</span><br><span class="line"><span class="number">308</span>: (<span class="string">'permanent_redirect'</span>,</span><br><span class="line">      <span class="string">'resume_incomplete'</span>, <span class="string">'resume'</span>,), <span class="comment"># These 2 to be removed in 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端错误状态码</span></span><br><span class="line"><span class="number">400</span>: (<span class="string">'bad_request'</span>, <span class="string">'bad'</span>),</span><br><span class="line"><span class="number">401</span>: (<span class="string">'unauthorized'</span>,),</span><br><span class="line"><span class="number">402</span>: (<span class="string">'payment_required'</span>, <span class="string">'payment'</span>),</span><br><span class="line"><span class="number">403</span>: (<span class="string">'forbidden'</span>,),</span><br><span class="line"><span class="number">404</span>: (<span class="string">'not_found'</span>, <span class="string">'-o-'</span>),</span><br><span class="line"><span class="number">405</span>: (<span class="string">'method_not_allowed'</span>, <span class="string">'not_allowed'</span>),</span><br><span class="line"><span class="number">406</span>: (<span class="string">'not_acceptable'</span>,),</span><br><span class="line"><span class="number">407</span>: (<span class="string">'proxy_authentication_required'</span>, <span class="string">'proxy_auth'</span>, <span class="string">'proxy_authentication'</span>),</span><br><span class="line"><span class="number">408</span>: (<span class="string">'request_timeout'</span>, <span class="string">'timeout'</span>),</span><br><span class="line"><span class="number">409</span>: (<span class="string">'conflict'</span>,),</span><br><span class="line"><span class="number">410</span>: (<span class="string">'gone'</span>,),</span><br><span class="line"><span class="number">411</span>: (<span class="string">'length_required'</span>,),</span><br><span class="line"><span class="number">412</span>: (<span class="string">'precondition_failed'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">413</span>: (<span class="string">'request_entity_too_large'</span>,),</span><br><span class="line"><span class="number">414</span>: (<span class="string">'request_uri_too_large'</span>,),</span><br><span class="line"><span class="number">415</span>: (<span class="string">'unsupported_media_type'</span>, <span class="string">'unsupported_media'</span>, <span class="string">'media_type'</span>),</span><br><span class="line"><span class="number">416</span>: (<span class="string">'requested_range_not_satisfiable'</span>, <span class="string">'requested_range'</span>, <span class="string">'range_not_satisfiable'</span>),</span><br><span class="line"><span class="number">417</span>: (<span class="string">'expectation_failed'</span>,),</span><br><span class="line"><span class="number">418</span>: (<span class="string">'im_a_teapot'</span>, <span class="string">'teapot'</span>, <span class="string">'i_am_a_teapot'</span>),</span><br><span class="line"><span class="number">421</span>: (<span class="string">'misdirected_request'</span>,),</span><br><span class="line"><span class="number">422</span>: (<span class="string">'unprocessable_entity'</span>, <span class="string">'unprocessable'</span>),</span><br><span class="line"><span class="number">423</span>: (<span class="string">'locked'</span>,),</span><br><span class="line"><span class="number">424</span>: (<span class="string">'failed_dependency'</span>, <span class="string">'dependency'</span>),</span><br><span class="line"><span class="number">425</span>: (<span class="string">'unordered_collection'</span>, <span class="string">'unordered'</span>),</span><br><span class="line"><span class="number">426</span>: (<span class="string">'upgrade_required'</span>, <span class="string">'upgrade'</span>),</span><br><span class="line"><span class="number">428</span>: (<span class="string">'precondition_required'</span>, <span class="string">'precondition'</span>),</span><br><span class="line"><span class="number">429</span>: (<span class="string">'too_many_requests'</span>, <span class="string">'too_many'</span>),</span><br><span class="line"><span class="number">431</span>: (<span class="string">'header_fields_too_large'</span>, <span class="string">'fields_too_large'</span>),</span><br><span class="line"><span class="number">444</span>: (<span class="string">'no_response'</span>, <span class="string">'none'</span>),</span><br><span class="line"><span class="number">449</span>: (<span class="string">'retry_with'</span>, <span class="string">'retry'</span>),</span><br><span class="line"><span class="number">450</span>: (<span class="string">'blocked_by_windows_parental_controls'</span>, <span class="string">'parental_controls'</span>),</span><br><span class="line"><span class="number">451</span>: (<span class="string">'unavailable_for_legal_reasons'</span>, <span class="string">'legal_reasons'</span>),</span><br><span class="line"><span class="number">499</span>: (<span class="string">'client_closed_request'</span>,),</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端错误状态码</span></span><br><span class="line"><span class="number">500</span>: (<span class="string">'internal_server_error'</span>, <span class="string">'server_error'</span>, <span class="string">'/o\\'</span>, <span class="string">'✗'</span>),</span><br><span class="line"><span class="number">501</span>: (<span class="string">'not_implemented'</span>,),</span><br><span class="line"><span class="number">502</span>: (<span class="string">'bad_gateway'</span>,),</span><br><span class="line"><span class="number">503</span>: (<span class="string">'service_unavailable'</span>, <span class="string">'unavailable'</span>),</span><br><span class="line"><span class="number">504</span>: (<span class="string">'gateway_timeout'</span>,),</span><br><span class="line"><span class="number">505</span>: (<span class="string">'http_version_not_supported'</span>, <span class="string">'http_version'</span>),</span><br><span class="line"><span class="number">506</span>: (<span class="string">'variant_also_negotiates'</span>,),</span><br><span class="line"><span class="number">507</span>: (<span class="string">'insufficient_storage'</span>,),</span><br><span class="line"><span class="number">509</span>: (<span class="string">'bandwidth_limit_exceeded'</span>, <span class="string">'bandwidth'</span>),</span><br><span class="line"><span class="number">510</span>: (<span class="string">'not_extended'</span>,),</span><br><span class="line"><span class="number">511</span>: (<span class="string">'network_authentication_required'</span>, <span class="string">'network_auth'</span>, <span class="string">'network_authentication'</span>)</span><br></pre></td></tr></table></figure><h3 id="4、Requests高级操作"><a href="#4、Requests高级操作" class="headerlink" title="4、Requests高级操作"></a>4、Requests高级操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件上传</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">'files'</span>:open(<span class="string">'favicon.ico'</span>,<span class="string">'rb'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">'http://httpbin.org/post'</span>,files=files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取cookies</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.cookies)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    print(k +<span class="string">'='</span>+ v)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会话维持</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>) <span class="comment">#为网站的访问设置cookie </span></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/cookies'</span>)  <span class="comment">#与上面的行为时独立的，所以获取不到任何与cookie相关的信息</span></span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">s = requests.Session() <span class="comment">#声明Session对象，使用这个对象发起两次GET请求（相当于同一个浏览器发出来的请求）</span></span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 证书验证</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接请求https会报错SLLError</span></span><br><span class="line"><span class="comment">#response = requests.get('https://www.12306.cn')</span></span><br><span class="line"><span class="comment">#print(response.status_code)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加verify=False可以忽略证书验证，但是还是会报警告</span></span><br><span class="line"><span class="comment">#response = requests.get('https://www.12306.cn',verify=False)</span></span><br><span class="line"><span class="comment">#print(response.text)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.引入requests.packages.urllib3设置忽略警告</span></span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.通过捕获警告到日志的方式忽略警告</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.captureWarnings(<span class="keyword">True</span>)</span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.指定一个本地证书用作客户端证书，这可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组</span></span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>,cert=(<span class="string">'/path/server.crt'</span>, <span class="string">'/path/key'</span>))</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理设置</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"http://10.10.1.10:3128"</span>,</span><br><span class="line">  <span class="string">"https"</span>: <span class="string">"http://10.10.1.10:1080"</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若代理需要使用HTTP Basic Auth，可以使用类似http://user:password@host:port这样的语法来设置代理。</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">"http"</span>: <span class="string">"http://user:password@10.10.1.10:3128/"</span>,</span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了基本的HTTP代理外，requests还支持SOCKS协议的代理。pip3 install 'requests[socks]'</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://user:password@host:port'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://user:password@host:port'</span></span><br><span class="line">&#125;</span><br><span class="line">requests.get(<span class="string">"https://www.taobao.com"</span>, proxies=proxies)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超时设置 </span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.taobao.com'</span>,timeout=<span class="number">1</span>)</span><br><span class="line">print(r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别指定连接（connect）和读取（read）两个阶段超时，可以传入一个元组</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.taobao.com'</span>,timeout=(<span class="number">5.11</span>,<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想永久等待，可以直接将timeout设置为None,或直接不加参数</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.taobao.com'</span>,timeout=<span class="keyword">None</span>)</span><br><span class="line">r = requests.get(<span class="string">'https://www.taobao.com'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 身份认证</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://120.27.34.24.9001'</span>,auth=(<span class="string">'username'</span>, <span class="string">'password'</span>))</span><br><span class="line">print(r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上面代码是简写，实际调用的requests.auth.HTTPBasicAuth </span></span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line">r=requests.get(<span class="string">'http://120.27.34.24.9001'</span>,auth=HTTPBasicAuth(<span class="string">'username'</span>, <span class="string">'password'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异常处理</span></span><br><span class="line"><span class="comment"># http://docs.python-requests.org/en/master/api/#exceptions</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout,HTTPError,RequestException</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(<span class="string">'https://www.taobao.com'</span>,timeout=<span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">    print(<span class="string">'ReadTimeout'</span>)</span><br><span class="line"><span class="keyword">except</span> HTTPError:</span><br><span class="line">    print(<span class="string">'HTTPError'</span>)</span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line">    print(<span class="string">'RequestException'</span>)</span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-urllib库</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-urllib%E5%BA%93/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-urllib库/</id>
    <published>2018-07-02T02:00:00.000Z</published>
    <updated>2018-08-14T09:09:16.035Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、Urllib库详解"><a href="#一、Urllib库详解" class="headerlink" title="一、Urllib库详解"></a>一、Urllib库详解</h2><h3 id="1、Urllib库"><a href="#1、Urllib库" class="headerlink" title="1、Urllib库"></a>1、Urllib库</h3><ul><li>urllib.request：请求模块</li><li>urllib.error：异常处理模块</li><li>urllib.parse：url解析模块（拆分、合并等）</li><li>urllib.robotparser：robot.txt解析模块</li></ul><p><code>urllib.request.urlopen(url,data = None,[timeout]*,cafile = None,capath = None,cadefault = False,context = None)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>:<span class="string">'hello'</span>&#125;),encoding=<span class="string">'utf8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>,data=data)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time超时</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>,timeout=<span class="number">1</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># error错误</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>,timeout = <span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason,socket.timeout): </span><br><span class="line">        print(<span class="string">'TIME OUT'</span>)</span><br></pre></td></tr></table></figure><h3 id="2、响应"><a href="#2、响应" class="headerlink" title="2、响应"></a>2、响应</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 响应类型</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(type(response))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 状态码、响应头</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line"></span><br><span class="line">print(response.status)</span><br><span class="line">print(response.getheaders()) </span><br><span class="line"><span class="comment">#print(response.getheaders("Server"))</span></span><br></pre></td></tr></table></figure><h3 id="3、Request"><a href="#3、Request" class="headerlink" title="3、Request"></a>3、Request</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Request添加header、data</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64)'</span>,</span><br><span class="line">    <span class="string">'Host'</span>:<span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'Germey'</span> &#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(dict),encoding=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,headers=headers,data=data,method=<span class="string">'POST'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另外一种添加header方式</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://httpbin.org/post'</span></span><br><span class="line">dict = &#123;<span class="string">'name'</span>:<span class="string">'Germey'</span> &#125;</span><br><span class="line">data = bytes(urllib.parse.urlencode(dict),encoding=<span class="string">"utf8"</span>)</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(url=url,data=data,method=<span class="string">'POST'</span>)</span><br><span class="line">request.add_header( <span class="string">'User-Agent'</span>,<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64)'</span>) <span class="comment"># 注意key,value之间用逗号隔开</span></span><br><span class="line">request.add_header(<span class="string">'Host'</span>,<span class="string">'httpbin.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="4、Handler"><a href="#4、Handler" class="headerlink" title="4、Handler"></a>4、Handler</h3><p><a href="https://docs.python.org/3/library/urllib.request.html#module-urllib.request" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.request.html#module-urllib.request</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">proxy_handler = urllib.request.ProxyHandler(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'http'</span>:<span class="string">'http://127.0.0.1:9743'</span>,  </span><br><span class="line">        <span class="string">'https'</span>:<span class="string">'https://127.0.0.1:9743'</span> </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">opener = urllib.request.build_opener(proxy_handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="5、Cookie"><a href="#5、Cookie" class="headerlink" title="5、Cookie"></a>5、Cookie</h3><p>客户端保存，用来记录客户身份的文本文件、维持登录状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cookie获取</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"></span><br><span class="line">cookie = http.cookiejar.CookieJar() <span class="comment"># 设置一个cookie栈  </span></span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">    print(item.name+<span class="string">'='</span>+item.value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存cookie为文本文件</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'cookie.txt'</span></span><br><span class="line">cookie = http.cookiejar.MozillaCookieJar(filename)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">cookie.save(ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>) <span class="comment">#保存cookie</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 另外一种cookie保存格式</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'cookie_LWP.txt'</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar(filename)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">cookie.save(ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>) <span class="comment">#保存cookie</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用什么方式保存cookie，就用什么方式读取</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(<span class="string">'cookie_LWP.txt'</span>,ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="6、异常处理"><a href="#6、异常处理" class="headerlink" title="6、异常处理"></a>6、异常处理</h3><p><a href="https://docs.python.org/3/library/urllib.error.html#module-urllib.error" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.error.html#module-urllib.error</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://www.cuiqingcai.com/index.html'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以捕捉的异常</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://www.cuiqingcai.com/index.html'</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e: <span class="comment"># 先捕捉子类异常</span></span><br><span class="line">    print(e.reason,e.code,e.headers,sep=<span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e: <span class="comment"># 再捕捉父类异常</span></span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证异常是那种原因</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> error</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://www.baidu.com'</span>,timeout=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(type(e.reason))</span><br><span class="line">    <span class="keyword">if</span> isinstance(e.reason,socket.timeout):</span><br><span class="line">          print(<span class="string">'Time Out'</span>)</span><br></pre></td></tr></table></figure><h3 id="7、URL解析"><a href="#7、URL解析" class="headerlink" title="7、URL解析"></a>7、URL解析</h3><p><a href="https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse</a></p><p>(1)urlparse</p><p>将url进行分割，分割成几个部分，再依次将其复制</p><p><code>parse.urlparse(urlstring,scheme=&#39;&#39;,allow_fragments = True)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'https://www.baidu.com/s?wd=urllib&amp;ie=UTF-8'</span>)  <span class="comment"># 解析url为6个部分</span></span><br><span class="line">print(type(result))</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result1 = urlparse(<span class="string">'www.baidu.com/s?wd=urllib&amp;ie=UTF-8'</span>,scheme=<span class="string">'https'</span>)  <span class="comment"># 无协议类型，自行添加协议类型</span></span><br><span class="line">print(result1)</span><br><span class="line"></span><br><span class="line">result2 = urlparse(<span class="string">'http://www.baidu.com/s?wd=urllib&amp;ie=UTF-8'</span>,scheme=<span class="string">'https'</span>)  <span class="comment"># 有协议类型，添加协议类型还是会显示默认协议</span></span><br><span class="line">print(result2)</span><br><span class="line"></span><br><span class="line">result3 = urlparse(<span class="string">'http://www.baidu.com/s?wd=urllib&amp;ie=UTF-8#comment'</span>,allow_fragments=<span class="keyword">True</span>) <span class="comment"># allow_fragments为True</span></span><br><span class="line">print(result3)</span><br><span class="line"></span><br><span class="line">result4 = urlparse(<span class="string">'http://www.baidu.com/s?wd=urllib&amp;ie=UTF-8#comment'</span>,allow_fragments=<span class="keyword">False</span>) <span class="comment"># allow_fragments为False，会自行向前拼接</span></span><br><span class="line">print(result4)</span><br></pre></td></tr></table></figure><p>(2)urlunparse</p><p>urlparse的反函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line"></span><br><span class="line"><span class="comment">#data可以通过urlparse得出的参数往里面带，注意：即使是空符号也要写进去，不然会出错</span></span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>] </span><br><span class="line">result = urlunparse(data)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>(3)urljoin</p><p>拼接url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">result = urljoin(<span class="string">'http://www.baidu.com'</span>,<span class="string">'FQA.html'</span>) <span class="comment"># 正常拼接</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result1 = urljoin(<span class="string">'http://www.baidu.com'</span>,<span class="string">'http://www.taobao.com/FQA.html'</span>) <span class="comment"># 后面url会覆盖前面url共有的部分，多余部分自行拼接</span></span><br><span class="line">print(result1)</span><br><span class="line"></span><br><span class="line">result2 = urljoin(<span class="string">'http://www.baidu.com/about'</span>,<span class="string">'https://www.taobao.com/FQA.html'</span>) <span class="comment"># 后面url会覆盖前面url共有的部分，总之以后面为准</span></span><br><span class="line">print(result2)</span><br></pre></td></tr></table></figure><p>(4)urlencode</p><p>字典对象转化为get请求参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">'name'</span>:<span class="string">'Arise'</span>,  </span><br><span class="line">    <span class="string">'age'</span>:<span class="string">'21'</span> </span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line"></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure><h3 id="8、robotparser"><a href="#8、robotparser" class="headerlink" title="8、robotparser"></a>8、robotparser</h3><p>用来解析robot.txt（只做了解）</p><p><a href="https://docs.python.org/3/library/urllib.robotparser.html#module-urllib.robotparser" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.robotparser.html#module-urllib.robotparser</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.robotparser  </span><br><span class="line"></span><br><span class="line">rp = urllib.robotparser.RobotFileParser()  </span><br><span class="line">rp.set_url(<span class="string">"http://www.musi-cal.com/robots.txt"</span>)  </span><br><span class="line">rp.read()  </span><br><span class="line">rrate = rp.request_rate(<span class="string">"*"</span>)  </span><br><span class="line">print(rrate.requests)</span><br><span class="line"><span class="comment">#3  </span></span><br><span class="line">rrate.seconds  </span><br><span class="line"><span class="comment">#20  </span></span><br><span class="line">rp.crawl_delay(<span class="string">"*"</span>)  </span><br><span class="line"><span class="comment">#6  </span></span><br><span class="line">rp.can_fetch(<span class="string">"*"</span>, <span class="string">"http://www.musi-cal.com/cgi-bin/search?city=San+Francisco"</span>)  </span><br><span class="line"><span class="comment">#False  </span></span><br><span class="line">rp.can_fetch(<span class="string">"*"</span>, <span class="string">"http://www.musi-cal.com/"</span>)  </span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-基本原理</title>
    <link href="http://pythonfood.github.io/2018/07/02/%E7%88%AC%E8%99%AB-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://pythonfood.github.io/2018/07/02/爬虫-基本原理/</id>
    <published>2018-07-02T01:00:00.000Z</published>
    <updated>2018-08-14T07:42:06.707Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、爬虫基本原理"><a href="#一、爬虫基本原理" class="headerlink" title="一、爬虫基本原理"></a>一、爬虫基本原理</h2><p><strong>1、什么是爬虫</strong></p><p>请求网站并提取数据的自动化程序。</p><p><strong>2、爬虫基本流程</strong></p><blockquote><p>(1)发起请求：<br>通过HTTP库向目标站点发起请求，即发送一个Request，请求可以包含额外的headers等信息，等待服务器响应。<br>(2)获取响应内容：<br>如果服务器能正常响应，会得到一个Response，Response的内容是所获取的页面内容，类型可能有HTML、Json字符串、二进制数据（如图片视频）等类型。<br>(3)解析内容：<br>得到的内容可能是HTML，可以用正则表达式、网页解析库进行解析。可能是Json,可以直接转换为Json对象解析。可能是二进制数据，可以做保存或者进一步的处理。<br>(4)保存数据：<br>保存形式多样，可以保存为文本，可以保存至数据库，或者保存特定格式的文件。</p></blockquote><p><strong>3、Request与Response</strong></p><blockquote><p>(1)浏览器就发送消息给该网址所在的服务器，这个过程叫做HTTP Request。<br>(2)服务器收到浏览器发送的消息后，能够根据浏览器发送消息的内容，做响应处理，然后把消息回传给浏览器。这个过程叫做HTTP Response。<br>(3)浏览器收到服务器的Response信息后，会对信息进行相应处理，然后展示。</p></blockquote><p><strong>4、Request</strong></p><blockquote><p>(1)请求方式：<br>主要有GET、POST两种类型，另外还有HEAD、PUT、DELETE、OPTIONS等。<br>(2)请求URL：<br>URL全称统一资源定位符，如一个网页文档、一张图片、一个视频都可以用URL唯一来确定。<br>(3)请求头：<br>包含请求时的头部信息，如User-Agent、Host、Cookies等信息。<br>(4)请求体：<br>请求时额外携带的数据，如表单提交时的表单数据（eg：fromdata）。</p></blockquote><p><strong>5、Response</strong></p><blockquote><p>(1)响应状态：<br>有多重响应状态，如200代表成功、301是跳转、404为找不到网页、502服务器错误<br>(2)响应头：<br>如内容类型、内容长度、服务器信息、设置Cookie等等；<br>(3)响应体：<br>最主要的部分，包含了请求资源的内容，如网页HTML、图片二进制数据等；</p></blockquote><p><strong>6、能抓怎样的数据</strong></p><blockquote><p>(1)网页文本：<br>如HTML文档，JSON格式文本等。<br>(2)图片：<br>获取二进制文本文件，保存为图片格式。<br>(3)视频：<br>同样为二进制文件，保存为音频格式即可，抓取方法如图片抓取方法。<br>(4)其他：<br>只要是能请求到的，都能获取。</p></blockquote><p><strong>7、解析方式</strong></p><blockquote><p>(1)直接处理<br>(2)Json解析<br>(3)正则表达式<br>(4)BeautifulSoup<br>(5)PyQuery<br>(6)XPath</p></blockquote><p><strong>8、为啥抓到的和浏览器看到的不一样</strong></p><p>由于JavaScript渲染的问题，在network看到的代码（我们通过Python）与element中看到（JavaScript渲染的）不一样。</p><p><strong>9、怎么解决JavaScript渲染的问题</strong></p><blockquote><p>(1)分析Ajax请求：<br>返回Json格式数据。<br>(2)Selenium/WebDriver：<br>来模拟一个浏览器。<br>(3)Splash：<br><a href="https://github.com/scrapinghub/splash" target="_blank" rel="noopener">https://github.com/scrapinghub/splash</a><br>(4)PyV8、Ghost.py：</p></blockquote><p><strong>10、怎样保存数据</strong></p><blockquote><p>(1)文本：<br>纯文本、Json、Xml等。<br>(2)关系型数据库：<br>如MySQL、Oracle、SQL Server等具有结构化表结构形式存储。<br>(3)非关系型数据库：<br>MongoDB、Redis等Key-Value形式存储。<br>(4)二进制文件：<br>如图片、视频、音频等等直接保存成特定格式即可。</p></blockquote><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-phantomjs配置</title>
    <link href="http://pythonfood.github.io/2018/07/01/%E7%88%AC%E8%99%AB-phantomjs%E9%85%8D%E7%BD%AE/"/>
    <id>http://pythonfood.github.io/2018/07/01/爬虫-phantomjs配置/</id>
    <published>2018-07-01T04:00:00.000Z</published>
    <updated>2018-08-14T07:49:50.220Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、PhantomJS下载"><a href="#一、PhantomJS下载" class="headerlink" title="一、PhantomJS下载"></a>一、PhantomJS下载</h2><p>国内镜像：<a href="http://npm.taobao.org/dist/phantomjs/" target="_blank" rel="noopener">http://npm.taobao.org/dist/phantomjs/</a></p><h2 id="二、PhantomJS安装"><a href="#二、PhantomJS安装" class="headerlink" title="二、PhantomJS安装"></a>二、PhantomJS安装</h2><p>(1)将zip包解压到自定义路径即可D:\Program Files\PhantomJS\phantomjs-2.1.1-windows<br>(2)配置环境变量D:\Program Files\PhantomJS\phantomjs-2.1.1-windows\bin</p><h2 id="三、验证环境"><a href="#三、验证环境" class="headerlink" title="三、验证环境"></a>三、验证环境</h2><p>cmd输入命令<code>python</code>进入交互环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">driver = webdriver.PhantomJS()  # PhantomJS对应chromedriver必须是2.0以上</span><br><span class="line">driver.get(&apos;http://www.baidu.com&apos;)</span><br><span class="line">driver.page_source  # 由于PhantomJS没有界面，通过page_source打印网页信息</span><br></pre></td></tr></table></figure></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-redis配置</title>
    <link href="http://pythonfood.github.io/2018/07/01/%E7%88%AC%E8%99%AB-redis%E9%85%8D%E7%BD%AE/"/>
    <id>http://pythonfood.github.io/2018/07/01/爬虫-redis配置/</id>
    <published>2018-07-01T03:00:00.000Z</published>
    <updated>2018-08-14T07:49:22.672Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、Redis下载"><a href="#一、Redis下载" class="headerlink" title="一、Redis下载"></a>一、Redis下载</h2><p>64位可以从github下载:<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a><br>32位下载:<a href="https://pan.baidu.com/s/1mig98a0" target="_blank" rel="noopener">https://pan.baidu.com/s/1mig98a0</a> （只找到一个百度网盘的）</p><h2 id="二、Redis安装"><a href="#二、Redis安装" class="headerlink" title="二、Redis安装"></a>二、Redis安装</h2><p><strong>1、64位安装</strong></p><p>(1)运行msi安装软件，根据提示安装即可。<br>(2)服务运行端口是6379</p><p><strong>2、32位安装</strong></p><p>(1)将zip包解压到自定义安装路径即可 D:\Program Files\Redis<br>(2)双击redis-server.exe或cmd进入redis路径输入命令<code>D:\Program Files\Redis&gt;redis-server.exe Redis.conf</code>就可以启动服务。</p><h2 id="三、Redis-Desktop-Manager"><a href="#三、Redis-Desktop-Manager" class="headerlink" title="三、Redis Desktop Manager"></a>三、Redis Desktop Manager</h2><p>官网地址：<a href="https://redisdesktop.com/download" target="_blank" rel="noopener">https://redisdesktop.com/download</a><br>64位可以从github下载：<a href="https://github.com/uglide/RedisDesktopManager/releases" target="_blank" rel="noopener">https://github.com/uglide/RedisDesktopManager/releases</a><br>32位下载：<a href="https://pan.baidu.com/s/1kU8sY3P" target="_blank" rel="noopener">https://pan.baidu.com/s/1kU8sY3P</a> （只找到一个百度网盘的）</p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-mongodb配置</title>
    <link href="http://pythonfood.github.io/2018/07/01/%E7%88%AC%E8%99%AB-mongodb%E9%85%8D%E7%BD%AE/"/>
    <id>http://pythonfood.github.io/2018/07/01/爬虫-mongodb配置/</id>
    <published>2018-07-01T02:00:00.000Z</published>
    <updated>2018-08-14T07:39:29.918Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、mongodb下载："><a href="#一、mongodb下载：" class="headerlink" title="一、mongodb下载："></a>一、mongodb下载：</h2><p>官网地址：<a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a><br>64位下载地址：<a href="http://dl.mongodb.org/dl/win32/x86_64" target="_blank" rel="noopener">http://dl.mongodb.org/dl/win32/x86_64</a><br>32位下载地址：<a href="https://www.mongodb.org/dl/win32" target="_blank" rel="noopener">https://www.mongodb.org/dl/win32</a></p><h2 id="二、windows64位安装"><a href="#二、windows64位安装" class="headerlink" title="二、windows64位安装"></a>二、windows64位安装</h2><blockquote><p>(1)下载的将zip包解压到自定义路径 </p><ul><li>D:\Program Files\MongoDB\Server\3.2</li><li>或将msi安装软件安装到自定义路径 D:\Program Files\MongoDB\Server\3.2</li></ul><p>(2)在monggodb安装路径下新建data文件夹 </p><ul><li>D:\Program Files\MongoDB\Server\3.2\data</li></ul><p>(3)在data文件夹下新建db和log两个文件夹</p><ul><li>D:\Program Files\MongoDB\Server\3.2\data\db`</li><li>D:\Program Files\MongoDB\Server\3.2\data\log`</li></ul><p>(4)在log文件夹下新建日志文件MongoDB.log</p><ul><li>D:\Program Files\MongoDB\Server\3.2\data\log\MongoDB.log</li></ul><p>(5)管理员方式打开cmd，进入到mongodb安装路径的\bin目录下，输入命令安装<br><code>D:\Program Files\MongoDB\Server\3.2\bin&gt;mongod --dbpath &quot;D:\Program Files\MongoDB\Server\3.2\data\db&quot; --logpath &quot;D:\Program Files\MongoDB\Server\3.2\data\log\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;</code></p><p>(6)安装完成后，手动启动MongoDB服务，浏览器打开<a href="http://localhost:27017/" target="_blank" rel="noopener">http://localhost:27017/</a></p><p>(7)cmd使用monggodb数据库，输入命令<code>mongo</code></p></blockquote><h2 id="三、windows32位安装"><a href="#三、windows32位安装" class="headerlink" title="三、windows32位安装"></a>三、windows32位安装</h2><blockquote><p>(1)32位安装过程和64位大致相同，但是安装后一般会碰到几个异常：</p><ul><li>安装服务报这个错误：32-bit servers don’t have journaling enabled by default. Please use –journal if you want durability.</li><li>32位的mongodb数据库存储引擎只能是：mmapv1</li></ul><p>(2)综上，32位的安装命令需要添加–journal选项和指定存储引擎mmapv1<br><code>D:\Program Files\MongoDB\Server\3.2\bin&gt;mongod --dbpath &quot;D:\Program Files\MongoDB\Server\3.2\data\db&quot; --logpath &quot;D:\Program Files\MongoDB\Server\3.2\data\log\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot; --journal --storageEngine=mmapv1</code></p><p>(3)cmd输入命令<code>net start MongoDB</code>启动服务。然后连接到mongodb数据库，输入命令<code>mongo</code></p><p>(4)如果启动mongodb服务时提示“发生服务特定错误100”：<br>在mongodb安装路径的data目录下两个文件mongod.lock和storage.bson，一般删除mongod.lock重启服务就好了。如果还提示“发生服务特定错误100”，就把storage.bson一起删掉再重启服务。</p></blockquote><h2 id="四、Robomongo可视化客户端"><a href="#四、Robomongo可视化客户端" class="headerlink" title="四、Robomongo可视化客户端"></a>四、Robomongo可视化客户端</h2><p>64位下载地址：<a href="https://robomongo.org/download" target="_blank" rel="noopener">https://robomongo.org/download</a><br>32位下载地址：<a href="http://pan.baidu.com/s/1c02GmHE" target="_blank" rel="noopener">http://pan.baidu.com/s/1c02GmHE</a> （只找到一个百度网盘的）</p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>爬虫-anaconda配置</title>
    <link href="http://pythonfood.github.io/2018/07/01/%E7%88%AC%E8%99%AB-anaconda%E9%85%8D%E7%BD%AE/"/>
    <id>http://pythonfood.github.io/2018/07/01/爬虫-anaconda配置/</id>
    <published>2018-07-01T01:00:00.000Z</published>
    <updated>2018-08-14T07:39:15.229Z</updated>
    
    <content type="html"><![CDATA[<p>崔庆才老师爬虫的学习笔记。<br><a id="more"></a></p><h2 id="一、anaconda安装"><a href="#一、anaconda安装" class="headerlink" title="一、anaconda安装"></a>一、anaconda安装</h2><p><strong>1、国内镜像站</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p><strong>2、配置环境变量</strong></p><p>D:\Program Files\Anaconda3<br>D:\Program Files\Anaconda3\Scripts<br>D:\Program Files\Anaconda3\Library\bin<br>D:\Program Files\Anaconda3\Library\usr\bin<br>D:\Program Files\Anaconda3\Library\mingw-w64\bin</p><h2 id="二、解决python多版本"><a href="#二、解决python多版本" class="headerlink" title="二、解决python多版本"></a>二、解决python多版本</h2><p><strong>1、修改python3</strong></p><p>python3安装路径下，复制python.exe为python3.exe。<br>python3安装路径的\Scripts目录下，复制pip.exe为pip3.exe。</p><p><strong>2、修改anaconda</strong></p><p>ananconda安装路径下，复制python.exe为python-conda.exe。<br>ananconda安装路径的\Scripts目录下，复制pip.exe为pip-conda.exe。<br>ananconda安装路径的\Scripts目录下，复制pip-script.py为pip-conda-script.py。</p><p><strong>3、验证多版本设置</strong><br>cmd输入命令<code>python3</code>，进入python3的交互界面。<br>cmd输入命令<code>pip3 list</code>，显示python3下安装的库。<br>cmd输入命令<code>python-conda</code>，进入anaconda下python的交互界面。<br>cmd输入命令<code>pip-conda list</code>，显示anaconda下安装的库。</p><p><strong>4、默认python设置</strong></p><p>python3和anaconda的环境变量，谁在前谁就是默认的python。<br>例如python3的环境变量在anaconda之前，则cmd输入<code>python</code>，进入python3的交互界面。</p><h2 id="三、jupyter编辑器"><a href="#三、jupyter编辑器" class="headerlink" title="三、jupyter编辑器"></a>三、jupyter编辑器</h2><p><strong>1、运行jupyter</strong></p><p>cmd输入命令<code>jupyter notebook</code>,会自动打开浏览器<a href="http://localhost:8888/tree" target="_blank" rel="noopener">http://localhost:8888/tree</a></p><p><strong>2、修改保存路径</strong></p><p>(1)cmd输入命令<code>jupyter notebook --generate-config</code>生成配置文件。<br>(2)根据提示找到文件路径C:\Users\tester.jupyter\jupyter_notebook_config.py<br>(3)打开配置文件，找到jupyter默认路径这行#c.NotebookApp.notebook_dir = ‘’<br>(4)去掉#号，修改默认路径为c.NotebookApp.notebook_dir = ‘D:\JupyterProjects’</p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;崔庆才老师爬虫的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://pythonfood.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://pythonfood.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>django-签到系统</title>
    <link href="http://pythonfood.github.io/2018/06/01/django-%E7%AD%BE%E5%88%B0%E7%B3%BB%E7%BB%9F/"/>
    <id>http://pythonfood.github.io/2018/06/01/django-签到系统/</id>
    <published>2018-06-01T01:00:00.000Z</published>
    <updated>2018-08-14T07:38:53.499Z</updated>
    
    <content type="html"><![CDATA[<p>虫师所写django签到系统的学习笔记。<br><a id="more"></a></p><h2 id="一、Hello-Django"><a href="#一、Hello-Django" class="headerlink" title="一、Hello Django"></a>一、Hello Django</h2><p><strong>1、查看django命令</strong></p><p>D:> <code>django-admin</code></p><p><strong>2、创建项目</strong></p><p>D:> <code>django-admin startproject guest</code></p><blockquote><ul><li>guest/<ul><li>guest/<ul><li>__init__.py：一个空的文件，用它标识一个目录为 Python 的标准包。</li><li>settings.py：Django 项目的配置文件，包括 Django 模块应用配置，数据库配置，模板配置等。</li><li>urls.py：Django 项目的 URL 声明。</li><li>wsgi.py：为 WSGI 兼容的 Web 服务器服务项目的切入点。</li></ul></li><li>manage.py：一个命令行工具，可以让你在使用 Django 项目时以不同的方式进行交互。</li></ul></li></ul></blockquote><p><strong>3、查看 manage 所提供的命令</strong></p><p>D:\guest&gt; <code>python manage.py</code></p><p><strong>4、创建应用</strong></p><p>D:\guest&gt; <code>python manage.py startapp sign</code></p><blockquote><ul><li>guest/<ul><li>sign/<ul><li>migrations/：用于记录 models 中数据的变更。</li><li>admin.py：映射 models 中的数据到 Django 自带的 admin 后台。</li><li>apps.py：在新的 Django 版本中新增，用于应用程序的配置。</li><li>models.py：创建应用程序数据表模型（对应数据库的相关操作）。</li><li>tests.py：创建 Django 测试。</li><li>views.py：控制向前端显示哪些数据。</li></ul></li></ul></li></ul></blockquote><p><strong>5、运行项目</strong></p><blockquote><p>D:\guest&gt; <code>python manage.py runserver</code></p><p>默认8000端口启动项目，也可以指定IP和端口：D:\guest&gt; <code>python manage.py runserver 127.0.0.1:8001</code></p></blockquote><p><strong>6、使用视图显示 Hello Django</strong></p><blockquote><p>(1)首先配置 guest/guest/settings.py ，将 sign 应用添加到项目中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">...</span><br><span class="line"><span class="string">'sign'</span>,  <span class="comment"># 添加sign应用</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>(2)再配置 guest/guest/urls.py ，添加 index/ 目录。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include  <span class="comment"># url控制需要导入</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">url(<span class="string">r'^index/$'</span>, views.index),   <span class="comment"># 添加 index/ 路径配置</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>(3)接着编辑 guest/sign/views.py ，创建 index() 视图函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'Hello Django'</span>)</span><br></pre></td></tr></table></figure></p><p>(4)运行项目，访问127.0.0.1:8000，即可显示’Hello Django’。</p></blockquote><p><strong>7、使用模板显示 Hello Django</strong></p><blockquote><p>(1)在应用 guest/sign/ 目录下，创建 templates/index.html 。（注意需要创建templates目录）<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Django Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Django<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2)编辑 guest/sign/views.py，用 index() 视图函数返回 index.html。（注意html文件路径不需要写templates）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)  <span class="comment"># 这里抛弃 HttpResponse 类，转而使用 Django 的 render 函数</span></span><br></pre></td></tr></table></figure></p><p>(3)运行项目，访问127.0.0.1:8000，即可显示’Hello Django’。</p></blockquote><p><strong>8、MTV模式</strong></p><blockquote><p>(1)首先理解 Model-View-Controller（MVC）模式：数据存取逻辑、表现逻辑、业务逻辑。</p><p>(2)由于 Controller 由框架自行处理，而 Django 里更关注的是模型（Model）、模板(Template)和视图（Views）， Django 也被称为 MTV 框架 ：</p><ul><li>M（Model），即数据存取层。该层处理与数据相关的所有事务： 如何存取、如何验证有效。</li><li>T（Template），即表现层。该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</li><li>V（View），即业务逻辑层。该层包含存取模型及调取恰当模板的相关逻辑。 你可以把它看作模型与模板之间的桥梁。</li></ul></blockquote><h2 id="二、Views-视图"><a href="#二、Views-视图" class="headerlink" title="二、Views 视图"></a>二、Views 视图</h2><p><strong>1、写个简单的登录</strong></p><blockquote><p>(1)…/templates/index.html编写登录表单代码代码。表单方法使用 method=”post”，提交路径为  action=”/login_action/“。<br>(2)注意页面需要添加跨站请求伪造（ CSRF）令牌，在Html表单中使用Django模板标签：<code>{</code>% csrf_token %<code>}</code><br>(3)打开 …/guest/urls.py 文件添加 login_action/的路由。<br>(4)打开 …/sign/views.py 文件，创建 login_action 视图函数。<br>(5)在 …/templates/index.html 页面中添加 Django 模板：。<br>(6)刷新网页，填入账号密码，验证效果。</p></blockquote><p><strong>2、添加登录成功页</strong></p><blockquote><p>(1)首先创建 …/templates/event_manage.html 页面，编写html代码。<br>(2)修改 …/sign/views.py 中的 login_action 函数，登录成功后重定向到 /event_manage/ 路径。<br>(3)在 …/guest/urls.py 文件中添加路径 event_manage/的路由：views.event_manage。<br>(4)在 …/sign/views.py 中添加event_manage视图函数，返回event_manage.html。</p></blockquote><p><strong>3、Cookie 的使用</strong></p><blockquote><p>(1)修改…/sign/views.py 文件login_action函数设置cookie：<code>response.set_cookie(&#39;user&#39;, username)</code><br>(2)修改…/sign/views.py 文件 event_manage函数获取cookie： <code>request.COOKIES.get(&#39;user&#39;, &#39;&#39;, 3600)</code><br>(3)修改…/templates/event_manage.html 页面，添加<div>标签来显示用户登录的用户名。</div></p></blockquote><p><strong>4、Session 的使用</strong></p><blockquote><p>(1)修改…/sign/views.py文件，在 login_action 函数中将 session 信息记录到浏览器：<code>request.session[&#39;user&#39;]=username</code> 。<br>(2)修改…/sign/views.py文件，在 event_manage 函数中读取浏览器 session：<code>username=request.session.get(&#39;user&#39;,&#39;&#39;)</code> 。<br>(3)既然要服务器端记录用户的数据，需要创建 django_session 表，不过Django已经准备好了，我们需要生成他们，进行数据迁移：D:\guest&gt; <code>python3 manage.py migrate</code> </p></blockquote><p><strong>5、登录 Admin 后台</strong></p><blockquote><p>执行 manage.py 的“migrate”命令时，Django 同时也帮我们生成了 auth_user 表。同时，我们可以通过 URL 地址：<a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 来访问 Django 自带的 Admin 管理后台。在此之前,先来创建登录 Admin 后台的管理员账号：</p><ul><li>D:\guest&gt; <code>python3 manage.py createsuperuser</code></li><li>Username (leave blank to use ‘fnngj’): <code>admin</code> #输入用户名 </li><li>Email address: <code>admin@mail.com</code> #输入邮箱 </li><li>Password: <code>admin123456</code> #输入密码 </li><li>Password (again): <code>admin123456</code> #重复输入密码 </li></ul></blockquote><p><strong>6、引用 Django 认证登录</strong></p><blockquote><p>(1)打开…/sign/views.py 文件修改 login_action 函数，认证给出的用户名和密码：<code>user = auth.authenticate(username=username, password=password)</code><br>(2)通过 if 语句判断 authenticate()返回（即user）如果不为 None，说明用户认证通过。<br>(3)来调用 login()函数进行 登录：<code>auth.login(request, user)</code> </p></blockquote><p><strong>7、关上窗户</strong></p><blockquote><p>(1)直接访问：<a href="http://127.0.0.1:8000/event_manage/，" target="_blank" rel="noopener">http://127.0.0.1:8000/event_manage/，</a> 我们不需要通过登录也可以直接访问到登录成功的页面。我们要把这些“窗户”都关上，使用户只能通过登录来访问系统：</p><ul><li>如果想限制某个视图函数必须登录才能访问，只需要在这个函数的前面加上： <code>@login_required</code> 。</li></ul><p>(2)仔细看，会发布在访问被@login_required 装饰的视图时，默认会跳转的 URL 中会包含 “/accounts/login/”，为什么不让它直接跳转到登录页面呢？不但要告诉你窗户是关着的，还要帮你指引到门的位置：</p><ul><li>修改…/urls.py 文件，添加以下路径：url(r’^accounts/login/$’, views.index)。</li><li>当用户访问：<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 、 <a href="http://127.0.0.1:8000/index/" target="_blank" rel="noopener">http://127.0.0.1:8000/index/</a> 、 <a href="http://127.0.0.1:8000/event_manage/" target="_blank" rel="noopener">http://127.0.0.1:8000/event_manage/</a> ，都会跳转到登录页面。</li></ul></blockquote><h2 id="三、Model-模型"><a href="#三、Model-模型" class="headerlink" title="三、Model 模型"></a>三、Model 模型</h2><p><strong>1、设计系统表</strong></p><blockquote><p>Django 提供完善的模型（model）层主要用来创建和存取数据，不需要我们直接对数据库操作。每个模型是一个 Python 类，继承 django.db.models.model 类。该模型的每个属性表示一个数据库表字段。</p><p>(1)打开…/sign/models.py 文件，完成表的创建。<br>(2)进行数据库迁移：</p><ul><li>D:\guest&gt; <code>python3 manage.py makemigrations sign</code> </li><li>D:\guest&gt; <code>python3 manage.py migrate</code></li></ul></blockquote><p><strong>2、admin 后台管理</strong></p><blockquote><p>创建的发布会和嘉宾表 同样可以通过 Admin 后台去管理：</p><ul><li>打开…/sign/admin.py 文件，通知 admin 管理工具为这些模块逐一提供界面：<code>admin.site.register()</code>。</li><li>打开…/sign/admin.py 文件，定义 list_display 要在列表中显示哪些字段，当然，这些字段名称必须是模型中的数据表类中定义的。</li><li>打开…/sign/admin.py 文件，search_fields 创建表字段的搜索器，设置搜索关键字匹配多个表字段。 list_filter 用于创建字段过滤器。</li></ul></blockquote><p><strong>3、基本数据访问</strong></p><ul><li><code>python manage.py shell</code>  # dos下进入django的shell模式</li><li><code>from sign.models import Event,Guest</code>  </li><li><code>table.objects.all()</code>  # 获得 table（Event、Gues 表）中的所有对象</li><li><code>quit()</code>  # 退出shell</li></ul><blockquote><p>(1)插入数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime  </span><br><span class="line">e1 = Event(id=<span class="number">2</span>,name=<span class="string">'红米 Pro 发布会'</span>,limit=<span class="number">2000</span>,status=<span class="keyword">True</span>,address=<span class="string">'北京水立方'</span>,start_time=datetime(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">0</span>))   </span><br><span class="line">e1.save()</span><br></pre></td></tr></table></figure></p><p>ps：修改 settings.py 文件保存后，需要执行 quit() 命令退出 shell 模式，并重新执行 Python3 manage.py shell 进入，刚才的设置才会生效。<br>也可以通过 table.objects.create()方法将两步合为一步：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Event.objects.create(id=<span class="number">3</span>,name=<span class="string">'红米 MAX发布会'</span>,limit=<span class="number">2000</span>,status=<span class="keyword">True</span>, address=<span class="string">'北京会展中心'</span>,start_time=datetime(<span class="number">2016</span>,<span class="number">9</span>,<span class="number">22</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">0</span>)) &lt;Event: 红米MAX发布会&gt; </span><br><span class="line">Guest.objects.create(realname=<span class="string">'andy'</span>,phone=<span class="number">13611001101</span>,email= <span class="string">'andy@mail.com'</span>,sign=<span class="keyword">False</span>,event_id=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>(2)查询数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">table.objects.get()  <span class="comment"># 从数据库表中取得一条匹配的结果，返回一个对象，如果记录不存在的话，那么它会报DoesNotExist类型错误：</span></span><br><span class="line">e1 = Event.objects.get(name=<span class="string">'红米MAX发布会'</span>) </span><br><span class="line">e1</span><br><span class="line">e1.address</span><br><span class="line"></span><br><span class="line">table.objects.filter()  <span class="comment"># 方法是从数据库的取得匹配的结果，返回一个对象列表，如果记录不存在的话，它会返回[]：</span></span><br><span class="line">e2 = Event.objects.filter(name__contains=<span class="string">'发布会'</span>) </span><br><span class="line">e2</span><br></pre></td></tr></table></figure></p><p>(3)删除数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过 delete()方法删除：</span></span><br><span class="line">g2 = Guest.objects.get(phone=<span class="string">'13611001101'</span>) </span><br><span class="line">g2.delete()</span><br></pre></td></tr></table></figure></p><p>(4)更新数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g3=Guest.objects.get(phone=<span class="string">'13611001101'</span>) </span><br><span class="line">g3.realname=<span class="string">'andy2'</span> </span><br><span class="line">g3.save()</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>4、配置 MySQL</strong></p><blockquote><p>(1)要在…/guest/settings.py 文件中修改数据库相关配置。<br>(2)安装pymysql库。<br>(3)创建数据库。<br>(4)切换了数据库后，之前 Sqlite3 数据库里的数据并不能复制到 MySQL 中，所以需要重新进行数据库同步，使数据模型重新在 MySQL 数据库中生成表：D:\guest&gt; <code>python manage.py migrate</code><br>(5)直接进行数据迁移会报错！这是因为Django 在连接 MySQL 数据库时默认使用的是 MySQLdb 驱动，然而我们没有安装该驱动，因为它并不支持 Python3，我们现在安装的是 PyMySQL 驱动，如何让当前的 Django 通过 PyMySQL 来连接 MySQL 数据库呢？方法很简单，在…/guest/__init__.py 目录下添加：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"><span class="comment">#添加完后，再执行数据迁移命令。</span></span><br></pre></td></tr></table></figure></p><p>(6) 因为更换了数据库，所以，Admin 后台超级管理员账号（admin/admin123456）也需要重新创建：  </p><ul><li>D:\guest&gt; <code>python3 manage.py createsuperuser</code></li><li>Username (leave blank to use ‘fnngj’): <code>admin</code> #输入用户名 </li><li>Email address: <code>admin@mail.com</code> #输入邮箱 </li><li>Password: <code>admin123456</code> #输入密码 </li><li>Password (again): <code>admin123456</code> #重复输入密码 </li></ul></blockquote><h2 id="四、Template-模板"><a href="#四、Template-模板" class="headerlink" title="四、Template 模板"></a>四、Template 模板</h2><p><strong>1、Django-bootstrap3</strong></p><blockquote><p>(1)安装 <code>pip install django-bootstrap3</code><br>(2)在…/guest/settings.py 文件中添加 bootstrap3 应用。</p></blockquote><p><strong>2、发布会管理</strong></p><blockquote><p>(1)打开…/sign/views.py 文件，修改 event_manage()视图函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event_list = Event.objects.all()  <span class="comment"># 从数据库查询所有发布会</span></span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">"event_manage.html"</span>,&#123;<span class="string">"user"</span>: username, <span class="string">"events"</span>:event_list&#125;)  <span class="comment"># 将发布会列表返回给前端</span></span><br></pre></td></tr></table></figure></p><p>(2)打开并编写…/templates/event_manage.html 页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;head&gt;中引入bootstrap：--&gt;</span></span><br><span class="line">&#123;% load bootstrap3 %&#125; </span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript %&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;body&gt;中遍历显示出所有发布会列表：--&gt;</span></span><br><span class="line">&#123;% for event in events %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.status &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.start_time &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>(3)在…/templates/event_manage.html 页面上创建搜索表单。<br>(4)在…/guest/urls.py 文件中添加搜索路径的路由：<code>url(r&#39;^search_name/$&#39;, views.search_name)</code><br>(5)打开…/sign/views.py 文件，创建 search_name()视图函数。</p></blockquote><p><strong>3、嘉宾管理</strong></p><blockquote><p>(1)创建…/templates/guest_manage.html 页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for guest in guests %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.realname &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.phone &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.email &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.sign &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.event &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><p>(2)在…/guest/urls.py 文件中添加嘉宾路径的路由。<br>(3)打开…/sign/views.py 文件，创建 guest_manage()视图函数。</p></blockquote><p><strong>4、分页器 Paginator</strong></p><p>Django 已经为我们准备好了 Paginator 分页类。所以，只需要调用它即可完成列表的分页功能，进入 Django 的 shell 模式，练习 Paginator 类的基本使用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">D:\guest&gt; python3 manage.py shell</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sign.models <span class="keyword">import</span> Guest</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>guest_list = Guest.objects.all()  <span class="comment"># 查询 uest 表的所有数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Paginator(guest_list, <span class="number">2</span>)  <span class="comment"># 创建每页 2 条数据的分页器 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.count  <span class="comment"># 查看共多少条数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.page_range  <span class="comment"># 查看共分多少页 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########第一页#############</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page1 = p.page(<span class="number">1</span>)  <span class="comment"># 获取第 1 页的数据</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page1  <span class="comment"># 当前第几页  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page1.object_list  <span class="comment"># 当前页的对象 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> page1:  <span class="comment"># 循环打印第 1 页嘉宾的 realname </span></span><br><span class="line"><span class="meta">... </span>p.realname</span><br><span class="line"></span><br><span class="line"><span class="comment">##########第二页#############</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2 = p.page(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.start_index()  <span class="comment"># 本页的第一条数据 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.end_index()  <span class="comment"># 本页的最后一条数据 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.has_previous()  <span class="comment"># 是否有上一页 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.has_next()  <span class="comment"># 是否有下一页</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.previous_page_number()  <span class="comment"># 上一页是第几页</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page2.next_page_number()  <span class="comment"># 下一页是第几页  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########第三页#############</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page3 = p.page(<span class="number">3</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>page3.has_other_pages()  <span class="comment"># 是否有其他页</span></span><br></pre></td></tr></table></figure></p><blockquote><p>(1)打开…/sign/views.py 文件，修改 guest_manage()视图函数。<br>(2)在…/templates/guest_manage.html 页面也需要添加分页器的代码。</p></blockquote><p><strong>5、签到功能</strong></p><blockquote><p>(1)在…/templates/event_manage.html 页面，增加签到列链接。<br>(2)在…/guest/urls.py 文件中添加路径路由。<br>(3)打开…/sign/views.py 文件，创建 sign_index()视图函数。<br>(4)创建…/templates/sign_index.html 签到页面。<br>(5)打开…/guest/urls.py 文件，添加签到路径的路由。<br>(6)打开…/sign/views.py 文件，创建 sign_index_action()视图函数。<br>(7)修改…/templates/sign_index.html 页面，增加 sign_index_action()视图函数返回的提示信息的位置：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; hint &#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; guest.realname &#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; guest.phone &#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>6、退出系统</strong></p><blockquote><p>(1)打开…/urls.py 文件，添加退出目录的路由。<br>(2)打开…/sign/views.py 文件，创建 logout()视图函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auth.logout(request) <span class="comment">#退出登录 </span></span><br><span class="line">response = HttpResponseRedirect(<span class="string">'/index/'</span>) </span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="五、开发-Web-接口"><a href="#五、开发-Web-接口" class="headerlink" title="五、开发 Web 接口"></a>五、开发 Web 接口</h2><p>首先，单独创建…/sign/views_if.py文件，该项目的接口方法都在这里。</p><p><strong>1、发布会添加接口</strong></p><blockquote><p>(1)首先，判断 eid、 name、limit、address、start_time 等字段均不能为空，否则 JsonResponse()返回相应的 状态码和提示。<br>(2)接下来，判断发布会 id 是否存在，以及发布会名称（name）是否存在；如果存在将返回相应的状态码和 提示信息。<br>(3)再接下来，判断发布会状态是否为空，如果为空，将状态设置为 1（True）。<br>(4)最后，将数据插入到 Event 表，在插入的过程中如果日期格式错误，将抛出 ValidationError 异常，接收 该异常并返回相应的状态和提示，否则，插入成功，返回状态码 200 和“addeventsuccess”的提示。</p></blockquote><p><strong>2、发布会查询接口</strong></p><blockquote><p>(1)通过GET请求接收发布会id和name参数。两个参数都是可选的。首先，判断当两个参数同时为空，接 口返回状态码 10021，参数错误。<br>(2)如果发布会 id 不为空，优先通过 id 查询，因为 id 的唯一性，所以，查询结果只会有一条，将查询结果 以 key:value 对的方式存放到定义的 event 字典中，并将数据字典作为整个返回字典中 data 对应的值返回。<br>(3)name 查询为模糊查询，查询数据可能会有多条，返回的数据稍显复杂；首先将查询的每一条数据放到一 个字典 event 中，再把每一个字典再放到数组 datas 中，最后再将整个数组做为返回字典中 data 对应的值返回。</p></blockquote><p><strong>3、嘉宾添加接口</strong></p><blockquote><p>(1)通过POST请求接收嘉宾参数：关联的发布会id、姓名、手机号和邮箱等参数。<br>(2)首先，判断 eid、realname、phone 等参数均不能为空。<br>(3)接下来，判断嘉宾关联的发布会 id 是否存在，以及关联的发布会状态是否为 True（即 1），如果不存在 或不为 True，将返回相应的状态码和提示信息。<br>(4)接下来判断发布会人数限制。<br>(5)再接下来的步骤是判断当前时间是否大于发布会时间，如果大于则说明发布已开始，或者早已经结束。那么该发布会就应该不能允许再添加嘉宾。<br>(6)最后，插入嘉宾数据，如果发布会的手机号重复则抛 IntegrityError 异常，接收该异常并返回相应的状态 码和提示信息。如果添加成功，则返回状态码 200 和“addguestsuccess”的提示。</p></blockquote><p><strong>4、嘉宾查询接口</strong></p><p>嘉宾查询接口与发布会查询接口相似，只是参数与查询条件判断有所不同，这里就不再一一说明。</p><p><strong>5、嘉宾签到接口</strong></p><blockquote><p>(1)签到接口通过POST请求接收发布会id和嘉宾手机号。签到接口的判断条件比较多。<br>(2)首先，判断两个参数均不能为空。<br>(3)接着，判断发布会 id 是否存在，以及发布会状态是否为 True，如果不存在或不为 True，将返回相应的状 态码和提示信息。<br>(4)再接着，判断当前时间是否大于发布会时间，如果大于发布会时间说明发布会已开始，不允许签到。<br>(5)然后，再判断嘉宾的手机号是否存在，以及嘉宾的手机号与发布会 id 是否为对应关系。否则返回相应的 错误码和提示信息。<br>(6)最后，判断该嘉宾的状态是否为已签到，如果已签到，返回相应的状态码和提示；如果未签到修改状态 为已签到，并返回状态码 200 和“signsuccess”的提示。</p></blockquote><p><strong>6、配置接口路径</strong></p><blockquote><p>(1)打开…/guest/urls.py文件，添加接口基本路径“/api/”：<code>url(r&#39;^api/&#39;, include(&#39;sign.urls&#39;, namespace=&quot;sign&quot;))</code><br>(2)创建…/sign/urls.py文件，配置具体接口的二级路径：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app_name=<span class="string">'sign'</span>  <span class="comment"># django2.0里必须添加应用名称</span></span><br><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># guest system interface: </span></span><br><span class="line"><span class="comment"># ex : /api/add_event/</span></span><br><span class="line">url(<span class="string">r'^add_event/'</span>, views_if.add_event, name=<span class="string">'add_event'</span>),</span><br><span class="line"><span class="comment"># ex : /api/add_guest/ </span></span><br><span class="line">url(<span class="string">r'^add_guest/'</span>, views_if.add_guest, name=<span class="string">'add_guest'</span>), </span><br><span class="line"><span class="comment"># ex : /api/get_event_list/ </span></span><br><span class="line">url(<span class="string">r'^get_event_list/'</span>, views_if.get_event_list, name=<span class="string">'get_event_list'</span>), </span><br><span class="line"><span class="comment"># ex : /api/get_guest_list/ </span></span><br><span class="line">url(<span class="string">r'^get_guest_list/'</span>, views_if.get_guest_list, name=<span class="string">'get_guest_list'</span>), </span><br><span class="line"><span class="comment"># ex : /api/user_sign/ </span></span><br><span class="line">url(<span class="string">r'^user_sign/'</span>, views_if.user_sign, name=<span class="string">'user_sign'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>7、编写 Web 接口文档</strong></p><h2 id="六、接口的安全机制"><a href="#六、接口的安全机制" class="headerlink" title="六、接口的安全机制"></a>六、接口的安全机制</h2><p><strong>1、用户认证</strong></p><blockquote><p>(1)重新创建…/sign/views_if_sec.py 视图文件，添加用户认证函数。<br>(2)增加发布会查询接口函数，函数首先调用用户认证函数，进行用户认证。<br>(3)在…/sign/urls.py 文件中添加新的安全接口指向：<code>url(r&#39;^sec_get_event_list/&#39;, views_if_sec.get_event_list, name=&#39;get_event_list&#39;)</code></p></blockquote><p><strong>2、数字签名</strong></p><p>在使用 HTTP/SOAP 协议传输数据的时候，签名作为其中一个参数，可以起到关键作用：</p><p>1)鉴权：通过客户的密钥，服务端的密钥匹配：</p><ul><li>例如一个接口传参为：<a href="http://127.0.0.1:8000/api/?a=1&amp;b=2" target="_blank" rel="noopener">http://127.0.0.1:8000/api/?a=1&amp;b=2</a></li><li>假设签名的密钥为：@admin123</li><li>加上签名之后的接口参数为：<a href="http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=@admin123" target="_blank" rel="noopener">http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=@admin123</a></li><li>sign 参数明文传输是不安全的，一般会通过加密算法进行加密, “@admin123” 经过 MD5 加密得到：4b9db269c5f978e1264480b0a7619eea</li><li>单做为鉴权，带签名的接口为：<a href="http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=4b9db269c5f978e1264480b0a7619eea" target="_blank" rel="noopener">http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=4b9db269c5f978e1264480b0a7619eea</a></li><li>服务器接收到请求后，同样需要对“@admin123”进行 MD5 加密，比对与传来的 sign 加密串是否一致，从而来鉴别调用者是否有权限方位该接口。</li></ul><p>2)数据防篡改：参数是明文传输，将参数及密钥加密作为签名与服务器匹配：</p><ul><li>同样是这样一个带参数的接口：<a href="http://127.0.0.1:8000/api/?a=1&amp;b=2" target="_blank" rel="noopener">http://127.0.0.1:8000/api/?a=1&amp;b=2</a></li><li>假设签名的密钥为：@admin123</li><li>签名的明文为：a=1&amp;b=2&amp;api_key=@admin123</li><li>将签名的明文生成 MD5 加密串：786bfe32ae1d3764f208e03ca0bfaf13</li><li>带参数的接口串为：<a href="http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=786bfe32ae1d3764f208e03ca0bfaf13" target="_blank" rel="noopener">http://127.0.0.1:8000/sign/?a=1&amp;b=2&amp;sign=786bfe32ae1d3764f208e03ca0bfaf13</a></li><li>因为整个接口的参数做了加密，所以，只要任意一个参数发改变，那签名的验证就会失败。从而起到了鉴权及数据完整性的保护。</li></ul><blockquote><p>(1)打开…/sign/views_if_sec.py 视图文件，添加用户签名函数。<br>(2)增加添加发布会接口函数，函数首先调用用户签名函数，进行签名验证。<br>(3)在…/sign/urls.py 文件中添加新的安全接口路由：<code>url(r&#39;sec_add_event/&#39;, views_if_sec.add_event, name=&#39;add_event&#39;)</code></p></blockquote><p><strong>3、接口加密</strong></p><p>PyCrypto 是一个免费的加密算法库，支持常见的 DES、AES 加密以及 MD5、SHA 各种 HASH 运算。<br>安装PyCryoto库： <code>pip install Crypto</code></p><blockquote><p>(1)客户端请求接口时，进行了AES加密，在服务端需要进行解密验证。代码详见虫师原文地址。<br>(2)打开…/sign/views_if_sec.py 视图文件，编写解密函数。<br>(3)在获取嘉宾例表的接口中调用 aes_encryption()函数进行 AES 加密字符串解密。<br>(4)在…/sign/urls.py 文件中添加新的安全接口指向：<code>url(r&#39;^sec_get_guest_list/&#39;, views_if_sec.get_guest_list, name=&#39;get_guest_list&#39;)</code></p></blockquote><h2 id="七、REST-API"><a href="#七、REST-API" class="headerlink" title="七、REST API"></a>七、REST API</h2><p>REST（即 RepresentationalStateTransfer 的缩写）中文翻译为“表现层状态转化”：</p><ul><li><p>资源（Resources），所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。你可以用一个 URI（统一资源定位符）指向它，每种资源对应一个特定的 URI。要获取这个资源，访问它的 URI 就可以。</p></li><li><p>表现层（Representation），把”资源”具体呈现出来的形式。URI 只代表资源的实体，不代表它的形式。严格地说，有些网址最后的“.html”后缀名是不必要的，因为这个后缀名表示格式，属于“表现层”范畴，而 URI 应该只代表“资源”的位置。它的具体表现形式，应该在 HTTP 请求的头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对”表现层”的描述。</p></li><li><p>状态转化（StateTransfer），互联网通信协议 HTTP 协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（StateTransfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。客户端用到的手段，只能是 HTTP 协议。具体来说，就是 HTTP 协议里面，四个表示操作方式的动词： GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源（也可 以用于更新资源），PUT 用来更新资源，DELETE 用来删除资源。</p></li></ul><p>Django-REST-Framework是一个强大而灵活的工具用于构建 WebAPIs。通过该框架可以创建 REST 风格的 WebSeriver 应用。安装：<code>pip install djangorestframework</code></p><p><strong>1、创建简单的 API</strong></p><blockquote><p>(1)&gt; <code>django-admin startproject django_rest</code><br>(2)&gt; <code>cd django_rest</code><br>(3)\django_rest&gt; <code>python3 manage.py startapp api</code><br>(4)打开 settings.py 文件添加应用：’rest_framework’和’api’<br>(5)在 settings.py 文件末尾添加:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123; </span><br><span class="line"><span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (<span class="string">'rest_framework.permissions.IsAdminUser'</span>,), </span><br><span class="line"><span class="string">'PAGE_SIZE'</span>: <span class="number">10</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(6)执行数据库迁移 \django_rest&gt; <code>python3 manage.py migrate</code><br>(7)创建超级管理员账户\django_rest&gt; <code>python3 manage.py createsuperuser</code><br>(8)创建数据序列化，创建…/api/serializers.py 文件,代码见文件。<br>(9)创建视图，打开…/api/views.py 视图文件，代码见文件。<br>(10)打开…/django_rest/urls.py 文件，添加路径的路由，代码见文件。<br>(11)启动服务 …\django_rest&gt; <code>python3 manage.py runserver</code></p></blockquote><p><strong>2、 集成发布会系统 API</strong></p><blockquote><p>(1)接下来在 django_rest 项目的基础上增加发布会和嘉宾管理的接口。<br>(2)打开…/api/models.py 文件，创建模型。<br>(3)进行数据库迁移：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\django_rest&gt; python3 manage.py makemigrations api</span><br><span class="line">\django_rest&gt; python3 manage.py migrate</span><br></pre></td></tr></table></figure></p><p>(4)打开…/api/serializers.py 文件，添加发布会数据序列化。<br>(5)打开…/api/views.py 视图文件，定义发布会视图类。<br>(6)打开…/django_rest/urls.py 文件，添加 URL 配置。<br>(7)启动项目，使用浏览器打开：<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a></p></blockquote><h2 id="八、项目代码"><a href="#八、项目代码" class="headerlink" title="八、项目代码"></a>八、项目代码</h2><h3 id="1、guest项目"><a href="#1、guest项目" class="headerlink" title="1、guest项目"></a>1、guest项目</h3><blockquote><ul><li>guest/<ul><li>guest/<ul><li>__init__.py</li><li>settings.py</li><li>urls.py</li><li>wsgi.py</li></ul></li><li>sign/<ul><li>migrations/<ul><li>__init__.py</li><li>0001_initial.py</li></ul></li><li>templates/<ul><li>event_manage.html</li><li>guest_manage.html</li><li>index.html</li><li>sign_index.html</li></ul></li><li>__init__.py</li><li>admin.py</li><li>apps.py</li><li>models.py</li><li>tests.py</li><li>urls.py</li><li>views.py</li><li>views_if.py</li><li>views_if_sec.py</li></ul></li><li>db.sqlite3</li><li>manage.py</li></ul></li></ul></blockquote><p>guest/guest/__init__.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()  <span class="comment"># 让当前的 Django 通过 PyMySQL 来连接 MySQL 数据库</span></span><br></pre></td></tr></table></figure></p><p>guest/guest/settings.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"><span class="string">'sign'</span>,  <span class="comment"># 添加sign应用</span></span><br><span class="line"><span class="string">'bootstrap3'</span>,  <span class="comment"># 添加</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置mysql数据库</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>, </span><br><span class="line"><span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>, </span><br><span class="line"><span class="string">'PORT'</span>: <span class="string">'3306'</span>, </span><br><span class="line"><span class="string">'NAME'</span>: <span class="string">'guest'</span>, </span><br><span class="line"><span class="string">'USER'</span>: <span class="string">'root'</span>, </span><br><span class="line"><span class="string">'PASSWORD'</span>: <span class="string">'123456'</span>,</span><br><span class="line"><span class="string">'OPTIONS'</span>: &#123; </span><br><span class="line"><span class="string">'init_command'</span>: <span class="string">"SET sql_mode='STRICT_TRANS_TABLES'"</span>, </span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>guest/guest/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include  <span class="comment"># url控制需要导入</span></span><br><span class="line"><span class="keyword">from</span> sign <span class="keyword">import</span> views  <span class="comment"># 导入 sign 应用 views 文件</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">url(<span class="string">r'^index/$'</span>, views.index),   <span class="comment"># 添加 index/路径配置</span></span><br><span class="line">url(<span class="string">r'^login_action/$'</span>, views.login_action),</span><br><span class="line">url(<span class="string">r'^event_manage/$'</span>, views.event_manage),</span><br><span class="line">url(<span class="string">r'^accounts/login/$'</span>, views.index),</span><br><span class="line">url(<span class="string">r'^search_name/$'</span>, views.search_name),</span><br><span class="line">url(<span class="string">r'^guest_manage/$'</span>, views.guest_manage),</span><br><span class="line">url(<span class="string">r'^sign_index/(?P&lt;event_id&gt;[0-9]+)/$'</span>, views.sign_index),  <span class="comment"># 配置二级目录，发布会 id，要求必须为数字</span></span><br><span class="line">url(<span class="string">r'^sign_index_action/(?P&lt;event_id&gt;[0-9]+)/$'</span>, views.sign_index_action),</span><br><span class="line">url(<span class="string">r'^logout/$'</span>, views.logout),</span><br><span class="line">url(<span class="string">r'^api/'</span>, include(<span class="string">'sign.urls'</span>, namespace=<span class="string">"sign"</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>guest/sign/admin.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> sign.models <span class="keyword">import</span> Event,Guest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">list_display = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'status'</span>, <span class="string">'address'</span>, <span class="string">'start_time'</span>]  <span class="comment"># 显示字段</span></span><br><span class="line">search_fields = [<span class="string">'name'</span>]  <span class="comment"># 搜索栏</span></span><br><span class="line">list_filter = [<span class="string">'status'</span>]  <span class="comment"># 过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuestAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">list_display = [<span class="string">'realname'</span>, <span class="string">'phone'</span>, <span class="string">'email'</span>, <span class="string">'sign'</span>, <span class="string">'create_time'</span>, <span class="string">'event'</span>]  <span class="comment"># 显示字段</span></span><br><span class="line">search_fields = [<span class="string">'realname'</span>, <span class="string">'phone'</span>]  <span class="comment"># 搜索栏</span></span><br><span class="line">list_filter = [<span class="string">'sign'</span>]  <span class="comment"># 过滤器</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Event, EventAdmin)  <span class="comment"># 用 EventAdmin 选项注册 Event 模块。</span></span><br><span class="line">admin.site.register(Guest, GuestAdmin)<span class="comment"># 用 GuestAdmin 选项注册 Guest 模块。</span></span><br></pre></td></tr></table></figure></p><p>guest/sign/models.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布会表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"><span class="string">"""默认都会生成自增id，在创建模型时不需要声明该字段"""</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">100</span>)  <span class="comment"># 发布会标题</span></span><br><span class="line">limit = models.IntegerField()  <span class="comment"># 参加人数</span></span><br><span class="line">status = models.BooleanField()  <span class="comment"># 发布会状态</span></span><br><span class="line">address = models.CharField(max_length=<span class="number">200</span>)  <span class="comment"># 地址</span></span><br><span class="line">start_time = models.DateTimeField(<span class="string">'event time'</span>)  <span class="comment"># 发布会时间</span></span><br><span class="line">create_time = models.DateTimeField(auto_now=<span class="keyword">True</span>) <span class="comment"># 创建时间（自动获取当前时间）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.name  <span class="comment"># __str__()方法告诉 Python 如何将对象以 str 的方式显示出来。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嘉宾表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guest</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"><span class="string">"""默认都会生成自增id，在创建模型时不需要声明该字段"""</span></span><br><span class="line">event = models.ForeignKey(Event, on_delete=models.CASCADE)  <span class="comment"># 关联发布会id</span></span><br><span class="line">realname = models.CharField(max_length=<span class="number">64</span>)  <span class="comment"># 姓名</span></span><br><span class="line">phone = models.CharField(max_length=<span class="number">16</span>)  <span class="comment"># 手机号</span></span><br><span class="line">email = models.EmailField()  <span class="comment"># 邮箱</span></span><br><span class="line">sign = models.BooleanField()  <span class="comment"># 签到状态</span></span><br><span class="line">create_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)  <span class="comment"># 创建时间（自动获取当前时间）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line"><span class="string">"""通过发布会id+手机号来做为联合主键"""</span></span><br><span class="line">unique_together = (<span class="string">"event"</span>, <span class="string">"phone"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.realname  <span class="comment"># __str__()方法告诉 Python 如何将对象以 str 的方式显示出来。</span></span><br></pre></td></tr></table></figure></p><p>guest/sign/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> sign <span class="keyword">import</span> views_if, views_if_sec</span><br><span class="line"></span><br><span class="line">app_name=<span class="string">'sign'</span>  <span class="comment"># django2.0里必须添加应用名称，和urls路由里对应。或者直接在urls路由里添加路径也可以</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># guest system interface: </span></span><br><span class="line"><span class="comment"># ex : /api/add_event/</span></span><br><span class="line">url(<span class="string">r'^add_event/'</span>, views_if.add_event, name=<span class="string">'add_event'</span>),</span><br><span class="line"><span class="comment"># ex : /api/add_guest/ </span></span><br><span class="line">url(<span class="string">r'^add_guest/'</span>, views_if.add_guest, name=<span class="string">'add_guest'</span>), </span><br><span class="line"><span class="comment"># ex : /api/get_event_list/ </span></span><br><span class="line">url(<span class="string">r'^get_event_list/'</span>, views_if.get_event_list, name=<span class="string">'get_event_list'</span>), </span><br><span class="line"><span class="comment"># ex : /api/get_guest_list/ </span></span><br><span class="line">url(<span class="string">r'^get_guest_list/'</span>, views_if.get_guest_list, name=<span class="string">'get_guest_list'</span>), </span><br><span class="line"><span class="comment"># ex : /api/user_sign/ </span></span><br><span class="line">url(<span class="string">r'^user_sign/'</span>, views_if.user_sign, name=<span class="string">'user_sign'</span>),</span><br><span class="line"><span class="comment"># security interface: </span></span><br><span class="line"><span class="comment"># ex : /api/sec_get_event_list/ </span></span><br><span class="line">url(<span class="string">r'sec_get_event_list/'</span>, views_if_sec.get_event_list, name=<span class="string">'get_event_list'</span>),</span><br><span class="line"><span class="comment"># security interface:</span></span><br><span class="line"><span class="comment"># ex : /api/sec_add_event/</span></span><br><span class="line">url(<span class="string">r'sec_add_event/'</span>, views_if_sec.add_event, name=<span class="string">'add_event'</span>),</span><br><span class="line"><span class="comment"># security interface: </span></span><br><span class="line"><span class="comment"># ex : /aip/sec_add_event/ </span></span><br><span class="line">url(<span class="string">r'^sec_get_guest_list/'</span>, views_if_sec.get_guest_list, name=<span class="string">'get_guest_list'</span>), </span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>guest/sign/views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, get_object_or_404</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect </span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> sign.models <span class="keyword">import</span> Event,Guest</span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator, EmptyPage, PageNotAnInteger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># return HttpResponse('Hello Django')</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>)  <span class="comment"># 这里抛弃 HttpResponse 类，转而使用 Django 的 render 函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_action</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">username = request.POST.get(<span class="string">'username'</span>, <span class="string">''</span>)</span><br><span class="line">password = request.POST.get(<span class="string">'password'</span>, <span class="string">''</span>)</span><br><span class="line">user = auth.authenticate(username=username, password=password)  <span class="comment"># 认证给出的用户名和密码</span></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: </span><br><span class="line"><span class="comment">#return HttpResponse('login success!') </span></span><br><span class="line"><span class="comment">#response.set_cookie('user', username)  # 添加浏览器cookie</span></span><br><span class="line">auth.login(request, user)  <span class="comment"># 登录</span></span><br><span class="line">request.session[<span class="string">'user'</span>] = username <span class="comment"># 将 session 信息记录到浏览器</span></span><br><span class="line"><span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/event_manage/'</span>)</span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'username or password error!'</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'index.html'</span>, &#123;<span class="string">'error'</span>: <span class="string">'username or password error!'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">event_manage</span><span class="params">(request)</span>:</span></span><br><span class="line">event_list = Event.objects.all()</span><br><span class="line"><span class="comment">#username = request.COOKIES.get('user', '', 3600)  # 读取浏览器cookie</span></span><br><span class="line">username = request.session.get(<span class="string">'user'</span>, <span class="string">''</span>)  <span class="comment"># 读取浏览器 session</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'event_manage.html'</span>, &#123;<span class="string">"user"</span>: username, <span class="string">"events"</span>: event_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_name</span><span class="params">(request)</span>:</span></span><br><span class="line">username = request.session.get(<span class="string">'user'</span>, <span class="string">''</span>)</span><br><span class="line">search_name = request.GET.get(<span class="string">'name'</span>, <span class="string">''</span>)</span><br><span class="line">event_list = Event.objects.filter(name__contains=search_name)</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">"event_manage.html"</span>, &#123;<span class="string">"user"</span>: username, <span class="string">"events"</span>: event_list&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guest_manage</span><span class="params">(request)</span>:</span></span><br><span class="line">username = request.session.get(<span class="string">'user'</span>, <span class="string">''</span>)</span><br><span class="line">guest_list = Guest.objects.all()</span><br><span class="line">paginator = Paginator(guest_list, <span class="number">2</span>)  <span class="comment"># 划分每页显示 2 条数据</span></span><br><span class="line">page = request.GET.get(<span class="string">'page'</span>)  <span class="comment"># 通过 GET 请求得到当前要显示第几页的数</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">contacts = paginator.page(page)  <span class="comment"># 获取第 page 页的数据</span></span><br><span class="line"><span class="keyword">except</span> PageNotAnInteger:  <span class="comment"># 如果当前没有页数，抛 PageNotAnInteger 异常</span></span><br><span class="line">contacts = paginator.page(<span class="number">1</span>)  <span class="comment"># 返回第一页的数据</span></span><br><span class="line"><span class="keyword">except</span> EmptyPage:  <span class="comment"># 如果超出最大页数的范围，抛 EmptyPage 异常</span></span><br><span class="line">contacts = paginator.page(paginator.num_pages)  <span class="comment"># 返回最后一页面的数据</span></span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">"guest_manage.html"</span>, &#123;<span class="string">"user"</span>: username, <span class="string">"guests"</span>: contacts&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_index</span><span class="params">(request, event_id)</span>:</span></span><br><span class="line">event = get_object_or_404(Event, id=event_id)</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'sign_index.html'</span>, &#123;<span class="string">'event'</span>: event&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_index_action</span><span class="params">(request, event_id)</span>:</span></span><br><span class="line">event = get_object_or_404(Event, id=event_id) </span><br><span class="line">phone = request.POST.get(<span class="string">'phone'</span>,<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，查询 Guest 表判断用户输入的手机号是否存在，如果不存在将提示用户“手机号为空或不存在”</span></span><br><span class="line">result = Guest.objects.filter(phone = phone) </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result: </span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'sign_index.html'</span>, &#123;<span class="string">'event'</span>: event, <span class="string">'hint'</span>: <span class="string">'phone error.'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，通过手机和发布会 id 两个条件来查询 Guest 表，如果结果为空将提示用户“该用户未参加此次发布会”</span></span><br><span class="line">result = Guest.objects.filter(phone=phone,event_id=event_id) </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'sign_index.html'</span>, &#123;<span class="string">'event'</span>: event, <span class="string">'hint'</span>:<span class="string">'eventidorphoneerror.'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，再通过手机号查询 Guest 表，判断该手机号的签到状态是否为 1，如果为 1，表示已经签过到了， 返回用户“已签到”，否则，将提示用户“签到成功！”，并返回签到用户的信息。</span></span><br><span class="line">result = Guest.objects.get(phone=phone,event_id=event_id)</span><br><span class="line"><span class="keyword">if</span> result.sign:</span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'sign_index.html'</span>, &#123;<span class="string">'event'</span>: event, <span class="string">'hint'</span>: <span class="string">"user has sign in."</span>&#125;) </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Guest.objects.filter(phone=phone,event_id=event_id).update(sign = <span class="string">'1'</span>) </span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'sign_index.html'</span>, &#123;<span class="string">'event'</span>: event, <span class="string">'hint'</span>:<span class="string">'sign in success!'</span>, <span class="string">'guest'</span>: result&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(request)</span>:</span></span><br><span class="line">auth.logout(request)  <span class="comment"># 退出登录 </span></span><br><span class="line">response = HttpResponseRedirect(<span class="string">'/index/'</span>) </span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p><p>guest/sign/views_if.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> sign.models <span class="keyword">import</span> Event</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ValidationError, ObjectDoesNotExist</span><br><span class="line"><span class="keyword">from</span> django.db.utils <span class="keyword">import</span> IntegrityError</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加发布会接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_event</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 通过POST请求接收发布会参数</span></span><br><span class="line">eid = request.POST.get(<span class="string">'eid'</span>,<span class="string">''</span>)                 <span class="comment"># 发布会id</span></span><br><span class="line">name = request.POST.get(<span class="string">'name'</span>,<span class="string">''</span>)               <span class="comment"># 发布会标题</span></span><br><span class="line">limit = request.POST.get(<span class="string">'limit'</span>,<span class="string">''</span>)             <span class="comment"># 限制人数</span></span><br><span class="line">status = request.POST.get(<span class="string">'status'</span>,<span class="string">''</span>)           <span class="comment"># 状态</span></span><br><span class="line">address = request.POST.get(<span class="string">'address'</span>,<span class="string">''</span>)         <span class="comment"># 地址</span></span><br><span class="line">start_time = request.POST.get(<span class="string">'start_time'</span>,<span class="string">''</span>)   <span class="comment"># 发布会时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，判断 eid、 name、limit、address、start_time 等字段均不能为空</span></span><br><span class="line"><span class="keyword">if</span> eid ==<span class="string">''</span> <span class="keyword">or</span> name == <span class="string">''</span> <span class="keyword">or</span> limit == <span class="string">''</span> <span class="keyword">or</span> address == <span class="string">''</span> <span class="keyword">or</span> start_time == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'parameter error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断发布会 id 是否存在</span></span><br><span class="line">result =Event.objects.filter(id=eid)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>,<span class="string">'message'</span>:<span class="string">'event id already exists'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断发布会名称 name 是否存在</span></span><br><span class="line">result = Event.objects.filter(name=name)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10023</span>, <span class="string">'message'</span>:<span class="string">'event name already exists'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再接下来，判断发布会状态是否为空，如果为空，将状态设置为 1（True）。</span></span><br><span class="line"><span class="keyword">if</span> status == <span class="string">''</span>:</span><br><span class="line">status = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，将数据插入到 Event 表，在插入的过程中如果日期格式错误，将抛出 ValidationError 异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">Event.objects.create(id=eid,name=name,limit=limit,address=address,status=int(status),start_time=start_time)</span><br><span class="line"><span class="keyword">except</span> ValidationError:</span><br><span class="line">error = <span class="string">'start_time format error. It must be in YYYY-MM-DD HH:MM:SS format.'</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10024</span>,<span class="string">'message'</span>:error&#125;)</span><br><span class="line"><span class="comment"># 否则，插入成功，返回状态码 200 和“addeventsuccess”的提示。</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'add event success'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布会查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_event_list</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 通过GET请求接收发布会id和name参数。两个参数都是可选的</span></span><br><span class="line">eid = request.GET.get(<span class="string">"eid"</span>, <span class="string">""</span>)      <span class="comment"># 发布会id</span></span><br><span class="line">name = request.GET.get(<span class="string">"name"</span>, <span class="string">""</span>)    <span class="comment"># 发布会名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，判断当两个参数同时为空，接 口返回状态码 10021，参数错误。</span></span><br><span class="line"><span class="keyword">if</span> eid == <span class="string">''</span> <span class="keyword">and</span> name == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'parameter error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布会 id 不为空，优先通过 id 查询，因为 id 的唯一性，所以，查询结果只会有一条</span></span><br><span class="line"><span class="keyword">if</span> eid != <span class="string">''</span>:</span><br><span class="line">event = &#123;&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">result = Event.objects.get(id=eid)</span><br><span class="line"><span class="keyword">except</span> ObjectDoesNotExist:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">event[<span class="string">'eid'</span>] = result.id</span><br><span class="line">event[<span class="string">'name'</span>] = result.name</span><br><span class="line">event[<span class="string">'limit'</span>] = result.limit</span><br><span class="line">event[<span class="string">'status'</span>] = result.status</span><br><span class="line">event[<span class="string">'address'</span>] = result.address</span><br><span class="line">event[<span class="string">'start_time'</span>] = result.start_time</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:event&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name 查询为模糊查询，查询数据可能会有多条</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="string">''</span>:</span><br><span class="line">datas = []</span><br><span class="line">results = Event.objects.filter(name__contains=name)</span><br><span class="line"><span class="keyword">if</span> results:</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">event = &#123;&#125;</span><br><span class="line">event[<span class="string">'eid'</span>] = r.id</span><br><span class="line">event[<span class="string">'name'</span>] = r.name</span><br><span class="line">event[<span class="string">'limit'</span>] = r.limit</span><br><span class="line">event[<span class="string">'status'</span>] = r.status</span><br><span class="line">event[<span class="string">'address'</span>] = r.address</span><br><span class="line">event[<span class="string">'start_time'</span>] = r.start_time</span><br><span class="line">datas.append(event)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:datas&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加嘉宾接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_guest</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 通过POST请求接收嘉宾参数</span></span><br><span class="line">eid =  request.POST.get(<span class="string">'eid'</span>,<span class="string">''</span>)                <span class="comment"># 关联发布会id</span></span><br><span class="line">realname = request.POST.get(<span class="string">'realname'</span>,<span class="string">''</span>)       <span class="comment"># 姓名</span></span><br><span class="line">phone = request.POST.get(<span class="string">'phone'</span>,<span class="string">''</span>)             <span class="comment"># 手机号</span></span><br><span class="line">email = request.POST.get(<span class="string">'email'</span>,<span class="string">''</span>)             <span class="comment"># 邮箱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，判断 eid、realname、phone 等参数均不能为空</span></span><br><span class="line"><span class="keyword">if</span> eid ==<span class="string">''</span> <span class="keyword">or</span> realname == <span class="string">''</span> <span class="keyword">or</span> phone == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'parameter error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断嘉宾关联的发布会 id 是否存在</span></span><br><span class="line">result = Event.objects.filter(id=eid)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>,<span class="string">'message'</span>:<span class="string">'event id null'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断及关联的发布会状态是否为 True（即 1）</span></span><br><span class="line">result = Event.objects.get(id=eid).status</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10023</span>,<span class="string">'message'</span>:<span class="string">'event status is not available'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断发布会人数限制</span></span><br><span class="line">event_limit = Event.objects.get(id=eid).limit        <span class="comment"># 发布会限制人数</span></span><br><span class="line">guest_limit = Guest.objects.filter(event_id=eid)     <span class="comment"># 发布会已添加的嘉宾数</span></span><br><span class="line"><span class="keyword">if</span> len(guest_limit) &gt;= event_limit:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10024</span>,<span class="string">'message'</span>:<span class="string">'event number is full'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再接下来的步骤是判断当前时间是否大于发布会时间，如果大于则说明发布已开始，或者早已经结束。</span></span><br><span class="line">event_time = Event.objects.get(id=eid).start_time     <span class="comment"># 发布会时间</span></span><br><span class="line">timeArray = time.strptime(str(event_time), <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">e_time = int(time.mktime(timeArray))</span><br><span class="line">now_time = str(time.time())          <span class="comment"># 当前时间</span></span><br><span class="line">ntime = now_time.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">n_time = int(ntime)</span><br><span class="line"><span class="keyword">if</span> n_time &gt;= e_time:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10025</span>,<span class="string">'message'</span>:<span class="string">'event has started'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，插入嘉宾数据，如果发布会的手机号重复则抛 IntegrityError 异常，接收该异常并返回相应的状态 码和提示信息</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">Guest.objects.create(realname=realname,phone=int(phone),email=email,sign=<span class="number">0</span>,event_id=int(eid))</span><br><span class="line"><span class="keyword">except</span> IntegrityError:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10026</span>,<span class="string">'message'</span>:<span class="string">'the event guest phone number repeat'</span>&#125;)</span><br><span class="line"><span class="comment"># 如果添加成功，则返回状态码 200 和“addguestsuccess”的提示</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'add guest success'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嘉宾查询接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_guest_list</span><span class="params">(request)</span>:</span></span><br><span class="line">eid = request.GET.get(<span class="string">"eid"</span>, <span class="string">""</span>)       <span class="comment"># 关联发布会id</span></span><br><span class="line">phone = request.GET.get(<span class="string">"phone"</span>, <span class="string">""</span>)   <span class="comment"># 嘉宾手机号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> eid == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'eid cannot be empty'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> eid != <span class="string">''</span> <span class="keyword">and</span> phone == <span class="string">''</span>:</span><br><span class="line">datas = []</span><br><span class="line">results = Guest.objects.filter(event_id=eid)</span><br><span class="line"><span class="keyword">if</span> results:</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">guest = &#123;&#125;</span><br><span class="line">guest[<span class="string">'realname'</span>] = r.realname</span><br><span class="line">guest[<span class="string">'phone'</span>] = r.phone</span><br><span class="line">guest[<span class="string">'email'</span>] = r.email</span><br><span class="line">guest[<span class="string">'sign'</span>] = r.sign</span><br><span class="line">datas.append(guest)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:datas&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> eid != <span class="string">''</span> <span class="keyword">and</span> phone != <span class="string">''</span>:</span><br><span class="line">guest = &#123;&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">result = Guest.objects.get(phone=phone,event_id=eid)</span><br><span class="line"><span class="keyword">except</span> ObjectDoesNotExist:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">guest[<span class="string">'realname'</span>] = result.realname</span><br><span class="line">guest[<span class="string">'phone'</span>] = result.phone</span><br><span class="line">guest[<span class="string">'email'</span>] = result.email</span><br><span class="line">guest[<span class="string">'sign'</span>] = result.sign</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:guest&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户签到接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_sign</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 签到接口通过POST请求接收发布会id和嘉宾手机号</span></span><br><span class="line">eid =  request.POST.get(<span class="string">'eid'</span>,<span class="string">''</span>)       <span class="comment"># 发布会id</span></span><br><span class="line">phone =  request.POST.get(<span class="string">'phone'</span>,<span class="string">''</span>)   <span class="comment"># 嘉宾手机号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，判断两个参数均不能为空</span></span><br><span class="line"><span class="keyword">if</span> eid ==<span class="string">''</span> <span class="keyword">or</span> phone == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'parameter error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着，判断发布会 id 是否存在</span></span><br><span class="line">result = Event.objects.filter(id=eid)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>,<span class="string">'message'</span>:<span class="string">'event id null'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着，判断发布会状态是否为 True</span></span><br><span class="line">result = Event.objects.get(id=eid).status</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10023</span>,<span class="string">'message'</span>:<span class="string">'event status is not available'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再接着，判断当前时间是否大于发布会时间，如果大于发布会时间说明发布会已开始，不允许签到</span></span><br><span class="line">event_time = Event.objects.get(id=eid).start_time  <span class="comment"># 发布会时间</span></span><br><span class="line">timeArray = time.strptime(str(event_time), <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">e_time = int(time.mktime(timeArray))</span><br><span class="line">now_time = str(time.time())  <span class="comment"># 当前时间</span></span><br><span class="line">ntime = now_time.split(<span class="string">"."</span>)[<span class="number">0</span>]</span><br><span class="line">n_time = int(ntime)</span><br><span class="line"><span class="keyword">if</span> n_time &gt;= e_time:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10024</span>,<span class="string">'message'</span>:<span class="string">'event has started'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，再判断嘉宾的手机号是否存在</span></span><br><span class="line">result = Guest.objects.filter(phone=phone)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10025</span>,<span class="string">'message'</span>:<span class="string">'user phone null'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，再判断嘉宾的手机号与发布会 id 是否为对应关系</span></span><br><span class="line">result = Guest.objects.filter(phone=phone,event_id=eid)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10026</span>,<span class="string">'message'</span>:<span class="string">'user did not participate in the conference'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，判断该嘉宾的状态是否为已签到，如果已签到，返回相应的状态码和提示</span></span><br><span class="line">result = Guest.objects.get(event_id=eid,phone=phone).sign</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10027</span>,<span class="string">'message'</span>:<span class="string">'user has sign in'</span>&#125;)</span><br><span class="line"><span class="comment"># 如果未签到修改状态 为已签到，并返回状态码 200 和“signsuccess”的提示。</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Guest.objects.filter(phone=phone).update(sign=<span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'sign success'</span>&#125;)</span><br></pre></td></tr></table></figure></p><p>guest/sign/views_if_sec.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> sign.models <span class="keyword">import</span> Event, Guest</span><br><span class="line"><span class="keyword">from</span> django.core.exceptions <span class="keyword">import</span> ObjectDoesNotExist, ValidationError</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> auth <span class="keyword">as</span> django_auth</span><br><span class="line"><span class="keyword">import</span> base64, time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="comment">#from Crypto.Cipher import AES    # 请安装 Crypto</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户认证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_auth</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># request.META 包含了所有本次 HTTP 请求的 Header 信息;HTTP_AUTHORIZATION 用于获取 HTTPauthorization;</span></span><br><span class="line"><span class="comment"># 得到的数据是这样的：Basic YWRtaW46YWRtaW4xMjM0NTY=</span></span><br><span class="line">get_http_auth = request.META.get(<span class="string">'HTTP_AUTHORIZATION'</span>,<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># split()方法拆分成 list,拆分后的数据是这样的：['Basic','YWRtaW46YWRtaW4xMjM0NTY=']</span></span><br><span class="line">auth = get_http_auth.split()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出 list 中的加密串，通过 base64 对加密串进行解码。得到的数据是：('admin',':','admin123456')</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">auth_parts = base64.b64decode(auth[<span class="number">1</span>]).decode(<span class="string">'utf-8'</span>).partition(<span class="string">':'</span>)</span><br><span class="line"><span class="comment"># 如果获取不到 Auth 信息，将会抛 IndexError 异常</span></span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"null"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取出元组中对应的用户 id 和密码。最终于数据： admin admin123456</span></span><br><span class="line">userid, password = auth_parts[<span class="number">0</span>], auth_parts[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 调用 Django 的认证模块，对得到 Auth 信息进行认证。成功将返回 “success”，失败则返回“fail”</span></span><br><span class="line">user = django_auth.authenticate(username=userid, password=password)</span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> user.is_active:</span><br><span class="line">django_auth.login(request, user)</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"fail"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布会查询接口---增加用户认证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_event_list</span><span class="params">(request)</span>:</span></span><br><span class="line">auth_result = user_auth(request)  <span class="comment"># 调用认证函数</span></span><br><span class="line"><span class="keyword">if</span> auth_result == <span class="string">"null"</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10011</span>,<span class="string">'message'</span>:<span class="string">'user auth null'</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> auth_result == <span class="string">'fail'</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10012</span>,<span class="string">'message'</span>:<span class="string">'user auth fail'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过GET请求接收发布会id和name参数。两个参数都是可选的</span></span><br><span class="line">eid = request.GET.get(<span class="string">"eid"</span>, <span class="string">""</span>)  <span class="comment"># 发布会id</span></span><br><span class="line">name = request.GET.get(<span class="string">"name"</span>, <span class="string">""</span>)  <span class="comment"># 发布会名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，判断当两个参数同时为空，接 口返回状态码 10021，参数错误。</span></span><br><span class="line"><span class="keyword">if</span> eid == <span class="string">''</span> <span class="keyword">and</span> name == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'parameter error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布会 id 不为空，优先通过 id 查询，因为 id 的唯一性，所以，查询结果只会有一条</span></span><br><span class="line"><span class="keyword">if</span> eid != <span class="string">''</span>:</span><br><span class="line">event = &#123;&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">result = Event.objects.get(id=eid)</span><br><span class="line"><span class="keyword">except</span> ObjectDoesNotExist:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">event[<span class="string">'eid'</span>] = result.id</span><br><span class="line">event[<span class="string">'name'</span>] = result.name</span><br><span class="line">event[<span class="string">'limit'</span>] = result.limit</span><br><span class="line">event[<span class="string">'status'</span>] = result.status</span><br><span class="line">event[<span class="string">'address'</span>] = result.address</span><br><span class="line">event[<span class="string">'start_time'</span>] = result.start_time</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:event&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name 查询为模糊查询，查询数据可能会有多条</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="string">''</span>:</span><br><span class="line">datas = []</span><br><span class="line">results = Event.objects.filter(name__contains=name)</span><br><span class="line"><span class="keyword">if</span> results:</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">event = &#123;&#125;</span><br><span class="line">event[<span class="string">'eid'</span>] = r.id</span><br><span class="line">event[<span class="string">'name'</span>] = r.name</span><br><span class="line">event[<span class="string">'limit'</span>] = r.limit</span><br><span class="line">event[<span class="string">'status'</span>] = r.status</span><br><span class="line">event[<span class="string">'address'</span>] = r.address</span><br><span class="line">event[<span class="string">'start_time'</span>] = r.start_time</span><br><span class="line">datas.append(event)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:datas&#125;)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户签名+时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_sign</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 通过 POST 方法获取两个参数 time 和 sign 两个参数</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">"post"</span>:</span><br><span class="line">client_time = request.POST.get(<span class="string">'time'</span>, <span class="string">''</span>)  <span class="comment"># 客户端时间戳</span></span><br><span class="line">client_sign= request.POST.get(<span class="string">'sign'</span>, <span class="string">''</span>)  <span class="comment"># 客户端签名</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line"><span class="keyword">if</span> client_time == <span class="string">''</span> <span class="keyword">or</span> client_sign == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"sign null"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器时间</span></span><br><span class="line">now_time = time.time()  <span class="comment"># 例：1466426831.9126902</span></span><br><span class="line"><span class="comment"># Python3 生成的的时间戳精度太高，我们只需要小数点前面的 10 位即可</span></span><br><span class="line">server_time = str(now_time).split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取时间差</span></span><br><span class="line">time_difference = int(server_time) - int(client_time)</span><br><span class="line"><span class="comment"># 接口的请求时间是离现在超过 60 秒,返回请求超时</span></span><br><span class="line"><span class="keyword">if</span> time_difference &gt;= <span class="number">60</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"timeout"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 签名检查</span></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line"><span class="comment"># 签名参数的生成：密钥字符串(“&amp;Guest-Bugmaster”)和客户端发来的时间戳， 两者拼接成一个新的字符串</span></span><br><span class="line">sign_str = client_time + <span class="string">"&amp;Guest-Bugmaster"</span></span><br><span class="line">sing_bytes_utf8 = sign_str.encode(encoding=<span class="string">"utf-8"</span>)</span><br><span class="line"><span class="comment"># 通过 MD5 对其进行加密。从而将加密后的字符串作为 sign 的字段的参数</span></span><br><span class="line">md5.update(sing_bytes_utf8)</span><br><span class="line">server_sign = md5.hexdigest</span><br><span class="line"><span class="comment"># 两端使用相同的规则生成的加密后的字符串，进行比较</span></span><br><span class="line"><span class="keyword">if</span> server_sign != client_sign:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"sign fail"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">"sign right"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加发布会接口---增加签名+时间戳</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_event</span><span class="params">(request)</span>:</span></span><br><span class="line">sign_result = user_sign(request)  <span class="comment"># 调用签名函数</span></span><br><span class="line"><span class="keyword">if</span> sign_result == <span class="string">"error"</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10011</span>,<span class="string">'message'</span>:<span class="string">'request error'</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> sign_result == <span class="string">"sign null"</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10012</span>,<span class="string">'message'</span>:<span class="string">'user sign null'</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> sign_result == <span class="string">"timeout"</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10013</span>,<span class="string">'message'</span>:<span class="string">'user sign timeout'</span>&#125;)</span><br><span class="line"><span class="keyword">elif</span> sign_result == <span class="string">"sign fail"</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10014</span>,<span class="string">'message'</span>:<span class="string">'user sign error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过POST请求接收发布会参数</span></span><br><span class="line">eid = request.POST.get(<span class="string">'eid'</span>,<span class="string">''</span>)                 <span class="comment"># 发布会id</span></span><br><span class="line">name = request.POST.get(<span class="string">'name'</span>,<span class="string">''</span>)               <span class="comment"># 发布会标题</span></span><br><span class="line">limit = request.POST.get(<span class="string">'limit'</span>,<span class="string">''</span>)             <span class="comment"># 限制人数</span></span><br><span class="line">status = request.POST.get(<span class="string">'status'</span>,<span class="string">''</span>)           <span class="comment"># 状态</span></span><br><span class="line">address = request.POST.get(<span class="string">'address'</span>,<span class="string">''</span>)         <span class="comment"># 地址</span></span><br><span class="line">start_time = request.POST.get(<span class="string">'start_time'</span>,<span class="string">''</span>)   <span class="comment"># 发布会时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先，判断 eid、 name、limit、address、start_time 等字段均不能为空</span></span><br><span class="line"><span class="keyword">if</span> eid ==<span class="string">''</span> <span class="keyword">or</span> name == <span class="string">''</span> <span class="keyword">or</span> limit == <span class="string">''</span> <span class="keyword">or</span> address == <span class="string">''</span> <span class="keyword">or</span> start_time == <span class="string">''</span>:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'parameter error'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断发布会 id 是否存在</span></span><br><span class="line">result =Event.objects.filter(id=eid)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>,<span class="string">'message'</span>:<span class="string">'event id already exists'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来，判断发布会名称 name 是否存在</span></span><br><span class="line">result = Event.objects.filter(name=name)</span><br><span class="line"><span class="keyword">if</span> result:</span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10023</span>, <span class="string">'message'</span>:<span class="string">'event name already exists'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再接下来，判断发布会状态是否为空，如果为空，将状态设置为 1（True）。</span></span><br><span class="line"><span class="keyword">if</span> status == <span class="string">''</span>:</span><br><span class="line">status = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，将数据插入到 Event 表，在插入的过程中如果日期格式错误，将抛出 ValidationError 异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">Event.objects.create(id=eid,name=name,limit=limit,address=address,status=int(status),start_time=start_time)</span><br><span class="line"><span class="keyword">except</span> ValidationError:</span><br><span class="line">error = <span class="string">'start_time format error. It must be in YYYY-MM-DD HH:MM:SS format.'</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10024</span>,<span class="string">'message'</span>:error&#125;)</span><br><span class="line"><span class="comment"># 否则，插入成功，返回状态码 200 和“addeventsuccess”的提示。</span></span><br><span class="line"><span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>,<span class="string">'message'</span>:<span class="string">'add event success'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># AES加密算法</span></span><br><span class="line">BS = <span class="number">16</span></span><br><span class="line"><span class="comment"># 通过 upad 匿名函数对字符串的长度还原</span></span><br><span class="line">unpad = <span class="keyword">lambda</span> s : s[<span class="number">0</span>: - ord(s[<span class="number">-1</span>])]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptBase64</span><span class="params">(src)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">对 Base64 字符串解密</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">return</span> base64.urlsafe_b64decode(src)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptAES</span><span class="params">(src, key)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解析AES密文</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="comment"># 调用 decryptBase64()方法，将 Base64 加密字符串解密为 AES 加密字符串。</span></span><br><span class="line">    src = decryptBase64(src)</span><br><span class="line">    iv = <span class="string">b"1172311105789011"</span></span><br><span class="line"><span class="comment"># 通过 decrypt() 对 AES 加密串进行解密。</span></span><br><span class="line">    cryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    text = cryptor.decrypt(src).decode()</span><br><span class="line">    <span class="keyword">return</span> unpad(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aes_encryption</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="comment"># 服务器端与合法客户端约定的密钥 app_key。</span></span><br><span class="line">    app_key = <span class="string">'W7v4D60fds2Cmk2U'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断客户端请求是否为 POST，通过 POST.get()方法接收 data 参数</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        data = request.POST.get(<span class="string">"data"</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密，调用解密函数 decryptAES() ，传参加密字符串和 app_key</span></span><br><span class="line">    decode = decryptAES(data, app_key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转化为字典，将解密后字符串通过 json.loads()方法转化成字典，并将该字典做为 aes_encryption()函数的返回值</span></span><br><span class="line">    dict_data = json.loads(decode)</span><br><span class="line">    <span class="keyword">return</span> dict_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嘉宾查询接口----AES算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_guest_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    dict_data = aes_encryption(request)  <span class="comment"># 调用加密字符串解密函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dict_data == <span class="string">"error"</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10011</span>,<span class="string">'message'</span>:<span class="string">'request error'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取出对应的发布会id和嘉宾手机号</span></span><br><span class="line">    eid = dict_data[<span class="string">'eid'</span>]</span><br><span class="line">    phone = dict_data[<span class="string">'phone'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> eid == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10021</span>,<span class="string">'message'</span>:<span class="string">'eid cannot be empty'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> eid != <span class="string">''</span> <span class="keyword">and</span> phone == <span class="string">''</span>:</span><br><span class="line">        datas = []</span><br><span class="line">        results = Guest.objects.filter(event_id=eid)</span><br><span class="line">        <span class="keyword">if</span> results:</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">                guest = &#123;&#125;</span><br><span class="line">                guest[<span class="string">'realname'</span>] = r.realname</span><br><span class="line">                guest[<span class="string">'phone'</span>] = r.phone</span><br><span class="line">                guest[<span class="string">'email'</span>] = r.email</span><br><span class="line">                guest[<span class="string">'sign'</span>] = r.sign</span><br><span class="line">                datas.append(guest)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:datas&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> eid != <span class="string">''</span> <span class="keyword">and</span> phone != <span class="string">''</span>:</span><br><span class="line">        guest = &#123;&#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = Guest.objects.get(phone=phone,event_id=eid)</span><br><span class="line">        <span class="keyword">except</span> ObjectDoesNotExist:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">10022</span>, <span class="string">'message'</span>:<span class="string">'query result is empty'</span>&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            guest[<span class="string">'realname'</span>] = result.realname</span><br><span class="line">            guest[<span class="string">'phone'</span>] = result.phone</span><br><span class="line">            guest[<span class="string">'email'</span>] = result.email</span><br><span class="line">            guest[<span class="string">'sign'</span>] = result.sign</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">'status'</span>:<span class="number">200</span>, <span class="string">'message'</span>:<span class="string">'success'</span>, <span class="string">'data'</span>:guest&#125;)</span><br></pre></td></tr></table></figure></p><p>guest/sign/templates/index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Django Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>发布会管理<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/login_action/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; error &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>guest/sign/templates/event_manage.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Guest Manage<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-fixed-top"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/event_manage/"</span>&gt;</span>Guest Manage System<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>发布会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/guest_manage/"</span>&gt;</span>嘉宾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout/"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--发布会搜索表单--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span> <span class="attr">style</span>=<span class="string">"padding-top: 60px;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">"/search_name/"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"名称"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 发布会列表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"padding-top: 80px;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span> </span><br><span class="line">&#123;% for event in events %&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.status &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; event.start_time &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/sign_index/&#123;&#123; event.id &#125;&#125;/"</span> <span class="attr">target</span>=<span class="string">"&#123;&#123; event.id &#125;&#125;_blank"</span>&gt;</span> sign<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">&#123;% endfor %&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>guest/sign/templates/guest_manage.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Guest Manage<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 导航栏 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-fixed-top"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/event_manage/"</span>&gt;</span>Guest Manage System<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/event_manage/"</span>&gt;</span>发布会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>嘉宾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/logout/"</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 嘉宾列表 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"padding-top: 80px;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-striped"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>发布会<span class="tag">&lt;/<span class="name">th</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span> </span><br><span class="line">&#123;% for guest in guests %&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.realname &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.phone &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.email &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.sign &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; guest.event &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span> </span><br><span class="line">&#123;% endfor %&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 列表分页器 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"step-links"</span>&gt;</span></span><br><span class="line">&#123;% if guests.has_previous %&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page=&#123;&#123; guests.previous_page_number &#125;&#125;"</span>&gt;</span>previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">&#123;% endif %&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span> </span><br><span class="line">Page &#123;&#123; guests.number &#125;&#125; of &#123;&#123; guests.paginator.num_pages &#125;&#125;. </span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">&#123;% if guests.has_next %&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?page=&#123;&#123; guests.next_page_number &#125;&#125;"</span>&gt;</span>next<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line">&#123;% endif %&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>guest/sign/templates/sign_index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">&#123;% load bootstrap3 %&#125;</span><br><span class="line">&#123;% bootstrap_css %&#125;</span><br><span class="line">&#123;% bootstrap_javascript %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Guest Manage<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 导航栏 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-inverse navbar-fixed-top"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--将页面标题设置为发布会名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123; event.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/event_manage/"</span>&gt;</span>发布会<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/guest_manage/"</span>&gt;</span>嘉宾<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 签到功能 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span> <span class="attr">style</span>=<span class="string">"padding-top: 80px;"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbar"</span> <span class="attr">class</span>=<span class="string">"navbar-collapse collapse"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/sign_index_action/&#123;&#123; event.id &#125;&#125;/"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"输入手机号"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; hint &#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; guest.realname &#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;&#123; guest.phone &#125;&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2、django-rest项目"><a href="#2、django-rest项目" class="headerlink" title="2、django_rest项目"></a>2、django_rest项目</h3><blockquote><ul><li>django_rest/<ul><li>django_rest/<ul><li>__init__.py</li><li>settings.py</li><li>urls.py</li><li>wsgi.py</li></ul></li><li>api/<ul><li>migrations/<ul><li>__init__.py</li><li>0001_initial.py</li></ul></li><li>__init__.py</li><li>admin.py</li><li>apps.py</li><li>models.py</li><li>serializers.py</li><li>tests.py</li><li>views.py</li></ul></li><li>db.sqlite3</li><li>manage.py</li></ul></li></ul></blockquote><p>guest/django_rest/settings.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件末尾添加 </span></span><br><span class="line">REST_FRAMEWORK = &#123; </span><br><span class="line"><span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (<span class="string">'rest_framework.permissions.IsAdminUser'</span>,), </span><br><span class="line"><span class="string">'PAGE_SIZE'</span>: <span class="number">10</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>guest/django_rest/urls.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"><span class="keyword">from</span> api <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">因为我们使用的是 viewset，所以我们可以使用 routers 类自动生成 URLconf</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#Routers provide an easy way of automatically determining the URL conf. </span></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'users'</span>,views.UserViewSet)</span><br><span class="line">router.register(<span class="string">r'groups'</span>,views.GroupViewSet)</span><br><span class="line">router.register(<span class="string">r'event'</span>, views.EventViewSet) </span><br><span class="line">router.register(<span class="string">r'guest'</span>, views.GuestViewSet)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Wire up our API using automatic URL routing. </span></span><br><span class="line"><span class="comment"># Additionally, we include login URLs for the browsable API. </span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">url(<span class="string">r'^'</span>, include(router.urls)),</span><br><span class="line">url(<span class="string">r'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>,namespace=<span class="string">'rest_framework'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>guest/api/models.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布会</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">limit = models.IntegerField()</span><br><span class="line">status = models.BooleanField()</span><br><span class="line">address = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">start_time = models.DateTimeField(<span class="string">'events time'</span>)</span><br><span class="line">create_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嘉宾</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guest</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">event = models.ForeignKey(Event, on_delete=models.CASCADE)</span><br><span class="line">realname = models.CharField(max_length=<span class="number">64</span>)</span><br><span class="line">phone = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">email = models.EmailField() </span><br><span class="line">sign = models.BooleanField() </span><br><span class="line">create_time = models.DateTimeField(auto_now=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">unique_together = (<span class="string">'phone'</span>, <span class="string">'event'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.realname</span><br></pre></td></tr></table></figure></p><p>guest/api/serializers.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, Group</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Event, Guest</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用的是 HyperlinkedModelSerializer，也可以使用主键或者其他关系。</span></span><br><span class="line"><span class="string">但使用 HyperlinkedModelSerializer 是一个好的 RESTful 设计</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = User</span><br><span class="line">fields = (<span class="string">'url'</span>, <span class="string">'username'</span>, <span class="string">'email'</span>, <span class="string">'groups'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">model = Group</span><br><span class="line">fields = (<span class="string">'url'</span>, <span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span> </span><br><span class="line">model = Event </span><br><span class="line">fields = (<span class="string">'url'</span>,<span class="string">'name'</span>,<span class="string">'address'</span>,<span class="string">'start_time'</span>,<span class="string">'limit'</span>,<span class="string">'status'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuestSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span> </span><br><span class="line">model = Guest </span><br><span class="line">fields = (<span class="string">'url'</span>,<span class="string">'realname'</span>,<span class="string">'phone'</span>,<span class="string">'email'</span>,<span class="string">'sign'</span>,<span class="string">'event'</span>)</span><br></pre></td></tr></table></figure></p><p>guest/api/views.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User, Group</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets</span><br><span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> UserSerializer, GroupSerializer</span><br><span class="line"><span class="keyword">from</span> api.serializers <span class="keyword">import</span> EventSerializer, GuestSerializer </span><br><span class="line"><span class="keyword">from</span> api.models <span class="keyword">import</span> Event, Guest</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在 django RESTframework 中，所有常见的行为都被归到 ViewSets 中。</span></span><br><span class="line"><span class="string">当然我们可以将这些行为分拆出 来，但使用 ViewSets，使 view 的逻辑更为清楚。</span></span><br><span class="line"><span class="string">使用 queryset 和 serializer_class 使我们能更好的控制 API 行为，这也是我们推荐的使用方式。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ViewSets define the view behavior.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">API endpoint that allows users to be viewed or edited. </span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line">queryset = User.objects.all().order_by(<span class="string">'-date_joined'</span>)</span><br><span class="line">serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span> </span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">API endpoint that allows groups to be viewed or edited. </span></span><br><span class="line"><span class="string">"""</span> </span><br><span class="line">queryset = Group.objects.all()</span><br><span class="line">serializer_class = GroupSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span> </span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">API endpoint that allows events to be viewed or edited. </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">queryset = Event.objects.all()</span><br><span class="line">serializer_class = EventSerializer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuestViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line"><span class="string">""" </span></span><br><span class="line"><span class="string">API endpoint that allows guests to be viewed or edited. </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">queryset = Guest.objects.all()</span><br><span class="line">serializer_class = GuestSerializer</span><br></pre></td></tr></table></figure></p><h1 id="持续更新…—"><a href="#持续更新…—" class="headerlink" title="持续更新…—"></a><em>持续更新…</em>—</h1><p>title: django-签到系统<br>date: 2018-08-14 15:36:35</p><h2 id="tags"><a href="#tags" class="headerlink" title="tags:"></a>tags:</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虫师所写django签到系统的学习笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="django" scheme="http://pythonfood.github.io/categories/django/"/>
    
    
      <category term="django" scheme="http://pythonfood.github.io/tags/django/"/>
    
  </entry>
  
</feed>
