<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PythonFood</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pythonfood.github.io/"/>
  <updated>2018-02-08T08:03:05.224Z</updated>
  <id>http://pythonfood.github.io/</id>
  
  <author>
    <name>Python Food</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python初探</title>
    <link href="http://pythonfood.github.io/2017/12/28/python%E5%88%9D%E6%8E%A2/"/>
    <id>http://pythonfood.github.io/2017/12/28/python初探/</id>
    <published>2017-12-28T10:11:57.000Z</published>
    <updated>2018-02-08T08:03:05.224Z</updated>
    
    <content type="html"><![CDATA[<p>人生苦短，我用python。<br><a id="more"></a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>#!/usr/bin/python3# -*- coding: utf-8 -*-# 第一个注释# 第二个注释&apos;&apos;&apos;第三注释第四注释&apos;&apos;&apos;&quot;&quot;&quot;第五注释第六注释&quot;&quot;&quot;</code></pre><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><pre><code>第一个字符必须是字母表中字母或下划线&apos;_&apos;。标识符的其他的部分有字母、数字和下划线组成。标识符对大小写敏感。</code></pre><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><pre><code>&gt;&gt;&gt; import keyword&gt;&gt;&gt; keyword.kwlist[&apos;False&apos;, &apos;None&apos;, &apos;True&apos;, &apos;and&apos;, &apos;as&apos;, &apos;assert&apos;, &apos;break&apos;, &apos;class&apos;, &apos;continue&apos;, &apos;def&apos;, &apos;del&apos;, &apos;elif&apos;, &apos;else&apos;, &apos;except&apos;, &apos;finally&apos;, &apos;for&apos;, &apos;from&apos;, &apos;global&apos;, &apos;if&apos;, &apos;import&apos;, &apos;in&apos;, &apos;is&apos;, &apos;lambda&apos;, &apos;nonlocal&apos;, &apos;not&apos;, &apos;or&apos;, &apos;pass&apos;, &apos;raise&apos;, &apos;return&apos;, &apos;try&apos;, &apos;while&apos;, &apos;with&apos;, &apos;yield&apos;]</code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre><code>print(&apos;hello world&apos;)input(&apos;\n\n按下 enter 键后退出&apos;)</code></pre><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生苦短，我用python。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://pythonfood.github.io/categories/python/"/>
    
    
      <category term="python" scheme="http://pythonfood.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>monkey</title>
    <link href="http://pythonfood.github.io/2017/12/27/monkey/"/>
    <id>http://pythonfood.github.io/2017/12/27/monkey/</id>
    <published>2017-12-27T12:00:00.000Z</published>
    <updated>2018-02-09T09:35:12.818Z</updated>
    
    <content type="html"><![CDATA[<p>Monkey是Android中的一个命令行工具，可以运行在模拟器里或实际设备中。它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试。Monkey测试是一种为了测试软件的稳定性、健壮性的快速有效的方法。<br><a id="more"></a></p><h3 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h3><blockquote><p><code>--help</code>：打印帮助信息<br><code>-v</code>：指定打印信息的详细级别，一个-v增加一个级别，默认级别为0。</p></blockquote><h3 id="事件选项："><a href="#事件选项：" class="headerlink" title="事件选项："></a>事件选项：</h3><blockquote><p><code>-s</code>：指定产生随机事件种子值，相同的种子值产生相同的事件序列。<br><code>--throttle</code>：每个事件结束后的间隔时间。<br><code>--pct-touch</code>：指定(触摸事件)的百分比<br><code>--pct-motion</code>：（滑动事件)<br><code>--pct-trackball</code>：(轨迹球事件)<br><code>--pct-nav</code>：（导航事件 up/down/left/right）<br><code>--pct-majornav</code>：(主要导航事件 back key 、 menu key)<br><code>--pct-syskeys</code>：(系统按键事件 Home 、Back 、startCall 、 endCall 、 volumeControl)<br><code>--pct-appswitch</code> ：（activity之间的切换）<br><code>--pct-anyevent</code> ：（任意事件）</p></blockquote><h3 id="约束选项："><a href="#约束选项：" class="headerlink" title="约束选项："></a>约束选项：</h3><blockquote><p><code>-p</code>：指定有效的package（如不指定，则对系统中所有package有效），一个-p 对应一个有效package。<br><code>-c</code>：activity必须至少包含一个指定的category，才能被启动，否则启动不了。</p></blockquote><h3 id="调试选项："><a href="#调试选项：" class="headerlink" title="调试选项："></a>调试选项：</h3><blockquote><p><code>--dbg-no-events</code>：初始化启动的activity，但是不产生任何事件。<br><code>--hprof</code>：指定该项后在事件序列发送前后会立即生成分析报告  —— 一般建议指定该项。<br><code>--ignore-crashes</code>：忽略崩溃<br><code>--ignore-timeouts</code>：忽略超时<br><code>--ignore-security-exceptions</code>：忽略安全异常<br><code>--kill-process-after-error</code>：发生错误后直接杀掉进程<br><code>--monitor-native-crashes</code>：跟踪本地方法的崩溃问题<br><code>--wait-dbg</code>：知道连接了调试器才执行monkey测试。</p></blockquote><h3 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h3><pre><code>adb shell monkey -p（指定包名） com.hiveview.cloudscreen.py --throttle（操作延时ms） 1000 -s(指定seed值) 1500859116902 -v -v（信息反馈级别） 1000（执行次数）adb shell monkey -p com.hiveview.cloudscreen.py --throttle 100 --pct-majornav 50 --pct-nav 50 -v -v 1000 &gt;d:\monkey.txtadb shell monkey -p com.hiveview.cloudscreen.py --throttle 100 --ignore-crashes --ignore-timeouts --monitor-native-crashes --pct-majornav 50 --pct-nav 50 -v -v 1000 &gt;d:\monkey_log.txtadb shell monkey -p com.hiveview.cloudscreen.py --throttle 100 --pct-nav 50 --pct-majornav 50 -v -v 1000 &gt;d:\monkey_log.txt</code></pre><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Monkey是Android中的一个命令行工具，可以运行在模拟器里或实际设备中。它向系统发送伪随机的用户事件流(如按键输入、触摸屏输入、手势输入等)，实现对正在开发的应用程序进行压力测试。Monkey测试是一种为了测试软件的稳定性、健壮性的快速有效的方法。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="monkey" scheme="http://pythonfood.github.io/categories/monkey/"/>
    
    
      <category term="monkey" scheme="http://pythonfood.github.io/tags/monkey/"/>
    
  </entry>
  
  <entry>
    <title>安卓专项测试</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E5%AE%89%E5%8D%93%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    <id>http://pythonfood.github.io/2017/12/27/安卓专项测试/</id>
    <published>2017-12-27T11:10:00.000Z</published>
    <updated>2018-02-09T06:04:16.112Z</updated>
    
    <content type="html"><![CDATA[<p>安卓专项测试主要包括：响应时间、cpu、内存、电量、流量、FPS、过度渲染。<br><a id="more"></a></p><h3 id="响应时间："><a href="#响应时间：" class="headerlink" title="响应时间："></a>响应时间：</h3><blockquote><p>1.安装：普通安装、覆盖安装<br>2.启动：冷启动、热启动</p><blockquote><p>(1)adb命令：adb logcat、adb shell am start、adb shell screenrecord等。</p><blockquote><p>小示例：<br>1)adb shell screenrecord /sdcard/demo.mp4<br>2)adb pull /sdcard/demo.mp4 d:\record<br>3)用按帧播放的视频软件播放分析，比如KMplayer。</p></blockquote><p>(2)代码里打点（埋点）。<br>(3)高速相机。<br>(4)秒表。<br>(5)第三方工具或云测平台。</p></blockquote><p>3.跳转：页面之间、控件之间</p></blockquote><h3 id="cpu"><a href="#cpu" class="headerlink" title="cpu:"></a>cpu:</h3><blockquote><p>1.活动状态<br>2.静默状态</p><blockquote><p>(1)第三方工具：腾讯GT、网易Emmagee、阿里易测等。（小白首选）。<br>(2)dumpsys命令：adb shell dumpsys cpuinfo | grep {PackageName}。<br>(3)top命令：adb shell top | grep {PackageName}。</p><blockquote><p>小示例：<br>1)adb shell<br>2)top | grep com.peng.cloudp.tv</p><blockquote><p>第一列PID:进度ID<br>第二列PR:优先级<br>第三列CPU:瞬时CPU占用率<br>第四列进程状态:R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程<br>第五列THR:当前应用所用的线程数<br>第六列VSS:虚拟消耗内存<br>第七列RSS:实际使用物理内存<br>第八列UID:进程所有者的用户ID<br>第九列PR:进程名称</p></blockquote></blockquote></blockquote></blockquote><h3 id="内存："><a href="#内存：" class="headerlink" title="内存："></a>内存：</h3><blockquote><p>1.命令查看内存数据</p><blockquote><p>(1)adb shell dumpsys meminfo {PackageName}查看内存是否是一味上涨的趋势，不会回收或者部分回收。<br>(2)/system/build.prop 查看每个应用分配的最高内存值。<br>adb shell procrank (没有可以从网上下载procrank文件)。</p><blockquote><p>PID:进程ID<br>VSS:虚拟消耗内存<br>RSS:实际使用物理内存，是共享内存+私有内存。<br>PSS:占用私有内存加上平均分配的的共享内存。<br>USS:私有内存，如果应用终止了，这部分内存会释放。如果这个值超过应用被分配的最大值，就会闪退。</p></blockquote></blockquote><p>2.Memory Monitor查看内存风险<br>3.MAT分析内存泄漏<br>4.Zombie辅助检查内存占用</p></blockquote><h3 id="电量："><a href="#电量：" class="headerlink" title="电量："></a>电量：</h3><blockquote><p>1.待机：无网络待机、wifi待机、3G待机等。<br>2.活动状态：不断地进行某些场景操作、看视频、灭屏下载、唤醒等。<br>3.静默状态：打开app后不操作，后台运行。</p><blockquote><p>(1)通过硬件测试：耗电量测试仪、腾讯的电量宝等<br>(2)通过adb shell dumps batterystats命令。（android5.0以上使用）<br>(3)第三方工具或云测平台。<br>(4)android自带的电量统计。</p></blockquote></blockquote><h3 id="流量："><a href="#流量：" class="headerlink" title="流量："></a>流量：</h3><blockquote><p>1.活动状态<br>2.静默状态</p><blockquote><p>(1)通过Tcpdump抓包，然后用Wireshark分析。如果想更自动化，可以用FildderCore二次开发。<br>(2)查看Linux流量统计文件。</p><blockquote><p>小示例：<br>1)ps | grep com.peng.cloudp.tv （获取鹏云视讯的pid为9696）<br>2)cat /proc/9696/status （通过pid值获取uid为10035）<br>3)cat /proc/uid_stat/10035/tcp_snd （通过uid获取发送的流量byte,为15584）<br>4)cat /proc/uid_stat/10035/tcp_rcv （通过uid获取接收的流量byte,为16778）</p></blockquote><p>(3)利用类似DDMS的工具查看流量。（小白首选）<br>(4)通过Android API 的 TrafficStats类来统计。<br>(5)第三方工具或云测平台。</p></blockquote></blockquote><h3 id="FPS："><a href="#FPS：" class="headerlink" title="FPS："></a>FPS：</h3><blockquote><p>1.adb shell dumpsys gfxinfo</p><blockquote><p>小示例：<br>1)adb shell dumpsys gfxinfo com.peng.cloudp.tv &gt;&gt; com.peng.cloudp.tv.txt<br>2)抓取数据后用表格进行分析</p></blockquote><p>2.monitor.bat进行测试</p></blockquote><h3 id="过度渲染："><a href="#过度渲染：" class="headerlink" title="过度渲染："></a>过度渲染：</h3><blockquote><p>1.打开【设置-开发者选项-调试GPU过度绘制-显示过度绘制区域】，开启后点击应用，可以看到各种颜色的区域。</p><blockquote><p>颜色的标识：<br>(1)蓝色1x过度绘制<br>(2)绿色2x过度绘制<br>(3)淡红色3x过度绘制<br>(4)红色超过4x过度绘制</p></blockquote><p>2.颜色越浅越好:蓝-绿-淡红-红。最理想的是一个像素只绘制一次，合格的页面是白色、蓝色为主，绿色以上区域不能超过整个的三分之一。</p><blockquote><p>验收标准：<br>(1)控制过度绘制为2x<br>(2)不允许存在4x过度绘制<br>(3)不允许存在面积超过屏幕1/4区域的3x过度绘制（淡红色区域）</p></blockquote></blockquote><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安卓专项测试主要包括：响应时间、cpu、内存、电量、流量、FPS、过度渲染。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="专项测试" scheme="http://pythonfood.github.io/categories/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="专项测试" scheme="http://pythonfood.github.io/tags/%E4%B8%93%E9%A1%B9%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>流程分析</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://pythonfood.github.io/2017/12/27/流程分析/</id>
    <published>2017-12-27T09:10:07.000Z</published>
    <updated>2018-02-09T06:21:30.081Z</updated>
    
    <content type="html"><![CDATA[<p>现在的软件几乎都是用事件触发来控制流程的，事件触发时的情景便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。这种在软件设计方面的思想也可引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设用例场景用来描述流经用例的路径。<br><a id="more"></a></p><h3 id="场景设计法三个流程："><a href="#场景设计法三个流程：" class="headerlink" title="场景设计法三个流程："></a>场景设计法三个流程：</h3><blockquote><p>1.基本流：通过业务流程输入都为正确的，能够最后到达目标的流程<br>2.备选流：通过实现业务流程时，因错误操作或异常输入，导致流程存在反复，但最终能够完成期望业务的流程。<br>3.异常流：通过实现业务流程时，因错误操作或异常输入，导致业务没有正确完成。</p></blockquote><p><img src="/2017/12/27/流程分析/流程图.jpg" alt="流程图"></p><h3 id="流程分析应用步骤："><a href="#流程分析应用步骤：" class="headerlink" title="流程分析应用步骤："></a>流程分析应用步骤：</h3><blockquote><p>1.理解需求，确定业务流程（基本流、备选流、异常流）。<br>2.绘制流程图（再次明确流程路径）。<br>3.根据业务流程图，抽取测试路径（每次路径需包含一个从未走过的路径）。<br>4.细化路径设计测试用例。</p></blockquote><h3 id="流程分析法注意点："><a href="#流程分析法注意点：" class="headerlink" title="流程分析法注意点："></a>流程分析法注意点：</h3><blockquote><p>需使用等价类、边界值、正交试验、判定表、因果图等方法保证单个功能的正确性。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>1.画出流程图<br><img src="/2017/12/27/流程分析/1.画出流程图.png" alt="1.画出流程图"><br>2.流程图类需求<br><img src="/2017/12/27/流程分析/2.流程图类需求.png" alt="2.流程图类需求"><br>3.根据需求画流程图，流程覆盖写用例<br><img src="/2017/12/27/流程分析/3.根据需求画流程图，流程覆盖写用例.png" alt="3.根据需求画流程图，流程覆盖写用例"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的软件几乎都是用事件触发来控制流程的，事件触发时的情景便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。这种在软件设计方面的思想也可引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设用例场景用来描述流经用例的路径。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>状态迁移</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E7%8A%B6%E6%80%81%E8%BF%81%E7%A7%BB/"/>
    <id>http://pythonfood.github.io/2017/12/27/状态迁移/</id>
    <published>2017-12-27T09:10:06.000Z</published>
    <updated>2018-02-09T06:22:14.322Z</updated>
    
    <content type="html"><![CDATA[<p>状态迁移关注被测对象的状态变化，在需求规格说明书中是否有不可达到的状态和非法的状态，是否产生非法的状态迁移。<br><a id="more"></a></p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><blockquote><p>被测对象在特定输入条件下所保持的响应形式</p></blockquote><h3 id="状态迁移应用步骤："><a href="#状态迁移应用步骤：" class="headerlink" title="状态迁移应用步骤："></a>状态迁移应用步骤：</h3><blockquote><p>1.根据需求明确状态节点。<br>2.绘制状态迁移图。<br>3.绘制状态迁移树。<br>4.抽取测试用例。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>1.状态迁移类需求<br><img src="/2017/12/27/状态迁移/1.状态迁移类需求.png" alt="1.状态迁移类需求"><br>2.根据需求画状态迁移图案例1<br><img src="/2017/12/27/状态迁移/2.根据需求画状态迁移图案例1.png" alt="2.根据需求画状态迁移图案例1"><br>3.根据需求画状态迁移图案例2<br><img src="/2017/12/27/状态迁移/3.根据需求画状态迁移图案例2.png" alt="3.根据需求画状态迁移图案例2"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;状态迁移关注被测对象的状态变化，在需求规格说明书中是否有不可达到的状态和非法的状态，是否产生非法的状态迁移。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>正交试验</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E6%AD%A3%E4%BA%A4%E8%AF%95%E9%AA%8C/"/>
    <id>http://pythonfood.github.io/2017/12/27/正交试验/</id>
    <published>2017-12-27T09:10:05.000Z</published>
    <updated>2018-02-09T06:22:03.782Z</updated>
    
    <content type="html"><![CDATA[<p>正交试验是研究多因素多水平的一种设计方法，它是根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点，正交试验设计是一种基于正交表的、高效率、快速、经济的试验。<br><a id="more"></a></p><h3 id="正交试验重要概念："><a href="#正交试验重要概念：" class="headerlink" title="正交试验重要概念："></a>正交试验重要概念：</h3><blockquote><p>1.因子：所有参与试验的影响试验结果的条件成为因子。<br>2.水平：影响试验因子的取值或输入称为水平。<br>3.整齐可比：在同一张正交表中，每个因子每个水平出现的次数完全相同。试验中，每个因子的每个水平与其他因子的水平参与试验的机率完全相同。<br>4.均匀分散：同一张正交表中，任意两列水平搭配是完全相同的。</p></blockquote><h3 id="正交试验应用步骤："><a href="#正交试验应用步骤：" class="headerlink" title="正交试验应用步骤："></a>正交试验应用步骤：</h3><blockquote><p>1.分析需求获取因子和水平。<br>2.根据因子和水平选择合适的正交表。<br>3.替换因子和水平，获取试验次数。<br>4.根据试验或其他因素补充试验次数。<br>5.细化输出获取测试用例。</p></blockquote><h3 id="正交试验注意点："><a href="#正交试验注意点：" class="headerlink" title="正交试验注意点："></a>正交试验注意点：</h3><blockquote><p>1.选择正交表的因子与水平恰好与正交表相同。<br>2.根据对象因子与正交表中的因子不同，选择正交表中因子稍大于被测对象因子数，且试验次数最少的，多余的因子弃用。<br>3.被测对象水平与正交表中的水平不同，可根据实际情况进行合并，然后拆分。<br>4.因子水平都不相同，则可选择因子，水平稍大于被测对象的，且实验次数最少的。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>1.提取因子和水平<br><img src="/2017/12/27/正交试验/1.提取因子和水平.png" alt="1.提取因子和水平"><br>2.设计正交试验表，补充缺少的必要用例<br><img src="/2017/12/27/正交试验/2.设计正交试验表，补充缺少的必要用例.png" alt="2.设计正交试验表，补充缺少的必要用例"><br>3.替换因子水平得出用例<br><img src="/2017/12/27/正交试验/3.替换因子水平得出用例.png" alt="3.替换因子水平得出用例"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正交试验是研究多因素多水平的一种设计方法，它是根据正交性从全面试验中挑选出部分有代表性的点进行试验，这些有代表性的点具备了“均匀分散，齐整可比”的特点，正交试验设计是一种基于正交表的、高效率、快速、经济的试验。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>因果图</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E5%9B%A0%E6%9E%9C%E5%9B%BE/"/>
    <id>http://pythonfood.github.io/2017/12/27/因果图/</id>
    <published>2017-12-27T09:10:04.000Z</published>
    <updated>2018-02-09T06:21:52.091Z</updated>
    
    <content type="html"><![CDATA[<p>因果图是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。<br><a id="more"></a></p><h3 id="输入与输出的关系："><a href="#输入与输出的关系：" class="headerlink" title="输入与输出的关系："></a>输入与输出的关系：</h3><blockquote><p>1.恒等：若ci是1，则ei也是1；否则ei为0。<br>2.非：若ci是1，则ei是0；否则ei是1。<br>3.或：若c1或c2或c3是1，则ei是1；否则ei为0。“或”可有任意个输入。<br>4.与：若c1和c2都是1，则ei为1；否则ei为0。“与”也可有任意个输入。</p></blockquote><p><img src="/2017/12/27/因果图/因果图基本图形符.png" alt="因果图基本图形符"></p><h3 id="输入与输入的关系："><a href="#输入与输入的关系：" class="headerlink" title="输入与输入的关系："></a>输入与输入的关系：</h3><blockquote><p>1.E约束（异）：a和b中至多有一个可能为1，即a和b不能同时为1。<br>2.I约束（或）：a、b和c中至少有一个必须是1，即 a、b 和c不能同时为0。<br>3.O约束（唯一）；a和b必须有一个，且仅有1个为1。<br>4.R约束（要求）：a是1时，b必须是1，即不可能a是1时b是0。</p></blockquote><p><img src="/2017/12/27/因果图/因果图约束条件.png" alt="因果图约束条件"></p><h3 id="输出与输出的关系："><a href="#输出与输出的关系：" class="headerlink" title="输出与输出的关系："></a>输出与输出的关系：</h3><blockquote><p>1.M(屏蔽)：a出现时，b必定不出现；a不出现时，b则不确定。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>1.根据关系画用例的因果图<br><img src="/2017/12/27/因果图/1.根据关系画用例的因果图.png" alt="1.根据关系画用例的因果图"><br>2.根据用例因果图设计判定表<br><img src="/2017/12/27/因果图/2.根据用例因果图设计判定表.png" alt="2.根据用例因果图设计判定表"><br>3.去除因果图判定表的无效项<br><img src="/2017/12/27/因果图/3.去除因果图判定表的无效项.png" alt="3.去除因果图判定表的无效项"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因果图是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>判定表</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E5%88%A4%E5%AE%9A%E8%A1%A8/"/>
    <id>http://pythonfood.github.io/2017/12/27/判定表/</id>
    <published>2017-12-27T09:10:03.000Z</published>
    <updated>2018-02-09T06:21:40.261Z</updated>
    
    <content type="html"><![CDATA[<p>判定表是分析和表达多逻辑条件下执行不同操作的情况的工具。（在遇到复杂业务逻辑时可以利用该表理清业务逻辑关系）<br><a id="more"></a></p><h3 id="判定表重要概念："><a href="#判定表重要概念：" class="headerlink" title="判定表重要概念："></a>判定表重要概念：</h3><blockquote><p>1.条件</p><blockquote><p>条件桩：列出了所有条件，通常认为列出条件的次序无关紧要。<br>条件项：列出了所有条件的取值组合，在所有可能情况下的真假值。</p></blockquote><p>2.动作</p><blockquote><p>动作桩：列出所有可能的操作，这些操作的排列顺序没有约束。<br>动作项：列出在条件项的各种取值情况下应该采取的动作。</p></blockquote><p>3.规则</p><blockquote><p>规则：任何一个条件组合的特定取值及其他相应要执行的操作称为规则。在判定表中贯穿条件项和动作项的一列就是一条规则。</p></blockquote></blockquote><h3 id="判定表的4个组成部分："><a href="#判定表的4个组成部分：" class="headerlink" title="判定表的4个组成部分："></a>判定表的4个组成部分：</h3><p><img src="/2017/12/27/判定表/判定表的4个组成部分.jpg" alt="判定表的4个组成部分"></p><h3 id="判定表应用步骤："><a href="#判定表应用步骤：" class="headerlink" title="判定表应用步骤："></a>判定表应用步骤：</h3><blockquote><p>1.理解需求，列出条件桩和动作桩。<br>2.设计及优化判定表。（2的n次方种）<br>3.填写动作项。<br>4.根据判定表中输出结果的表现，进行判定表的合并（非必须），简化判定表。<br>5.抽取测试用例。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>根据判定条件编写判定表测试用例<br><img src="/2017/12/27/判定表/根据判定条件编写判定表测试用例.png" alt="根据判定条件编写判定表测试用例"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判定表是分析和表达多逻辑条件下执行不同操作的情况的工具。（在遇到复杂业务逻辑时可以利用该表理清业务逻辑关系）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>边界值</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E8%BE%B9%E7%95%8C%E5%80%BC/"/>
    <id>http://pythonfood.github.io/2017/12/27/边界值/</id>
    <published>2017-12-27T09:10:02.000Z</published>
    <updated>2018-02-09T06:21:09.110Z</updated>
    
    <content type="html"><![CDATA[<p>边界值是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。<br><a id="more"></a></p><h3 id="边界值三点（边值点）："><a href="#边界值三点（边值点）：" class="headerlink" title="边界值三点（边值点）："></a>边界值三点（边值点）：</h3><blockquote><p>1.上点：边界上的点，闭内开外（闭指域的边界是封闭的，即闭区间；开指域的边界是开放的，即开区间）。<br>2.离点：离上点最近的点称为离点。开内闭外。（根据上点的精度确定）<br>3.内点：边界值有效范围内的任意一点。</p></blockquote><h3 id="边界值如何确定离点："><a href="#边界值如何确定离点：" class="headerlink" title="边界值如何确定离点："></a>边界值如何确定离点：</h3><blockquote><p>1.如果边界是闭区间，则离点在外。<br>2.如果边界是开区间，则离点在内。</p></blockquote><h3 id="边界值应用场景："><a href="#边界值应用场景：" class="headerlink" title="边界值应用场景："></a>边界值应用场景：</h3><blockquote><p>1.如果需求规定了取值范围或规定了取值个数时，可利用该范围的边界及边界附近的数据进行测试。<br>2.如果需求规定了取值的个数，则少于个数一个，或多余个数一个的值进行测试。<br>3.如果需求规定了一个有序集合的时候，可使用该集合的第一个和最后一个值进行测试。<br>4.如果程序中使用一个内部数据结构的话，则应该从这个数据结构的边界值进行考虑。</p></blockquote><h3 id="边界值应用步骤："><a href="#边界值应用步骤：" class="headerlink" title="边界值应用步骤："></a>边界值应用步骤：</h3><blockquote><p>1.根据等价类方法划分有效等价类和无效等价类，确定上点、离点及内点，每一个点统一编号。<br>2.设计一个新的测试用例，使其尽可能覆盖所有尚未覆盖的有效等价类，直到所有的有效等价类完全覆盖。<br>3.设计一个新的测试用例，使其仅覆盖一个无效等价类，直到所有的无效等价类完全覆盖。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>在等价类基础上根据输入值编写边界值测试用例<br><img src="/2017/12/27/边界值/在等价类基础上根据输入值编写边界值测试用例.png" alt="在等价类基础上根据输入值编写边界值测试用例"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;边界值是对输入或输出的边界值进行测试的一种黑盒测试方法。通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>等价类</title>
    <link href="http://pythonfood.github.io/2017/12/27/%E7%AD%89%E4%BB%B7%E7%B1%BB/"/>
    <id>http://pythonfood.github.io/2017/12/27/等价类/</id>
    <published>2017-12-27T09:10:01.000Z</published>
    <updated>2018-02-09T06:21:19.701Z</updated>
    
    <content type="html"><![CDATA[<p>等价类是把所有可能的输入数据,即程序的输入域划分成若干部分（子集）,然后从每一个子集中选取少数具有代表性的数据作为测试用例。<br><a id="more"></a></p><h3 id="等价类划分规则："><a href="#等价类划分规则：" class="headerlink" title="等价类划分规则："></a>等价类划分规则：</h3><blockquote><p>1.如果输入条件规定了一个取值范围，那么就应该确定一个有效等价类以及两个无效等价类。<br>如月份取值在1~12之间，由此可确定一个有效等价类即月份在1~12之间，和两个无效等价类，即月份取值小于1及月份取值大于12.<br>2.规定了输入条件必须如何的情况下可以确定一个有效等价类和一个无效等价类。<br>如输入值必须大于0，则有效等价类为输入值大于0 ，无效等价类为输入值小于或者等于0.<br>3.在输入数据是一个bool常量的情况下，可以确定一个有效等价类和一个无效等价类。<br>4.在规定了输入数据由n个值构成的情况下，并要求定其中的每个值进行测试时，可以确定n个有效等价类和一个无效等价类。<br>如交通工具类型为公共汽车、卡车、出租车、火车或者摩托车，那么就应该为每一个输入值确定一个有效等价类和一个无效等价类例如拖车。<br>5.在规定了输入数据冰箱最受的规则的情况下，可以确定一个有效等价类和若干个无效等价类（从不同角度违反规则）。<br>如输入值必须是数字类型的字符，则可确定一个有效等价类，及输入值为数字类型得字符，和多个无效等价类，即输入值为字母、为专用字符（如+、*、@等）以及为非打印字符（如回车、空格等）。<br>6.在确知已划分的等价类中各元素在程序处理中的方式不同的情况下,则应再将该等价类进一步的划分为更小的等价类。<br>划分等价类之后，应建立等价类表，列出与每一个输入条件对于的有效等价类和无效等价类。</p></blockquote><h3 id="等价类设计测试用例："><a href="#等价类设计测试用例：" class="headerlink" title="等价类设计测试用例："></a>等价类设计测试用例：</h3><blockquote><p>1.根据需求，划分有效等价类和无效等价类，有效等价类统一编号，无效等价类统一编号。<br>2.设计一个新的测试用例,使其尽可能多地覆盖尚未被覆盖地有效等价类,重复这一步，直到所有的有效等价类都被覆盖为止。<br>3.设计一个新的测试用例,使其仅覆盖一个尚未被覆盖的无效等价类,重复这一步，直到所有的无效等价类都被覆盖为止。</p></blockquote><h3 id="等价类四则运算法："><a href="#等价类四则运算法：" class="headerlink" title="等价类四则运算法："></a>等价类四则运算法：</h3><blockquote><p>1.不考虑需求其他子项，细致分解当期测试点及详细需求，做累加。<br>2.根据业务规则减少，排除相关不可能出现的规则，减少不可能出现的组合。<br>3.如果有效等价类中具有互斥条件的需求时，可运用乘得到用例个数。<br>4.排除所有具有重复特性的等价类，尽可能做到有效等价类之间交集为空。</p></blockquote><h4 id="小示例："><a href="#小示例：" class="headerlink" title="小示例："></a>小示例：</h4><p>1.有效等价类一条用例尽量覆盖所有有效等价类<br><img src="/2017/12/27/等价类/1.有效等价类一条用例尽量覆盖所有有效等价类.png" alt="1.有效等价类一条用例尽量覆盖所有有效等价类"><br>2.无效等价类一条用例覆盖一个无效等价类<br><img src="/2017/12/27/等价类/2.无效等价类一条用例覆盖一个无效等价类.png" alt="2.无效等价类一条用例覆盖一个无效等价类"><br>3.根据覆盖条件编写等价类测试用例<br><img src="/2017/12/27/等价类/3.根据覆盖条件编写等价类测试用例.png" alt="3.根据覆盖条件编写等价类测试用例"></p><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;等价类是把所有可能的输入数据,即程序的输入域划分成若干部分（子集）,然后从每一个子集中选取少数具有代表性的数据作为测试用例。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试用例" scheme="http://pythonfood.github.io/categories/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
    
      <category term="测试用例" scheme="http://pythonfood.github.io/tags/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://pythonfood.github.io/2017/12/27/markdown/"/>
    <id>http://pythonfood.github.io/2017/12/27/markdown/</id>
    <published>2017-12-27T04:48:25.000Z</published>
    <updated>2018-02-08T08:02:56.783Z</updated>
    
    <content type="html"><![CDATA[<p>markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。markdown用于编写说明文档，并且以“README.MD”的文件名保存在软件的目录下面。<br><a id="more"></a></p><h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><pre><code>**粗体*****加粗斜体****斜体*_斜体_~~删除线~~    </code></pre><h3 id="分级标题"><a href="#分级标题" class="headerlink" title="分级标题"></a>分级标题</h3><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题这是一个一级标题================这是一个二级标题----------------</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><pre><code>+ 无    - 无     * 无+ 序    - 序     * 序+ 列    - 列     * 列+ 表    - 表     * 表1.有2.序3.列4.表</code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><pre><code>&gt;引用引用一段话</code></pre><h3 id="多层引用"><a href="#多层引用" class="headerlink" title="多层引用"></a>多层引用</h3><pre><code>&gt;&gt;&gt;多&gt;&gt;层&gt;引用</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><pre><code>![图片Alt](图片地址 “图片Title”)</code></pre><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><pre><code>[连接文字](连接地址 “连接Title”)</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code>`内行代码`两行```包夹多行代码1个tab或4个空格缩进，也可以写多行代码</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code>2个tab键或8个空格键</code></pre><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><pre><code>|学号|姓名|分数||:---|:--:|---:||111|我|70||左对齐|居中|右对齐|</code></pre><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><pre><code>**** * *******- - -_ _ _ _ _ _    </code></pre><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。markdown用于编写说明文档，并且以“README.MD”的文件名保存在软件的目录下面。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="markdown" scheme="http://pythonfood.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://pythonfood.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://pythonfood.github.io/2017/12/27/hexo/"/>
    <id>http://pythonfood.github.io/2017/12/27/hexo/</id>
    <published>2017-12-27T04:42:26.000Z</published>
    <updated>2018-02-08T08:02:42.203Z</updated>
    
    <content type="html"><![CDATA[<p>hexo常用命令笔记。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>npm install hexo -g </code></pre><h3 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h3><pre><code>npm update hexo -g</code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre><code>hexo init</code></pre><h3 id="显示Hexo版本号"><a href="#显示Hexo版本号" class="headerlink" title="显示Hexo版本号"></a>显示Hexo版本号</h3><pre><code>hexo version               </code></pre><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><pre><code>hexo n &quot;postName&quot;hexo new &quot;postName&quot;</code></pre><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code>hexo g hexo generate</code></pre><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><pre><code>hexo shexo serverhexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre><code>hexo d hexo deploy </code></pre><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><pre><code>hexo phexo publish [layout] &lt;title&gt;</code></pre><h3 id="列出网站资料"><a href="#列出网站资料" class="headerlink" title="列出网站资料"></a>列出网站资料</h3><pre><code>hexo list &lt;type&gt;        </code></pre><h3 id="清除db-json和public"><a href="#清除db-json和public" class="headerlink" title="清除db.json和public"></a>清除db.json和public</h3><pre><code>hexo clean                  </code></pre><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><pre><code>hexo new page &quot;pageName&quot;</code></pre><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a><em>持续更新…</em></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo常用命令笔记。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://pythonfood.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://pythonfood.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://pythonfood.github.io/2017/12/25/hello-world/"/>
    <id>http://pythonfood.github.io/2017/12/25/hello-world/</id>
    <published>2017-12-25T07:31:56.646Z</published>
    <updated>2017-12-25T07:31:56.646Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
